# AI-Q Unified Application Container
FROM node:18-slim AS frontend-builder

WORKDIR /app

# Copy frontend package files and install dependencies
COPY src/web/package*.json ./
RUN npm install --frozen-lockfile

# Copy frontend source code
COPY src/web/ ./
RUN npm run build

# --- Backend Stage ---
FROM python:3.10-slim AS backend

ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    nodejs \
    npm \
    supervisor \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY src/ ./src/
COPY config/ ./config/
COPY scripts/ ./scripts/

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/.next/ ./frontend/.next/
COPY --from=frontend-builder /app/public/ ./frontend/public/
COPY --from=frontend-builder /app/package.json ./frontend/package.json
COPY --from=frontend-builder /app/node_modules/ ./frontend/node_modules/

# Copy supervisor configuration
COPY config/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp

# Set permissions
RUN chmod +x scripts/*.sh

# Install Cadvisor for container monitoring
RUN wget -O /usr/local/bin/cadvisor https://github.com/google/cadvisor/releases/download/v0.47.2/cadvisor-v0.47.2-linux-amd64 \
    && chmod +x /usr/local/bin/cadvisor

# Create wait-for-services script (with Weaviate wait commented out)
RUN echo '#!/bin/bash\necho "Waiting for services to be ready..."\n\n# Wait for PostgreSQL\nuntil pg_isready -h postgres -p 5432 -U aiq_user; do\n  echo "Waiting for PostgreSQL..."\n  sleep 2\ndone\n\n# Wait for Redis\nuntil redis-cli -h redis -p 6379 ping; do\n  echo "Waiting for Redis..."\n  sleep 2\ndone\n\n# Wait for Elasticsearch\nuntil curl -f http://elasticsearch:9200/_cluster/health; do\n  echo "Waiting for Elasticsearch..."\n  sleep 2\ndone\n\n# Wait for Neo4j\nuntil curl -f http://neo4j:7474/browser/; do\n  echo "Waiting for Neo4j..."\n  sleep 2\ndone\n\n# Wait for MinIO\nuntil curl -f http://minio:9000/minio/health/live; do\n  echo "Waiting for MinIO..."\n  sleep 2\ndone\n\necho "All services are ready!"\n' > /app/scripts/wait-for-services.sh && chmod +x /app/scripts/wait-for-services.sh

# Expose ports
EXPOSE 8000 3000 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 