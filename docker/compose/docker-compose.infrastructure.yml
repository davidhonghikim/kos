version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-q-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiq_knowledge}
      POSTGRES_USER: ${POSTGRES_USER:-aiq_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiq_password}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${KOS_POSTGRES_EXTERNAL_PORT:-5432}:${KOS_POSTGRES_INTERNAL_PORT:-5432}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiq_user} -d ${POSTGRES_DB:-aiq_knowledge}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-q-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${KOS_REDIS_EXTERNAL_PORT:-6379}:${KOS_REDIS_INTERNAL_PORT:-6379}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-q-elasticsearch
    environment:
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE:-single-node}
      - xpack.security.enabled=${ELASTICSEARCH_XPACK_SECURITY_ENABLED:-true}
      - ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms512m -Xmx512m}
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${KOS_ELASTICSEARCH_EXTERNAL_PORT:-9200}:${KOS_ELASTICSEARCH_INTERNAL_PORT:-9200}"
      - "${KOS_ELASTICSEARCH_CLUSTER_EXTERNAL_PORT:-9300}:${KOS_ELASTICSEARCH_CLUSTER_INTERNAL_PORT:-9300}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j:
    image: neo4j:5.15.0
    container_name: ai-q-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: ${NEO4J_PLUGINS:-apoc,graph-data-science}
      NEO4J_dbms_security_procedures_unrestricted: ${NEO4J_PROCEDURES_UNRESTRICTED:-gds.*,apoc.*}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL_SIZE:-512m}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX_SIZE:-1G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-512m}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "${KOS_NEO4J_HTTP_EXTERNAL_PORT:-7474}:${KOS_NEO4J_HTTP_INTERNAL_PORT:-7474}"
      - "${KOS_NEO4J_EXTERNAL_PORT:-7687}:${KOS_NEO4J_INTERNAL_PORT:-7687}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: ai-q-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-true}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-text2vec-transformers}
      ENABLE_MODULES: ${WEAVIATE_ENABLE_MODULES:-text2vec-transformers,ref2vec-centroid,generative-openai,qna-openai}
      TRANSFORMERS_INFERENCE_API: ${WEAVIATE_TRANSFORMERS_INFERENCE_API:-http://t2v-transformers:8080}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "${KOS_WEAVIATE_EXTERNAL_PORT:-8080}:${KOS_WEAVIATE_INTERNAL_PORT:-8080}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2023-11-15T20-43-25Z
    container_name: ai-q-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "${KOS_MINIO_EXTERNAL_PORT:-9000}:${KOS_MINIO_INTERNAL_PORT:-9000}"
      - "${KOS_MINIO_CONSOLE_EXTERNAL_PORT:-9001}:${KOS_MINIO_CONSOLE_INTERNAL_PORT:-9001}"
    networks:
      - ai-q-network
    restart: unless-stopped
    command: server /data --console-address ":${KOS_MINIO_CONSOLE_INTERNAL_PORT:-9001}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.0
    container_name: ai-q-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${KOS_GRAFANA_EXTERNAL_PORT:-3001}:${KOS_GRAFANA_INTERNAL_PORT:-3000}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ai-q-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus:/etc/prometheus
    ports:
      - "${KOS_PROMETHEUS_EXTERNAL_PORT:-9090}:${KOS_PROMETHEUS_INTERNAL_PORT:-9090}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ai-q-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${KOS_CADVISOR_EXTERNAL_PORT:-8080}:${KOS_CADVISOR_INTERNAL_PORT:-8080}"
    networks:
      - ai-q-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  weaviate_data:
  minio_data:
  grafana_data:
  prometheus_data:

networks:
  ai-q-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 