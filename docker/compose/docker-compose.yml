version: '3.8'

services:
  postgres:
    image: ${KOS_POSTGRES_IMAGE}:${KOS_POSTGRES_VERSION}
    container_name: ${KOS_POSTGRES_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${KOS_POSTGRES_DB}
      POSTGRES_USER: ${KOS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KOS_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${KOS_POSTGRES_INITDB_ARGS}
    volumes:
      - ${KOS_POSTGRES_VOLUME}:/var/lib/postgresql/data
      - ${KOS_INIT_SCRIPTS_PATH}:/docker-entrypoint-initdb.d
    ports:
      - "${KOS_POSTGRES_EXTERNAL_PORT}:${KOS_POSTGRES_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KOS_POSTGRES_USER} -d ${KOS_POSTGRES_DB}"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  redis:
    image: ${KOS_REDIS_IMAGE}:${KOS_REDIS_VERSION}
    container_name: ${KOS_REDIS_CONTAINER_NAME}
    command: ${KOS_REDIS_COMMAND}
    volumes:
      - ${KOS_REDIS_VOLUME}:/data
    ports:
      - "${KOS_REDIS_EXTERNAL_PORT}:${KOS_REDIS_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  elasticsearch:
    image: ${KOS_ELASTICSEARCH_IMAGE}:${KOS_ELASTICSEARCH_VERSION}
    container_name: ${KOS_ELASTICSEARCH_CONTAINER_NAME}
    environment:
      - discovery.type=${KOS_ELASTICSEARCH_DISCOVERY_TYPE}
      - xpack.security.enabled=${KOS_ELASTICSEARCH_XPACK_SECURITY_ENABLED}
      - ES_JAVA_OPTS=${KOS_ELASTICSEARCH_JAVA_OPTS}
      - ELASTIC_PASSWORD=${KOS_ELASTICSEARCH_PASSWORD}
    volumes:
      - ${KOS_ELASTICSEARCH_VOLUME}:/usr/share/elasticsearch/data
    ports:
      - "${KOS_ELASTICSEARCH_EXTERNAL_PORT}:${KOS_ELASTICSEARCH_INTERNAL_PORT}"
      - "${KOS_ELASTICSEARCH_CLUSTER_EXTERNAL_PORT}:${KOS_ELASTICSEARCH_CLUSTER_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_ELASTICSEARCH_HOST}:${KOS_ELASTICSEARCH_INTERNAL_PORT}/_cluster/health || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  neo4j:
    image: ${KOS_NEO4J_IMAGE}:${KOS_NEO4J_VERSION}
    container_name: ${KOS_NEO4J_CONTAINER_NAME}
    environment:
      NEO4J_AUTH: ${KOS_NEO4J_USER}/${KOS_NEO4J_PASSWORD}
      NEO4J_PLUGINS: ${KOS_NEO4J_PLUGINS}
      NEO4J_dbms_security_procedures_unrestricted: ${KOS_NEO4J_PROCEDURES_UNRESTRICTED}
      NEO4J_dbms_memory_heap_initial__size: ${KOS_NEO4J_HEAP_INITIAL_SIZE}
      NEO4J_dbms_memory_heap_max__size: ${KOS_NEO4J_HEAP_MAX_SIZE}
      NEO4J_dbms_memory_pagecache_size: ${KOS_NEO4J_PAGECACHE_SIZE}
    volumes:
      - ${KOS_NEO4J_DATA_VOLUME}:/data
      - ${KOS_NEO4J_LOGS_VOLUME}:/logs
      - ${KOS_NEO4J_IMPORT_VOLUME}:/var/lib/neo4j/import
      - ${KOS_NEO4J_PLUGINS_VOLUME}:/plugins
    ports:
      - "${KOS_NEO4J_HTTP_EXTERNAL_PORT}:${KOS_NEO4J_HTTP_INTERNAL_PORT}"
      - "${KOS_NEO4J_EXTERNAL_PORT}:${KOS_NEO4J_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://${KOS_NEO4J_HOST}:${KOS_NEO4J_HTTP_INTERNAL_PORT}/browser/ || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  weaviate:
    image: ${KOS_WEAVIATE_IMAGE}:${KOS_WEAVIATE_VERSION}
    container_name: ${KOS_WEAVIATE_CONTAINER_NAME}
    environment:
      QUERY_DEFAULTS_LIMIT: ${KOS_WEAVIATE_QUERY_DEFAULTS_LIMIT}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${KOS_WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED}
      PERSISTENCE_DATA_PATH: ${KOS_WEAVIATE_PERSISTENCE_DATA_PATH}
      DEFAULT_VECTORIZER_MODULE: ${KOS_WEAVIATE_DEFAULT_VECTORIZER_MODULE}
      ENABLE_MODULES: ${KOS_WEAVIATE_ENABLE_MODULES}
      TRANSFORMERS_INFERENCE_API: ${KOS_WEAVIATE_TRANSFORMERS_INFERENCE_API}
    volumes:
      - ${KOS_WEAVIATE_VOLUME}:/var/lib/weaviate
    ports:
      - "${KOS_WEAVIATE_EXTERNAL_PORT}:${KOS_WEAVIATE_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_WEAVIATE_HOST}:${KOS_WEAVIATE_INTERNAL_PORT}/v1/.well-known/ready"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  minio:
    image: ${KOS_MINIO_IMAGE}:${KOS_MINIO_VERSION}
    container_name: ${KOS_MINIO_CONTAINER_NAME}
    environment:
      MINIO_ROOT_USER: ${KOS_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${KOS_MINIO_ROOT_PASSWORD}
    volumes:
      - ${KOS_MINIO_VOLUME}:/data
    ports:
      - "${KOS_MINIO_EXTERNAL_PORT}:${KOS_MINIO_INTERNAL_PORT}"
      - "${KOS_MINIO_CONSOLE_EXTERNAL_PORT}:${KOS_MINIO_CONSOLE_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    command: server /data --console-address ":${KOS_MINIO_CONSOLE_INTERNAL_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_MINIO_HOST}:${KOS_MINIO_INTERNAL_PORT}/minio/health/live"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  api-server:
    build:
      context: ${KOS_BUILD_CONTEXT}
      dockerfile: ${KOS_API_DOCKERFILE}
    container_name: ${KOS_API_CONTAINER_NAME}
    environment:
      - API_HOST=${KOS_API_HOST}
      - API_PORT=${KOS_API_INTERNAL_PORT}
      - JWT_SECRET=${KOS_API_JWT_SECRET}
      - ENVIRONMENT=${KOS_ENVIRONMENT}
    ports:
      - "${KOS_API_EXTERNAL_PORT}:${KOS_API_INTERNAL_PORT}"
    volumes:
      - ${KOS_SRC_PATH}:/app/src
      - ${KOS_CONFIG_PATH}:/app/config
    networks:
      - ${KOS_CONTAINER_NETWORK}
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - neo4j
      - weaviate
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_API_HOST}:${KOS_API_INTERNAL_PORT}/health"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  web-dashboard:
    build:
      context: ${KOS_BUILD_CONTEXT}
      dockerfile: ${KOS_FRONTEND_DOCKERFILE}
    container_name: ${KOS_FRONTEND_CONTAINER_NAME}
    environment:
      - NEXT_PUBLIC_API_URL=${KOS_FRONTEND_API_URL}
      - NODE_ENV=${KOS_NODE_ENV}
    ports:
      - "${KOS_FRONTEND_EXTERNAL_PORT}:${KOS_FRONTEND_INTERNAL_PORT}"
    volumes:
      - ${KOS_SRC_PATH}:/app/src
      - ${KOS_PUBLIC_PATH}:/app/public
    networks:
      - ${KOS_CONTAINER_NETWORK}
    depends_on:
      - api-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_FRONTEND_HOST}:${KOS_FRONTEND_INTERNAL_PORT}/api/health"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  grafana:
    image: ${KOS_GRAFANA_IMAGE}:${KOS_GRAFANA_VERSION}
    container_name: ${KOS_GRAFANA_CONTAINER_NAME}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${KOS_GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ${KOS_GRAFANA_VOLUME}:/var/lib/grafana
      - ${KOS_GRAFANA_CONFIG_PATH}:/etc/grafana/provisioning
    ports:
      - "${KOS_GRAFANA_EXTERNAL_PORT}:${KOS_GRAFANA_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_GRAFANA_HOST}:${KOS_GRAFANA_INTERNAL_PORT}/api/health || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  prometheus:
    image: ${KOS_PROMETHEUS_IMAGE}:${KOS_PROMETHEUS_VERSION}
    container_name: ${KOS_PROMETHEUS_CONTAINER_NAME}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${KOS_PROMETHEUS_RETENTION_TIME}'
      - '--web.enable-lifecycle'
    volumes:
      - ${KOS_PROMETHEUS_VOLUME}:/prometheus
      - ${KOS_PROMETHEUS_CONFIG_PATH}:/etc/prometheus
    ports:
      - "${KOS_PROMETHEUS_EXTERNAL_PORT}:${KOS_PROMETHEUS_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://${KOS_PROMETHEUS_HOST}:${KOS_PROMETHEUS_INTERNAL_PORT}/-/healthy || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  cadvisor:
    image: ${KOS_CADVISOR_IMAGE}:${KOS_CADVISOR_VERSION}
    container_name: ${KOS_CADVISOR_CONTAINER_NAME}
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${KOS_CADVISOR_EXTERNAL_PORT}:${KOS_CADVISOR_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://${KOS_CADVISOR_HOST}:${KOS_CADVISOR_INTERNAL_PORT}/healthz || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  # Automatic1111 Stable Diffusion WebUI
  automatic1111:
    image: ${KOS_AUTOMATIC1111_IMAGE}:${KOS_AUTOMATIC1111_VERSION}
    container_name: ${KOS_AUTOMATIC1111_CONTAINER_NAME}
    environment:
      - COMMANDLINE_ARGS=${KOS_AUTOMATIC1111_COMMANDLINE_ARGS}
      - REQS_FILE=${KOS_AUTOMATIC1111_REQS_FILE}
    volumes:
      - ${KOS_AUTOMATIC1111_MODELS_VOLUME}:/app/models
      - ${KOS_AUTOMATIC1111_OUTPUTS_VOLUME}:/app/outputs
      - ${KOS_AUTOMATIC1111_EXTENSIONS_VOLUME}:/app/extensions
    ports:
      - "${KOS_AUTOMATIC1111_EXTERNAL_PORT}:${KOS_AUTOMATIC1111_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_AUTOMATIC1111_HOST}:${KOS_AUTOMATIC1111_INTERNAL_PORT}/sdapi/v1/samplers"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${KOS_GPU_COUNT}
              capabilities: [gpu]

  # ComfyUI Node-Based Workflow
  comfyui:
    image: ${KOS_COMFYUI_IMAGE}:${KOS_COMFYUI_VERSION}
    container_name: ${KOS_COMFYUI_CONTAINER_NAME}
    environment:
      - COMFYUI_PORT=${KOS_COMFYUI_INTERNAL_PORT}
    volumes:
      - ${KOS_COMFYUI_MODELS_VOLUME}:/app/models
      - ${KOS_COMFYUI_OUTPUTS_VOLUME}:/app/output
      - ${KOS_COMFYUI_CUSTOM_NODES_VOLUME}:/app/custom_nodes
    ports:
      - "${KOS_COMFYUI_EXTERNAL_PORT}:${KOS_COMFYUI_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_COMFYUI_HOST}:${KOS_COMFYUI_INTERNAL_PORT}/system_stats"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${KOS_GPU_COUNT}
              capabilities: [gpu]

  # n8n Workflow Automation
  n8n:
    image: ${KOS_N8N_IMAGE}:${KOS_N8N_VERSION}
    container_name: ${KOS_N8N_CONTAINER_NAME}
    environment:
      - N8N_HOST=${KOS_N8N_HOST}
      - N8N_PORT=${KOS_N8N_INTERNAL_PORT}
      - N8N_PROTOCOL=${KOS_N8N_PROTOCOL}
      - N8N_USER_MANAGEMENT_DISABLED=${KOS_N8N_USER_MANAGEMENT_DISABLED}
      - N8N_BASIC_AUTH_ACTIVE=${KOS_N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${KOS_N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${KOS_N8N_BASIC_AUTH_PASSWORD}
      - WEBHOOK_URL=${KOS_N8N_WEBHOOK_URL}
      - GENERIC_TIMEZONE=${KOS_N8N_TIMEZONE}
      - N8N_ENCRYPTION_KEY=${KOS_N8N_ENCRYPTION_KEY}
    volumes:
      - ${KOS_N8N_VOLUME}:/home/node/.n8n
    ports:
      - "${KOS_N8N_EXTERNAL_PORT}:${KOS_N8N_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_N8N_HOST}:${KOS_N8N_INTERNAL_PORT}/healthz"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  # Penpot Design and Prototyping
  penpot:
    image: ${KOS_PENPOT_IMAGE}:${KOS_PENPOT_VERSION}
    container_name: ${KOS_PENPOT_CONTAINER_NAME}
    environment:
      - PENPOT_DATABASE_URI=${KOS_PENPOT_DATABASE_URI}
      - PENPOT_REDIS_URI=${KOS_PENPOT_REDIS_URI}
      - PENPOT_SECRET_KEY=${KOS_PENPOT_SECRET_KEY}
      - PENPOT_PUBLIC_URI=${KOS_PENPOT_PUBLIC_URI}
    volumes:
      - ${KOS_PENPOT_VOLUME}:/app/data
    ports:
      - "${KOS_PENPOT_EXTERNAL_PORT}:${KOS_PENPOT_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${KOS_PENPOT_HOST}:${KOS_PENPOT_INTERNAL_PORT}/api/health"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}

  # HuggingFace Transformers Inference (Primary Vectorization)
  huggingface-inference:
    image: ${KOS_HUGGINGFACE_IMAGE}:${KOS_HUGGINGFACE_VERSION}
    container_name: ${KOS_HUGGINGFACE_CONTAINER_NAME}
    environment:
      - MODEL_NAME=${KOS_HUGGINGFACE_MODEL_NAME}
      - DEVICE=${KOS_HUGGINGFACE_DEVICE}
      - MAX_BATCH_SIZE=${KOS_HUGGINGFACE_MAX_BATCH_SIZE}
      - MAX_BATCH_WAIT=${KOS_HUGGINGFACE_MAX_BATCH_WAIT}
      - LOG_LEVEL=${KOS_HUGGINGFACE_LOG_LEVEL}
      - HUGGINGFACE_TOKEN=${KOS_HUGGINGFACE_TOKEN}
    volumes:
      - ${KOS_HUGGINGFACE_CACHE_VOLUME}:/root/.cache/huggingface
      - ${KOS_HUGGINGFACE_CONFIG_PATH}:/app
    working_dir: /app
    command: ${KOS_HUGGINGFACE_COMMAND}
    ports:
      - "${KOS_HUGGINGFACE_EXTERNAL_PORT}:${KOS_HUGGINGFACE_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_HUGGINGFACE_HOST}:${KOS_HUGGINGFACE_INTERNAL_PORT}/health || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${KOS_GPU_COUNT}
              capabilities: [gpu]

  ollama:
    image: ${KOS_OLLAMA_IMAGE}:${KOS_OLLAMA_VERSION}
    container_name: ${KOS_OLLAMA_CONTAINER_NAME}
    environment:
      - OLLAMA_MODEL=${KOS_OLLAMA_MODEL}
      - OLLAMA_EMBEDDING_MODEL=${KOS_OLLAMA_EMBEDDING_MODEL}
      - OLLAMA_LOG_LEVEL=${KOS_OLLAMA_LOG_LEVEL}
    volumes:
      - ${KOS_OLLAMA_VOLUME}:/root/.ollama
    ports:
      - "${KOS_OLLAMA_EXTERNAL_PORT}:${KOS_OLLAMA_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_OLLAMA_HOST}:${KOS_OLLAMA_INTERNAL_PORT}/health || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${KOS_GPU_COUNT}
              capabilities: [gpu]

  # Gitea Git Server (Feature Flagged)
  gitea:
    image: ${KOS_GITEA_IMAGE}:${KOS_GITEA_VERSION}
    container_name: ${KOS_GITEA_CONTAINER_NAME}
    environment:
      - GITEA__database__DB_TYPE=${KOS_GITEA_DB_TYPE}
      - GITEA__database__PATH=${KOS_GITEA_DB_PATH}
      - GITEA__server__DOMAIN=${KOS_GITEA_DOMAIN}
      - GITEA__server__ROOT_URL=${KOS_GITEA_ROOT_URL}
      - GITEA__server__SSH_DOMAIN=${KOS_GITEA_SSH_DOMAIN}
      - GITEA__server__SSH_PORT=${KOS_GITEA_SSH_PORT}
      - GITEA__server__HTTP_PORT=${KOS_GITEA_HTTP_PORT}
      - GITEA__server__DISABLE_SSH=${KOS_GITEA_DISABLE_SSH}
      - GITEA__security__INSTALL_LOCK=${KOS_GITEA_INSTALL_LOCK}
      - GITEA__service__DISABLE_REGISTRATION=${KOS_GITEA_DISABLE_REGISTRATION}
      - GITEA__service__REQUIRE_SIGNIN_VIEW=${KOS_GITEA_REQUIRE_SIGNIN_VIEW}
      - GITEA__log__LEVEL=${KOS_GITEA_LOG_LEVEL}
      - GITEA__log__MODE=${KOS_GITEA_LOG_MODE}
      - ENABLE_GITEA=${KOS_ENABLE_GITEA}
    volumes:
      - ${KOS_GITEA_DATA_VOLUME}:/data
      - ${KOS_GITEA_CONFIG_VOLUME}:/data/gitea/conf
      - ${KOS_GITEA_REPOS_VOLUME}:/data/git/repositories
      - ${KOS_GITEA_SSH_VOLUME}:/data/git/.ssh
    ports:
      - "${KOS_GITEA_EXTERNAL_PORT}:${KOS_GITEA_INTERNAL_PORT}"
      - "${KOS_GITEA_SSH_EXTERNAL_PORT}:${KOS_GITEA_SSH_INTERNAL_PORT}"
    networks:
      - ${KOS_CONTAINER_NETWORK}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_GITEA_HOST}:${KOS_GITEA_INTERNAL_PORT}/api/v1/version || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT}
      retries: ${KOS_HEALTH_CHECK_RETRIES}
    profiles:
      - gitea

volumes:
  kos-postgres-data:
  kos-redis-data:
  kos-elasticsearch-data:
  kos-neo4j-data:
  kos-neo4j-logs:
  kos-neo4j-import:
  kos-neo4j-plugins:
  kos-weaviate-data:
  kos-minio-data:
  kos-grafana-data:
  kos-prometheus-data:
  kos-automatic1111-models:
  kos-automatic1111-outputs:
  kos-automatic1111-extensions:
  kos-comfyui-models:
  kos-comfyui-outputs:
  kos-comfyui-custom-nodes:
  kos-n8n-data:
  kos-penpot-data:
  kos-gitea-data:
  kos-gitea-config:
  kos-gitea-repos:
  kos-gitea-ssh:
  kos-huggingface-cache:
  kos-ollama-data:

networks:
  kos-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${KOS_NETWORK_SUBNET} 
