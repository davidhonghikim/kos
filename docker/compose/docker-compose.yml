version: '3.8'

services:
  postgres:
    image: ${KOS_POSTGRES_IMAGE:-postgres}:${KOS_POSTGRES_VERSION:-15-alpine}
    container_name: ${KOS_POSTGRES_CONTAINER_NAME:-kos-postgres}
    environment:
      POSTGRES_DB: ${KOS_POSTGRES_DB:-kos_knowledge}
      POSTGRES_USER: ${KOS_POSTGRES_USER:-kos_user}
      POSTGRES_PASSWORD: ${KOS_POSTGRES_PASSWORD:-kos_password}
      POSTGRES_INITDB_ARGS: ${KOS_POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
      - ${KOS_POSTGRES_VOLUME:-kos-postgres-data}:/var/lib/postgresql/data
      - ${KOS_INIT_SCRIPTS_PATH:-../../init-scripts}:/docker-entrypoint-initdb.d
    ports:
      - "${KOS_POSTGRES_EXTERNAL_PORT:-5432}:${KOS_POSTGRES_INTERNAL_PORT:-5432}"
    networks:
      - ${KOS_CONTAINER_NETWORK:-kos-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KOS_POSTGRES_USER:-kos_user} -d ${KOS_POSTGRES_DB:-kos_knowledge}"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${KOS_HEALTH_CHECK_RETRIES:-3}

  redis:
    image: ${KOS_REDIS_IMAGE:-redis}:${KOS_REDIS_VERSION:-7-alpine}
    container_name: ${KOS_REDIS_CONTAINER_NAME:-kos-redis}
    command: ${KOS_REDIS_COMMAND:-redis-server --appendonly yes}
    volumes:
      - ${KOS_REDIS_VOLUME:-kos-redis-data}:/data
    ports:
      - "${KOS_REDIS_EXTERNAL_PORT:-6379}:${KOS_REDIS_INTERNAL_PORT:-6379}"
    networks:
      - ${KOS_CONTAINER_NETWORK:-kos-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${KOS_HEALTH_CHECK_RETRIES:-3}

  elasticsearch:
    image: ${KOS_ELASTICSEARCH_IMAGE:-docker.elastic.co/elasticsearch/elasticsearch}:${KOS_ELASTICSEARCH_VERSION:-8.11.0}
    container_name: ${KOS_ELASTICSEARCH_CONTAINER_NAME:-kos-elasticsearch}
    environment:
      - discovery.type=${KOS_ELASTICSEARCH_DISCOVERY_TYPE:-single-node}
      - xpack.security.enabled=${KOS_ELASTICSEARCH_XPACK_SECURITY_ENABLED:-true}
      - ES_JAVA_OPTS=${KOS_ELASTICSEARCH_JAVA_OPTS:--Xms512m -Xmx512m}
      - ELASTIC_PASSWORD=${KOS_ELASTICSEARCH_PASSWORD:-elastic}
    volumes:
      - ${KOS_ELASTICSEARCH_VOLUME:-kos-elasticsearch-data}:/usr/share/elasticsearch/data
    ports:
      - "${KOS_ELASTICSEARCH_EXTERNAL_PORT:-9200}:${KOS_ELASTICSEARCH_INTERNAL_PORT:-9200}"
      - "${KOS_ELASTICSEARCH_CLUSTER_EXTERNAL_PORT:-9300}:${KOS_ELASTICSEARCH_CLUSTER_INTERNAL_PORT:-9300}"
    networks:
      - ${KOS_CONTAINER_NETWORK:-kos-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://${KOS_ELASTICSEARCH_HOST:-elasticsearch}:${KOS_ELASTICSEARCH_PORT:-9200}/_cluster/health || exit 1"]
      interval: ${KOS_HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${KOS_HEALTH_CHECK_TIMEOUT:-10s}
      retries: 5

  neo4j:
    image: neo4j:5.15.0
    container_name: kos-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: ${NEO4J_PLUGINS:-apoc,graph-data-science}
      NEO4J_dbms_security_procedures_unrestricted: ${NEO4J_PROCEDURES_UNRESTRICTED:-gds.*,apoc.*}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL_SIZE:-512m}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX_SIZE:-1G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-512m}
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    ports:
      - "${KOS_NEO4J_HTTP_EXTERNAL_PORT:-7474}:${KOS_NEO4J_HTTP_INTERNAL_PORT:-7474}"
      - "${KOS_NEO4J_EXTERNAL_PORT:-7687}:${KOS_NEO4J_INTERNAL_PORT:-7687}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: kos-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-true}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      DEFAULT_VECTORIZER_MODULE: text2vec-transformers
      ENABLE_MODULES: text2vec-transformers,ref2vec-centroid
      TRANSFORMERS_INFERENCE_API: ${WEAVIATE_TRANSFORMERS_INFERENCE_API:-http://huggingface-inference:8080}
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "${KOS_WEAVIATE_EXTERNAL_PORT:-8080}:${KOS_WEAVIATE_INTERNAL_PORT:-8080}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2023-11-15T20-43-25Z
    container_name: kos-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "${KOS_MINIO_EXTERNAL_PORT:-9000}:${KOS_MINIO_INTERNAL_PORT:-9000}"
      - "${KOS_MINIO_CONSOLE_EXTERNAL_PORT:-9001}:${KOS_MINIO_CONSOLE_INTERNAL_PORT:-9001}"
    networks:
      - kos-network
    restart: unless-stopped
    command: server /data --console-address ":${KOS_MINIO_CONSOLE_INTERNAL_PORT:-9001}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-server:
    build:
      context: ../..
      dockerfile: docker/dockerfiles/Dockerfile.api
    container_name: kos-api-server
    environment:
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${KOS_API_EXTERNAL_PORT:-8000}:${KOS_API_INTERNAL_PORT:-8000}"
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    networks:
      - kos-network
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - neo4j
      - weaviate
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-dashboard:
    build:
      context: ../..
      dockerfile: docker/dockerfiles/Dockerfile.web
    container_name: kos-web-dashboard
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api-server:8000}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${KOS_FRONTEND_EXTERNAL_PORT:-3000}:${KOS_FRONTEND_INTERNAL_PORT:-3000}"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    networks:
      - kos-network
    depends_on:
      - api-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.2.0
    container_name: kos-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${KOS_GRAFANA_EXTERNAL_PORT:-3001}:${KOS_GRAFANA_INTERNAL_PORT:-3000}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: kos-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus:/etc/prometheus
    ports:
      - "${KOS_PROMETHEUS_EXTERNAL_PORT:-9090}:${KOS_PROMETHEUS_INTERNAL_PORT:-9090}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: kos-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${KOS_CADVISOR_EXTERNAL_PORT:-8081}:${KOS_CADVISOR_INTERNAL_PORT:-8080}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automatic1111 Stable Diffusion WebUI
  automatic1111:
    image: automatic1111/stable-diffusion-webui:latest
    container_name: kos-automatic1111
    environment:
      - COMMANDLINE_ARGS=--api --listen --port ${KOS_AUTOMATIC1111_EXTERNAL_PORT:-7860} --enable-insecure-extension-access
      - REQS_FILE=requirements.txt
    volumes:
      - automatic1111_models:/app/models
      - automatic1111_outputs:/app/outputs
      - automatic1111_extensions:/app/extensions
    ports:
      - "${KOS_AUTOMATIC1111_EXTERNAL_PORT:-7860}:${KOS_AUTOMATIC1111_EXTERNAL_PORT:-7860}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/sdapi/v1/samplers"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ComfyUI Node-Based Workflow
  comfyui:
    image: comfyanonymous/comfyui:latest
    container_name: kos-comfyui
    environment:
      - COMFYUI_PORT=${KOS_COMFYUI_EXTERNAL_PORT:-8188}
    volumes:
      - comfyui_models:/app/models
      - comfyui_outputs:/app/output
      - comfyui_custom_nodes:/app/custom_nodes
    ports:
      - "${KOS_COMFYUI_EXTERNAL_PORT:-8188}:${KOS_COMFYUI_EXTERNAL_PORT:-8188}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8188/system_stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: kos-n8n
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED:-false}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-false}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678/}
      - GENERIC_TIMEZONE=${N8N_TIMEZONE:-UTC}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-your-encryption-key}
    volumes:
      - n8n_data:/home/node/.n8n
    ports:
      - "${KOS_N8N_EXTERNAL_PORT:-5678}:${KOS_N8N_INTERNAL_PORT:-5678}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Penpot Design and Prototyping
  penpot:
    image: penpot/penpot:latest
    container_name: kos-penpot
    environment:
      - PENPOT_DATABASE_URI=${PENPOT_DATABASE_URI:-postgresql://penpot:penpot@postgres:${KOS_POSTGRES_INTERNAL_PORT:-5432}/penpot}
      - PENPOT_REDIS_URI=${PENPOT_REDIS_URI:-redis://redis:${KOS_REDIS_INTERNAL_PORT:-6379}/0}
      - PENPOT_SECRET_KEY=${PENPOT_SECRET_KEY:-your-secret-key}
      - PENPOT_PUBLIC_URI=${PENPOT_PUBLIC_URI:-http://localhost:9001}
    volumes:
      - penpot_data:/app/data
    ports:
      - "${KOS_PENPOT_EXTERNAL_PORT:-9001}:${KOS_PENPOT_INTERNAL_PORT:-80}"
    networks:
      - kos-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HuggingFace Transformers Inference (Primary Vectorization)
  huggingface-inference:
    image: python:3.11-slim
    container_name: kos-huggingface-inference
    environment:
      - MODEL_NAME=${MODEL_NAME}
      - DEVICE=${DEVICE}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE}
      - MAX_BATCH_WAIT=${MAX_BATCH_WAIT}
      - LOG_LEVEL=${LOG_LEVEL}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    volumes:
      - huggingface_cache:/root/.cache/huggingface
      - ../../config/huggingface:/app
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt &&
             python -m uvicorn main:app --host 0.0.0.0 --port 8080"
    ports:
      - "${KOS_HUGGINGFACE_EXTERNAL_PORT:-8082}:${KOS_HUGGINGFACE_INTERNAL_PORT:-8080}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama:
    image: ollama/ollama:latest
    container_name: kos-ollama
    environment:
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL}
      - OLLAMA_LOG_LEVEL=${OLLAMA_LOG_LEVEL}
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${KOS_OLLAMA_EXTERNAL_PORT:-11434}:${KOS_OLLAMA_INTERNAL_PORT:-11434}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Gitea Git Server (Feature Flagged)
  gitea:
    image: gitea/gitea:1.21.0
    container_name: kos-gitea
    environment:
      - GITEA__database__DB_TYPE=${GITEA_DB_TYPE:-sqlite3}
      - GITEA__database__PATH=${GITEA_DB_PATH:-/data/gitea/gitea.db}
      - GITEA__server__DOMAIN=${GITEA_DOMAIN:-localhost}
      - GITEA__server__ROOT_URL=${GITEA_ROOT_URL:-http://localhost:3002/}
      - GITEA__server__SSH_DOMAIN=${GITEA_SSH_DOMAIN:-localhost}
      - GITEA__server__SSH_PORT=${GITEA_SSH_PORT:-222}
      - GITEA__server__HTTP_PORT=${GITEA_HTTP_PORT:-3000}
      - GITEA__server__DISABLE_SSH=${GITEA_DISABLE_SSH:-false}
      - GITEA__security__INSTALL_LOCK=${GITEA_INSTALL_LOCK:-true}
      - GITEA__service__DISABLE_REGISTRATION=${GITEA_DISABLE_REGISTRATION:-false}
      - GITEA__service__REQUIRE_SIGNIN_VIEW=${GITEA_REQUIRE_SIGNIN_VIEW:-false}
      - GITEA__log__LEVEL=${GITEA_LOG_LEVEL:-Info}
      - GITEA__log__MODE=${GITEA_LOG_MODE:-console}
      - ENABLE_GITEA=${ENABLE_GITEA:-true}
    volumes:
      - gitea_data:/data
      - gitea_config:/data/gitea/conf
      - gitea_repos:/data/git/repositories
      - gitea_ssh:/data/git/.ssh
    ports:
      - "${KOS_GITEA_EXTERNAL_PORT:-3002}:${KOS_GITEA_INTERNAL_PORT:-3000}"
      - "${KOS_GITEA_SSH_EXTERNAL_PORT:-222}:${KOS_GITEA_SSH_INTERNAL_PORT:-22}"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - gitea

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  weaviate_data:
  minio_data:
  grafana_data:
  prometheus_data:
  automatic1111_models:
  automatic1111_outputs:
  automatic1111_extensions:
  comfyui_models:
  comfyui_outputs:
  comfyui_custom_nodes:
  n8n_data:
  penpot_data:
  gitea_data:
  gitea_config:
  gitea_repos:
  gitea_ssh:
  huggingface_cache:
  ollama_data:

networks:
  kos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
