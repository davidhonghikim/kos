name: kos-unified

services:
  # ============================================================================
  # AI/ML Services
  # ============================================================================
  
  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: kos-ollama
    restart: unless-stopped
    ports:
      - "${OLLAMA_PORT:-11000}:11434"
    volumes:
      - /opt/kos/data/ollama/models:/root/.ollama/models
      - /opt/kos/data/ollama/config:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    networks:
      - kos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # OpenWebUI Service
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: kos-openwebui
    restart: unless-stopped
    ports:
      - "${OPENWEBUI_PORT:-11001}:8080"
    volumes:
      - /opt/kos/data/openwebui/data:/app/backend/data
      - /opt/kos/data/openwebui/config:/app/backend/config
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${OPENWEBUI_SECRET_KEY:-your-super-secret-openwebui-key-change-in-production}
      - DEFAULT_MODELS=${OPENWEBUI_DEFAULT_MODELS:-gemma3:2b,codellama:7b}
      - DEFAULT_USER_ROLE=admin
      - ENABLE_SIGNUP=true
      - ENABLE_LOGIN_FORM=true
    networks:
      - kos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/models"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - ollama

  # ============================================================================
  # Self-Hosted Services
  # ============================================================================
  
  # Gitea Git Server
  gitea:
    image: gitea/gitea:1.21.0
    container_name: kos-gitea
    restart: unless-stopped
    environment:
      - USER_UID=1000
      - USER_GID=1000
    ports:
      - "${GITEA_PORT:-3002}:3000"
      - "${GITEA_SSH_PORT:-222}:22"
    volumes:
      - /opt/kos/data/gitea:/data
      - /opt/kos/config/gitea/app.ini:/data/gitea/conf/app.ini
    networks:
      - kos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NextCloud File Storage
  nextcloud:
    image: nextcloud:25.0.0
    container_name: kos-nextcloud
    restart: unless-stopped
    environment:
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER:-admin}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-admin123}
      - MYSQL_HOST=postgres
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-nextcloud123}
    ports:
      - "${NEXTCLOUD_PORT:-8080}:80"
    volumes:
      - /opt/kos/data/nextcloud:/var/www/html
      - /opt/kos/config/nextcloud/config.php:/var/www/html/config/config.php
    networks:
      - kos-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel
  admin-panel:
    image: nginx:alpine
    container_name: kos-admin-panel
    restart: unless-stopped
    ports:
      - "${ADMIN_PANEL_PORT:-9000}:80"
    volumes:
      - /opt/kos/config/admin-panel/nginx.conf:/etc/nginx/nginx.conf
      - /opt/kos/data/admin-panel:/var/www/html
    networks:
      - kos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Local Docker Registry
  registry:
    image: registry:2.8.2
    container_name: kos-registry
    restart: unless-stopped
    ports:
      - "${REGISTRY_PORT:-5000}:5000"
    volumes:
      - /opt/kos/data/registry:/var/lib/registry
    networks:
      - kos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/v2/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Main kos Application Container
  # ============================================================================
  
  kos-app:
    build:
      context: ../..
      dockerfile: docker/dockerfiles/Dockerfile.unified
    container_name: kos-unified-app
    environment:
      # Application Settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - WEB_PORT=${WEB_PORT:-3000}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      
      # Database Settings
      - POSTGRES_DB=${POSTGRES_DB:-aiq_knowledge}
      - POSTGRES_USER=${POSTGRES_USER:-aiq_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiq_password}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      
      # Redis Settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Elasticsearch Settings
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
      
      # Neo4j Settings
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      
      # Weaviate Settings
      - WEAVIATE_HOST=weaviate
      - WEAVIATE_PORT=8080
      
      # MinIO Settings
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      
      # Monitoring Settings
      - PROMETHEUS_HOST=prometheus
      - PROMETHEUS_PORT=9090
      - GRAFANA_HOST=grafana
      - GRAFANA_PORT=3000
      
      # Feature Flags
      - ENABLE_RAG=${ENABLE_RAG:-true}
      - ENABLE_GRAPH_DB=${ENABLE_GRAPH_DB:-true}
      - ENABLE_VECTOR_DB=${ENABLE_VECTOR_DB:-true}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      
    ports:
      - "${API_PORT:-8000}:8000"  # API Server
      - "${WEB_PORT:-3000}:3000"  # Web Dashboard
      - "${CADVISOR_PORT:-8081}:8080"  # Container monitoring
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
      - ../../public:/app/public
      - ../../logs:/app/logs
      - ../../data:/app/data
    networks:
      - kos-network
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - neo4j
      - weaviate
      - minio
      - prometheus
      - grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["./scripts/start-unified.sh"]

  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kos-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiq_knowledge}
      POSTGRES_USER: ${POSTGRES_USER:-aiq_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiq_password}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
      - kos-postgres-data:/var/lib/postgresql/data
      - ../../init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiq_user} -d ${POSTGRES_DB:-aiq_knowledge}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kos-redis
    command: redis-server --appendonly yes
    volumes:
      - kos-redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kos-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx512m
      - ELASTIC_PASSWORD=elastic
    volumes:
      - kos-elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_CLUSTER_PORT:-9300}:9300"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15.0
    container_name: kos-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: ${NEO4J_PLUGINS:-apoc,graph-data-science}
      NEO4J_dbms_security_procedures_unrestricted: ${NEO4J_PROCEDURES_UNRESTRICTED:-gds.*,apoc.*}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL_SIZE:-512m}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX_SIZE:-1G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-512m}
    volumes:
      - kos-neo4j-data:/data
      - kos-neo4j-logs:/logs
      - kos-neo4j-import:/var/lib/neo4j/import
      - kos-neo4j-plugins:/plugins
    ports:
      - "${NEO4J_BROWSER_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/browser/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: kos-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-true}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      ENABLE_MODULES: ${WEAVIATE_ENABLE_MODULES:-}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
    volumes:
      - kos-weaviate-data:/var/lib/weaviate
    ports:
      - "${WEAVIATE_PORT:-8080}:8080"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2023-11-15T20-43-25Z
    container_name: kos-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - kos-minio-data:/data
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - kos-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Monitoring and Observability
  # ============================================================================
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: kos-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - kos-prometheus-data:/prometheus
      - ../../config/prometheus:/etc/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: kos-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - kos-grafana-data:/var/lib/grafana
      - ../../config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor Container Monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: kos-cadvisor
    privileged: true
    ports:
      - "${CADVISOR_PORT:-8081}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - kos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Load Balancer and Reverse Proxy
  # ============================================================================
  
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kos-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ../../config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../../config/nginx/conf.d:/etc/nginx/conf.d
      - ../../config/ssl:/etc/nginx/ssl
    networks:
      - kos-network
    depends_on:
      - kos-app
      - openwebui
      - gitea
      - nextcloud
      - admin-panel
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  # Database Volumes
  kos-postgres-data:
  kos-redis-data:
  kos-elasticsearch-data:
  kos-neo4j-data:
  kos-neo4j-logs:
  kos-neo4j-import:
  kos-neo4j-plugins:
  kos-weaviate-data:
  
  # Storage Volumes
  kos-minio-data:
  
  # Monitoring Volumes
  kos-grafana-data:
  kos-prometheus-data:

networks:
  kos-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${KOS_NETWORK_SUBNET} 