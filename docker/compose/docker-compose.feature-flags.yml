name: kos
services:
  kos-app:
    build:
      context: ../..
      dockerfile: docker/dockerfiles/Dockerfile.unified
    container_name: kos-unified-app
    environment:
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - API_HOST=${API_HOST:-0.0.0.0}
    - API_PORT=${API_PORT:-8000}
    - WEB_PORT=${WEB_PORT:-3000}
    - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    - POSTGRES_DB=${POSTGRES_DB:-aiq_knowledge}
    - POSTGRES_USER=${POSTGRES_USER:-aiq_user}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiq_password}
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    - ELASTICSEARCH_HOST=elasticsearch
    - ELASTICSEARCH_PORT=9200
    - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
    - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
    - NEO4J_HOST=neo4j
    - NEO4J_PORT=7687
    - NEO4J_USER=${NEO4J_USER:-neo4j}
    - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
    - WEAVIATE_HOST=weaviate
    - WEAVIATE_PORT=8080
    - MINIO_HOST=minio
    - MINIO_PORT=9000
    - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    - PROMETHEUS_HOST=prometheus
    - PROMETHEUS_PORT=9090
    - GRAFANA_HOST=grafana
    - GRAFANA_PORT=3000
    - ENABLE_RAG=${ENABLE_RAG:-true}
    - ENABLE_GRAPH_DB=${ENABLE_GRAPH_DB:-true}
    - ENABLE_VECTOR_DB=${ENABLE_VECTOR_DB:-true}
    - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
    ports:
    - ${API_PORT:-8000}:8000
    - ${WEB_PORT:-3000}:3000
    - ${CADVISOR_PORT:-8081}:8080
    volumes:
    - ../../src:/app/src
    - ../../config:/app/config
    - ../../public:/app/public
    - ../../logs:/app/logs
    - ../../data:/app/data
    networks:
    - kos-network
    depends_on:
    - postgres
    - redis
    - elasticsearch
    - neo4j
    - weaviate
    - minio
    - prometheus
    - grafana
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 10s
      retries: 3
    command:
    - ./scripts/start-unified.sh
  postgres:
    image: postgres:15-alpine
    container_name: kos-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aiq_knowledge}
      POSTGRES_USER: ${POSTGRES_USER:-aiq_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiq_password}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    volumes:
    - kos-postgres-data:/var/lib/postgresql/data
    - ../../init-scripts:/docker-entrypoint-initdb.d
    ports:
    - ${POSTGRES_PORT:-5432}:5432
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-aiq_user} -d ${POSTGRES_DB:-aiq_knowledge}
      interval: 30s
      timeout: 10s
      retries: 3
  redis:
    image: redis:7-alpine
    container_name: kos-redis
    command: redis-server --appendonly yes
    volumes:
    - kos-redis-data:/data
    ports:
    - ${REDIS_PORT:-6379}:6379
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 30s
      timeout: 10s
      retries: 3
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kos-elasticsearch
    environment:
    - discovery.type=single-node
    - xpack.security.enabled=false
    - ES_JAVA_OPTS=-Xms256m -Xmx512m
    - ELASTIC_PASSWORD=elastic
    volumes:
    - kos-elasticsearch-data:/usr/share/elasticsearch/data
    ports:
    - ${ELASTICSEARCH_PORT:-9200}:9200
    - ${ELASTICSEARCH_CLUSTER_PORT:-9300}:9300
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:9200/_cluster/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
  neo4j:
    image: neo4j:5.15.0
    container_name: kos-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: ${NEO4J_PLUGINS:-apoc,graph-data-science}
      NEO4J_dbms_security_procedures_unrestricted: ${NEO4J_PROCEDURES_UNRESTRICTED:-gds.*,apoc.*}
      NEO4J_dbms_memory_heap_initial__size: ${NEO4J_HEAP_INITIAL_SIZE:-512m}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_HEAP_MAX_SIZE:-1G}
      NEO4J_dbms_memory_pagecache_size: ${NEO4J_PAGECACHE_SIZE:-512m}
    volumes:
    - kos-neo4j-data:/data
    - kos-neo4j-logs:/logs
    - kos-neo4j-import:/var/lib/neo4j/import
    - kos-neo4j-plugins:/plugins
    ports:
    - ${NEO4J_BROWSER_PORT:-7474}:7474
    - ${NEO4J_BOLT_PORT:-7687}:7687
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:7474/browser/ || exit
        1
      interval: 30s
      timeout: 10s
      retries: 3
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: kos-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-true}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      ENABLE_MODULES: ${WEAVIATE_ENABLE_MODULES:-}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
    volumes:
    - kos-weaviate-data:/var/lib/weaviate
    ports:
    - ${WEAVIATE_PORT:-8080}:8080
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8080/v1/.well-known/ready
      interval: 30s
      timeout: 10s
      retries: 3
  minio:
    image: minio/minio:RELEASE.2023-11-15T20-43-25Z
    container_name: kos-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
    - kos-minio-data:/data
    ports:
    - ${MINIO_API_PORT:-9000}:9000
    - ${MINIO_CONSOLE_PORT:-9001}:9001
    networks:
    - kos-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9000/minio/health/live
      interval: 30s
      timeout: 10s
      retries: 3
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: kos-prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=200h
    - --web.enable-lifecycle
    volumes:
    - kos-prometheus-data:/prometheus
    - ../../config/prometheus:/etc/prometheus
    ports:
    - ${PROMETHEUS_PORT:-9090}:9090
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit
        1
      interval: 30s
      timeout: 10s
      retries: 3
  grafana:
    image: grafana/grafana:10.2.0
    container_name: kos-grafana
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
    - kos-grafana-data:/var/lib/grafana
    - ../../config/grafana/provisioning:/etc/grafana/provisioning
    ports:
    - ${GRAFANA_PORT:-3001}:3000
    networks:
    - kos-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
volumes:
  kos-postgres-data: null
  kos-redis-data: null
  kos-elasticsearch-data: null
  kos-neo4j-data: null
  kos-neo4j-logs: null
  kos-neo4j-import: null
  kos-neo4j-plugins: null
  kos-weaviate-data: null
  kos-minio-data: null
  kos-grafana-data: null
  kos-prometheus-data: null
networks:
  kos-network:
    driver: bridge
    ipam:
      config:
      - subnet: 172.20.0.0/16
