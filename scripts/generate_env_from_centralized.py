#!/usr/bin/env python3
"""
kOS Environment Generator from Centralized Configuration
Generates all environment variables from centralized_ports.json
"""

import json
import os
import sys
from pathlib import Path

def load_centralized_config():
    """Load the centralized ports configuration"""
    config_path = Path(__file__).parent.parent / "config" / "centralized_ports.json"
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: {config_path} not found")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error parsing {config_path}: {e}")
        sys.exit(1)

def generate_env_variables(config):
    """Generate environment variables from centralized config"""
    env_vars = {}
    
    # Add metadata
    env_vars.update({
        "KOS_CONFIG_VERSION": config["metadata"]["version"],
        "KOS_CONFIG_LAST_UPDATED": config["metadata"]["last_updated"]
    })
    
    # Add network config
    env_vars.update({
        "KOS_DEFAULT_HOST": config["network_config"]["default_host"],
        "KOS_CONTAINER_NETWORK": config["network_config"]["container_network"],
        "KOS_INTERNAL_DOMAIN": config["network_config"]["internal_domain"]
    })
    
    # Generate service environment variables
    for category, services in config["services"].items():
        for service_name, service_config in services.items():
            # Convert service name to environment variable prefix
            prefix = service_name.upper().replace("-", "_")
            
            # Basic service configuration
            env_vars.update({
                f"{prefix}_EXTERNAL_PORT": str(service_config["external_port"]),
                f"{prefix}_INTERNAL_PORT": str(service_config["internal_port"]),
                f"{prefix}_HOST": service_config["host"],
                f"{prefix}_CONTAINER_HOST": service_config["container_host"],
                f"{prefix}_PROTOCOL": service_config["protocol"],
                f"{prefix}_DESCRIPTION": service_config["description"]
            })
            
            # Handle additional ports (SSH, HTTP, console, etc.)
            for key, value in service_config.items():
                if key.endswith("_port") and key != "external_port" and key != "internal_port":
                    env_key = f"{prefix}_{key.upper()}"
                    env_vars[env_key] = str(value)
                elif key.endswith("_internal_port") and key != "internal_port":
                    env_key = f"{prefix}_{key.upper()}"
                    env_vars[env_key] = str(value)
            
            # Handle database-specific configurations
            if "default_db" in service_config:
                env_vars[f"{prefix}_DB"] = service_config["default_db"]
            if "default_user" in service_config:
                env_vars[f"{prefix}_USER"] = service_config["default_user"]
            if "default_password" in service_config:
                env_vars[f"{prefix}_PASSWORD"] = service_config["default_password"]
            if "default_db" in service_config:
                env_vars[f"{prefix}_DB"] = service_config["default_db"]
    
    # Generate Docker image variables
    for service_name, image in config["docker_images"].items():
        prefix = service_name.upper().replace("-", "_")
        env_vars[f"{prefix}_IMAGE"] = image
    
    # Add environment variables from config
    for category, vars_dict in config["environment_variables"].items():
        for key, value in vars_dict.items():
            env_vars[key] = value
    
    return env_vars

def generate_service_enable_flags(config):
    """Generate service enable flags"""
    enable_flags = {}
    
    for category, services in config["services"].items():
        for service_name in services.keys():
            prefix = service_name.upper().replace("-", "_")
            enable_flags[f"KOS_ENABLE_{prefix}"] = "true"
    
    return enable_flags

def write_env_file(env_vars, output_path, template_path=None):
    """Write environment variables to file"""
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w') as f:
        f.write("# =============================================================================\n")
        f.write("# kOS Environment Variables - Auto-generated from centralized_ports.json\n")
        f.write("# =============================================================================\n")
        f.write("# DO NOT EDIT THIS FILE DIRECTLY - Edit config/centralized_ports.json instead\n")
        f.write("# Generated on: {}\n".format(os.popen('date').read().strip()))
        f.write("# =============================================================================\n\n")
        
        # Group variables by category
        categories = {
            "NETWORK": [k for k in env_vars.keys() if k.startswith("KOS_DEFAULT_") or k.startswith("KOS_CONTAINER_") or k.startswith("KOS_INTERNAL_")],
            "CORE_SERVICES": [k for k in env_vars.keys() if "KOS_BACKEND" in k or "KOS_FRONTEND" in k or "KOS_NGINX" in k],
            "DATABASES": [k for k in env_vars.keys() if "KOS_POSTGRES" in k or "KOS_REDIS" in k or "KOS_NEO4J" in k],
            "DEVELOPMENT": [k for k in env_vars.keys() if any(x in k for x in ["KOS_GITEA", "KOS_OPENWEBUI", "KOS_OLLAMA", "KOS_SUPABASE", "KOS_BROWSERUSE", "KOS_CONTEXT7", "KOS_CODIUM"])],
            "MONITORING": [k for k in env_vars.keys() if "KOS_PROMETHEUS" in k or "KOS_GRAFANA" in k],
            "STORAGE": [k for k in env_vars.keys() if "KOS_ELASTICSEARCH" in k or "KOS_WEAVIATE" in k or "KOS_MINIO" in k],
            "SECURITY": [k for k in env_vars.keys() if "KOS_VAULT" in k],
            "MANAGERS": [k for k in env_vars.keys() if "KOS_PROMPT_MANAGER" in k or "KOS_ARTIFACT_MANAGER" in k],
            "DOCKER_IMAGES": [k for k in env_vars.keys() if k.endswith("_IMAGE")],
            "ENVIRONMENT": [k for k in env_vars.keys() if k.startswith("KOS_ENVIRONMENT") or k.startswith("KOS_DEBUG") or k.startswith("KOS_LOG_")],
            "SECURITY_CONFIG": [k for k in env_vars.keys() if k.startswith("KOS_JWT_") or k.startswith("KOS_BCRYPT_")],
            "CORS": [k for k in env_vars.keys() if k.startswith("KOS_CORS_")],
            "CONFIG": [k for k in env_vars.keys() if k.startswith("KOS_CONFIG_")]
        }
        
        for category, variables in categories.items():
            if variables:
                f.write(f"\n# =============================================================================\n")
                f.write(f"# {category}\n")
                f.write(f"# =============================================================================\n")
                for var in sorted(variables):
                    f.write(f"{var}={env_vars[var]}\n")

def main():
    """Main function"""
    print("Loading centralized configuration...")
    config = load_centralized_config()
    
    print("Generating environment variables...")
    env_vars = generate_env_variables(config)
    enable_flags = generate_service_enable_flags(config)
    
    # Merge enable flags
    env_vars.update(enable_flags)
    
    # Write to env directory
    env_dir = Path(__file__).parent.parent / "env"
    env_dir.mkdir(exist_ok=True)
    
    # Generate local.env.example
    local_env_path = env_dir / "local.env.example"
    write_env_file(env_vars, local_env_path)
    print(f"Generated: {local_env_path}")
    
    # Generate settings.env.example with enable flags
    settings_env_path = env_dir / "settings.env.example"
    write_env_file(enable_flags, settings_env_path)
    print(f"Generated: {settings_env_path}")
    
    # Create a summary of all ports
    print("\n" + "="*80)
    print("PORT SUMMARY")
    print("="*80)
    for category, services in config["services"].items():
        print(f"\n{category.upper()}:")
        for service_name, service_config in services.items():
            print(f"  {service_name}: {service_config['external_port']} -> {service_config['internal_port']}")
    
    print(f"\nTotal services: {sum(len(services) for services in config['services'].values())}")
    print(f"Total environment variables generated: {len(env_vars)}")
    print("\nConfiguration files updated successfully!")

if __name__ == "__main__":
    main() 