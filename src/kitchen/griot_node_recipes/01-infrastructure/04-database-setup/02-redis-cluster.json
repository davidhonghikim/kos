{
  "recipe_metadata": {
    "recipe_id": "03-DATABASE-REDIS-CLUSTER-002",
    "title": "Enterprise Redis High-Availability Cluster",
    "version": "1.0.0",
    "created_by": "Gemini",
    "creation_date": "2025-07-05T00:00:00Z",
    "last_updated": "2025-07-05T00:00:00Z",
    "estimated_tokens": 12000,
    "estimated_execution_time": "4-6 hours",
    "difficulty_level": "expert",
    "total_tasks": 1,
    "agent_autonomy_level": "98%",
    "success_rate_target": "99%",
    "compliance_standards": [
      "GDPR",
      "PCI DSS"
    ],
    "architecture_tier": "enterprise-cache"
  },
  "recipe_overview": {
    "description": "Deploy and configure a production-ready Redis high-availability cluster using Redis Sentinel for automated failover and Redis Cluster for sharding. This recipe provides a robust in-memory data store for caching, session management, and real-time messaging. The implementation includes replication, security hardening, performance tuning, and comprehensive monitoring.",
    "technology_stack": {
      "cache_database": "Redis 7+",
      "high_availability": "Redis Sentinel",
      "clustering": "Redis Cluster",
      "monitoring": "Prometheus, Grafana"
    },
    "deliverables": [
      "High-availability Redis cluster with Sentinel for automated failover",
      "Sharded Redis Cluster for horizontal scaling",
      "Secure configuration with password authentication and TLS",
      "Comprehensive monitoring dashboards and alerting for Redis"
    ]
  },
  "tasks": [
    {
      "id": "03-database-redis-cluster-002",
      "title": "Enterprise Redis High-Availability Cluster Implementation",
      "description": "Deploy and configure a production-ready Redis high-availability cluster using Redis Sentinel for automated failover and Redis Cluster for sharding. This recipe provides a robust in-memory data store for caching, session management, and real-time messaging. The implementation includes replication, security hardening, performance tuning, and comprehensive monitoring.",
      "category": "infrastructure",
      "estimated_tokens": 12000,
      "estimated_duration": "4-6 hours",
      "difficulty_level": "expert",
      "prerequisites": {
        "knowledge_required": [
          "Redis administration",
          "Redis Sentinel",
          "Redis Cluster",
          "Caching strategies"
        ],
        "tools_required": [
          "Redis 7+",
          "Redis CLI",
          "Docker"
        ],
        "environment_setup": [
          "Database network configured",
          "Sufficient memory resources"
        ]
      },
      "inputs": {
        "files_to_read": [
          "docker-compose.redis.yml",
          "config/redis/redis.conf",
          "config/redis/sentinel.conf"
        ],
        "config_dependencies": [
          "Network configuration"
        ],
        "environment_variables": [
          "REDIS_PASSWORD"
        ],
        "external_services": [
          "Monitoring system"
        ]
      },
      "outputs": {
        "files_created": [
          "config/redis/redis.conf - Redis server configuration",
          "config/redis/sentinel.conf - Redis Sentinel configuration",
          "scripts/redis/cluster-setup.sh - Automated cluster deployment",
          "monitoring/redis/dashboards.json - Grafana dashboards"
        ],
        "files_modified": [
          "docker-compose.redis.yml - Redis cluster services",
          "config/prometheus/redis-targets.yaml - Monitoring targets"
        ]
      },
      "dependencies": {
        "required_tasks": [
          "01-infra-verification-001"
        ],
        "optional_tasks": [
          "monitoring-setup"
        ]
      },
      "detailed_instructions": {
        "overview": "This task implements a Redis high-availability cluster for caching and session management. It uses Redis Sentinel to monitor the master and perform automatic failover, and Redis Cluster to shard data across multiple nodes, ensuring both high availability and scalability.",
        "step_by_step_guide": [
          {
            "step": 1,
            "title": "Redis Configuration",
            "description": "Configure Redis for cluster mode and high availability.",
            "commands": [
              "mkdir -p config/redis",
              "cat > config/redis/redis.conf << 'EOF'",
              "cluster-enabled yes",
              "cluster-config-file nodes.conf",
              "cluster-node-timeout 5000",
              "appendonly yes",
              "protected-mode no",
              "requirepass ${REDIS_PASSWORD}",
              "masterauth ${REDIS_PASSWORD}",
              "EOF"
            ],
            "expected_output": "Redis configuration file created.",
            "troubleshooting": "Ensure password variables are set."
          },
          {
            "step": 2,
            "title": "Redis Sentinel Configuration",
            "description": "Configure Redis Sentinel to monitor the Redis master.",
            "commands": [
              "cat > config/redis/sentinel.conf << 'EOF'",
              "port 26379",
              "sentinel monitor mymaster redis-master 6379 2",
              "sentinel down-after-milliseconds mymaster 5000",
              "sentinel parallel-syncs mymaster 1",
              "sentinel failover-timeout mymaster 10000",
              "sentinel auth-pass mymaster ${REDIS_PASSWORD}",
              "EOF"
            ],
            "expected_output": "Redis Sentinel configuration file created.",
            "troubleshooting": "Ensure the master name 'mymaster' and 'redis-master' hostname are correct for your environment."
          },
          {
            "step": 3,
            "title": "Deploy Redis Cluster",
            "description": "Deploy the Redis nodes and Sentinels using Docker Compose.",
            "commands": [
              "# Create docker-compose.redis.yml if it does not exist",
              "touch docker-compose.redis.yml",
              "docker-compose -f docker-compose.redis.yml up -d --scale redis-node=6",
              "sleep 10"
            ],
            "expected_output": "6 Redis nodes and 3 Sentinel containers running.",
            "troubleshooting": "Check Docker logs for container startup issues."
          },
          {
            "step": 4,
            "title": "Initialize Redis Cluster",
            "description": "Use redis-cli to initialize the cluster and create shards.",
            "commands": [
              "CLUSTER_HOSTS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker-compose -f docker-compose.redis.yml ps -q redis-node) | sed 's/ /:6379 /g' | tr -d '\\n')",
              "echo 'yes' | docker run --rm -i redis:7-alpine redis-cli -a ${REDIS_PASSWORD} --cluster create ${CLUSTER_HOSTS}:6379 --cluster-replicas 1"
            ],
            "expected_output": "Redis cluster created successfully with 3 masters and 3 slaves.",
            "troubleshooting": "Ensure network connectivity between nodes and that `redis-cli` can reach all nodes."
          }
        ]
      },
      "acceptance_criteria": {
        "functional_requirements": [
          "Redis cluster is operational with automatic failover.",
          "Data is correctly sharded across master nodes.",
          "Applications can connect to the cluster via Sentinel.",
          "Password authentication is enforced."
        ],
        "performance_requirements": [
          "Sub-millisecond latency for GET/SET operations.",
          "Cluster can handle 50k+ operations per second.",
          "Failover completes in under 10 seconds."
        ]
      }
    }
  ],
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default step - needs implementation",
      "command": "echo 'Step needs implementation'",
      "expected_output": "Step completed",
      "error_handling": "Continue on error"
    }
  ],
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  },
  "metadata": {
    "title": "02-Redis-Cluster",
    "version": "1.0.0",
    "creation_timestamp": "2025-07-07T05:00:00Z",
    "last_updated": "2025-07-07T05:00:00Z"
  }
}