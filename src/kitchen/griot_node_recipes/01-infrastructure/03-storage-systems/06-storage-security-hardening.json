{
  "metadata": {
    "sub_recipe_id": "02-06-storage-security-hardening",
    "title": "Storage Security Hardening - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T23:45:00Z",
    "purpose": "Exact step-by-step storage security hardening implementation with zero ambiguity",
    "total_tasks": 6,
    "estimated_duration": "3-4 hours",
    "complexity": "Advanced",
    "dependencies": [
      "02-01-minio-enterprise-cluster",
      "02-02-aws-s3-integration"
    ],
    "components": [
      "Encryption",
      "Access Control",
      "Audit Logging",
      "Security Policies"
    ],
    "creation_timestamp": "2025-07-07T05:00:00Z"
  },
  "prerequisites": {
    "completed_tasks": [
      "02-01-02: SSL certificates generated",
      "02-01-05: Storage buckets created",
      "02-02-02: S3 buckets created"
    ],
    "system_requirements": {
      "cpu": "Minimum 4 cores for security operations",
      "ram": "Minimum 8GB for security operations",
      "storage": "Minimum 50GB for security logs",
      "network": "Secure network for security operations"
    }
  },
  "task_01_encryption_setup": {
    "task_id": "02-06-01",
    "title": "Storage Encryption Setup",
    "description": "Setup comprehensive encryption for all storage systems",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-01-01",
        "title": "Generate encryption keys",
        "description": "Generate encryption keys for storage systems",
        "commands": [
          "sudo mkdir -p /opt/ai-q/storage/security/keys",
          "openssl rand -hex 32 > /opt/ai-q/storage/security/keys/storage-master.key",
          "openssl rand -hex 32 > /opt/ai-q/storage/security/keys/minio-encryption.key",
          "openssl rand -hex 32 > /opt/ai-q/storage/security/keys/s3-encryption.key",
          "chmod 600 /opt/ai-q/storage/security/keys/*.key"
        ],
        "verification": "Check encryption keys generated",
        "expected_output": "Encryption keys generated with proper permissions"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/storage/security/keys/",
      "wc -c /opt/ai-q/storage/security/keys/*.key"
    ],
    "expected_outputs": {
      "encryption_keys": "Encryption keys generated with proper permissions"
    }
  },
  "task_02_access_control": {
    "task_id": "02-06-02",
    "title": "Access Control Implementation",
    "description": "Implement comprehensive access control for storage systems",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-02-01",
        "title": "Create access control policies",
        "description": "Create access control policies for storage systems",
        "config_file": "/opt/ai-q/storage/security/access-policies.json",
        "config_content": {
          "access_control_policies": {
            "minio_policies": {
              "admin_policy": {
                "effect": "Allow",
                "actions": [
                  "s3:*"
                ],
                "resources": [
                  "*"
                ]
              },
              "readonly_policy": {
                "effect": "Allow",
                "actions": [
                  "s3:GetObject",
                  "s3:ListBucket"
                ],
                "resources": [
                  "*"
                ]
              },
              "write_policy": {
                "effect": "Allow",
                "actions": [
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:DeleteObject"
                ],
                "resources": [
                  "*"
                ]
              }
            },
            "s3_policies": {
              "encryption_required": {
                "effect": "Deny",
                "actions": [
                  "s3:PutObject"
                ],
                "resources": [
                  "*"
                ],
                "conditions": {
                  "StringNotEquals": {
                    "s3:x-amz-server-side-encryption": "AES256"
                  }
                }
              }
            }
          }
        },
        "commands": [
          "sudo mkdir -p /opt/ai-q/storage/security",
          "sudo tee /opt/ai-q/storage/security/access-policies.json << 'EOF'\\n{\\n  \\\"access_control_policies\\\": {\\n    \\\"minio_policies\\\": {\\n      \\\"admin_policy\\\": {\\n        \\\"effect\\\": \\\"Allow\\\",\\n        \\\"actions\\\": [\\\"s3:*\\\"],\\n        \\\"resources\\\": [\\\"*\\\"]\\n      },\\n      \\\"readonly_policy\\\": {\\n        \\\"effect\\\": \\\"Allow\\\",\\n        \\\"actions\\\": [\\\"s3:GetObject\\\", \\\"s3:ListBucket\\\"],\\n        \\\"resources\\\": [\\\"*\\\"]\\n      },\\n      \\\"write_policy\\\": {\\n        \\\"effect\\\": \\\"Allow\\\",\\n        \\\"actions\\\": [\\\"s3:PutObject\\\", \\\"s3:GetObject\\\", \\\"s3:DeleteObject\\\"],\\n        \\\"resources\\\": [\\\"*\\\"]\\n      }\\n    },\\n    \\\"s3_policies\\\": {\\n      \\\"encryption_required\\\": {\\n        \\\"effect\\\": \\\"Deny\\\",\\n        \\\"actions\\\": [\\\"s3:PutObject\\\"],\\n        \\\"resources\\\": [\\\"*\\\"],\\n        \\\"conditions\\\": {\\n          \\\"StringNotEquals\\\": {\\n            \\\"s3:x-amz-server-side-encryption\\\": \\\"AES256\\\"\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\nEOF"
        ],
        "verification": "Check access control policies created",
        "expected_output": "Access control policies created successfully"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/security/access-policies.json"
    ],
    "expected_outputs": {
      "access_policies": "Access control policies created successfully"
    }
  },
  "task_03_audit_logging": {
    "task_id": "02-06-03",
    "title": "Audit Logging Setup",
    "description": "Setup comprehensive audit logging for storage systems",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-03-01",
        "title": "Create audit logging configuration",
        "description": "Create audit logging configuration for storage systems",
        "config_file": "/opt/ai-q/storage/security/audit-config.json",
        "config_content": {
          "audit_logging": {
            "minio_audit": {
              "enabled": true,
              "log_file": "/var/log/minio-audit.log",
              "log_level": "info",
              "retention_days": 365
            },
            "s3_audit": {
              "enabled": true,
              "log_file": "/var/log/s3-audit.log",
              "log_level": "info",
              "retention_days": 365
            },
            "access_logs": {
              "enabled": true,
              "log_file": "/var/log/storage-access.log",
              "log_format": "combined",
              "retention_days": 90
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/storage/security/audit-config.json << 'EOF'\\n{\\n  \\\"audit_logging\\\": {\\n    \\\"minio_audit\\\": {\\n      \\\"enabled\\\": true,\\n      \\\"log_file\\\": \\\"/var/log/minio-audit.log\\\",\\n      \\\"log_level\\\": \\\"info\\\",\\n      \\\"retention_days\\\": 365\\n    },\\n    \\\"s3_audit\\\": {\\n      \\\"enabled\\\": true,\\n      \\\"log_file\\\": \\\"/var/log/s3-audit.log\\\",\\n      \\\"log_level\\\": \\\"info\\\",\\n      \\\"retention_days\\\": 365\\n    },\\n    \\\"access_logs\\\": {\\n      \\\"enabled\\\": true,\\n      \\\"log_file\\\": \\\"/var/log/storage-access.log\\\",\\n      \\\"log_format\\\": \\\"combined\\\",\\n      \\\"retention_days\\\": 90\\n    }\\n  }\\n}\\nEOF",
          "sudo touch /var/log/minio-audit.log /var/log/s3-audit.log /var/log/storage-access.log",
          "sudo chmod 644 /var/log/minio-audit.log /var/log/s3-audit.log /var/log/storage-access.log"
        ],
        "verification": "Check audit logging configuration created",
        "expected_output": "Audit logging configuration created successfully"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/security/audit-config.json",
      "ls -la /var/log/*audit*.log"
    ],
    "expected_outputs": {
      "audit_config": "Audit logging configuration created successfully"
    }
  },
  "task_04_security_policies": {
    "task_id": "02-06-04",
    "title": "Security Policies Implementation",
    "description": "Implement comprehensive security policies",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-04-01",
        "title": "Create security policies",
        "description": "Create security policies for storage systems",
        "config_file": "/opt/ai-q/storage/security/security-policies.json",
        "config_content": {
          "security_policies": {
            "password_policy": {
              "min_length": 12,
              "require_uppercase": true,
              "require_lowercase": true,
              "require_numbers": true,
              "require_special_chars": true,
              "max_age_days": 90
            },
            "session_policy": {
              "max_session_duration": 3600,
              "idle_timeout": 900,
              "require_mfa": true
            },
            "network_policy": {
              "allowed_ips": [
                "10.0.0.0/8",
                "172.16.0.0/12",
                "192.168.0.0/16"
              ],
              "blocked_ips": [],
              "rate_limit": 1000
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/storage/security/security-policies.json << 'EOF'\\n{\\n  \\\"security_policies\\\": {\\n    \\\"password_policy\\\": {\\n      \\\"min_length\\\": 12,\\n      \\\"require_uppercase\\\": true,\\n      \\\"require_lowercase\\\": true,\\n      \\\"require_numbers\\\": true,\\n      \\\"require_special_chars\\\": true,\\n      \\\"max_age_days\\\": 90\\n    },\\n    \\\"session_policy\\\": {\\n      \\\"max_session_duration\\\": 3600,\\n      \\\"idle_timeout\\\": 900,\\n      \\\"require_mfa\\\": true\\n    },\\n    \\\"network_policy\\\": {\\n      \\\"allowed_ips\\\": [\\\"10.0.0.0/8\\\", \\\"172.16.0.0/12\\\", \\\"192.168.0.0/16\\\"],\\n      \\\"blocked_ips\\\": [],\\n      \\\"rate_limit\\\": 1000\\n    }\\n  }\\n}\\nEOF"
        ],
        "verification": "Check security policies created",
        "expected_output": "Security policies created successfully"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/security/security-policies.json"
    ],
    "expected_outputs": {
      "security_policies": "Security policies created successfully"
    }
  },
  "task_05_vulnerability_scanning": {
    "task_id": "02-06-05",
    "title": "Vulnerability Scanning Setup",
    "description": "Setup vulnerability scanning for storage systems",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-05-01",
        "title": "Create vulnerability scanning script",
        "description": "Create script for vulnerability scanning",
        "config_file": "/opt/ai-q/storage/security/scan-vulnerabilities.sh",
        "config_content": "#!/bin/bash\\n\\n# Storage Vulnerability Scanning Script\\n\\nLOG_FILE=\"/var/log/vulnerability-scan.log\"\\nSCAN_RESULTS=\"/opt/ai-q/storage/security/scan-results.json\"\\n\\nlog_message() {\\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" >> \"$LOG_FILE\"\\n}\\n\\n# Scan MinIO for vulnerabilities\\nscan_minio() {\\n    log_message \"Starting MinIO vulnerability scan...\"\\n    \\n    # Check SSL/TLS configuration\\n    openssl s_client -connect localhost:9000 -servername minio.ai-q.local < /dev/null 2>/dev/null | grep -E \"(TLS|SSL)\" > /tmp/minio-ssl-check.txt\\n    \\n    # Check for open ports\\n    nmap -p 9000,9001 localhost > /tmp/minio-port-scan.txt\\n    \\n    log_message \"MinIO vulnerability scan completed\"\\n}\\n\\n# Scan S3 for vulnerabilities\\nscan_s3() {\\n    log_message \"Starting S3 vulnerability scan...\"\\n    \\n    # Check bucket permissions\\n    aws s3api get-bucket-acl --bucket ai-q-documents-$(date +%Y%m%d) > /tmp/s3-permissions.txt 2>/dev/null\\n    \\n    # Check encryption status\\n    aws s3api get-bucket-encryption --bucket ai-q-documents-$(date +%Y%m%d) > /tmp/s3-encryption.txt 2>/dev/null\\n    \\n    log_message \"S3 vulnerability scan completed\"\\n}\\n\\n# Generate scan report\\ngenerate_report() {\\n    log_message \"Generating vulnerability scan report...\"\\n    \\n    cat > \"$SCAN_RESULTS\" << EOF\\n{\\n  \"timestamp\": \"$(date -Iseconds)\",\\n  \"scan_results\": {\\n    \"minio_ssl_check\": \"$(cat /tmp/minio-ssl-check.txt | wc -l)\",\\n    \"minio_port_scan\": \"$(cat /tmp/minio-port-scan.txt | wc -l)\",\\n    \"s3_permissions\": \"$(cat /tmp/s3-permissions.txt | wc -l)\",\\n    \"s3_encryption\": \"$(cat /tmp/s3-encryption.txt | wc -l)\"\\n  }\\n}\\nEOF\\n    \\n    log_message \"Vulnerability scan report generated\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \"Starting vulnerability scanning process\"\\n    scan_minio\\n    scan_s3\\n    generate_report\\n    log_message \"Vulnerability scanning process completed\"\\n}\\n\\nmain \"$@\"",
        "commands": [
          "sudo tee /opt/ai-q/storage/security/scan-vulnerabilities.sh << 'EOF'\\n#!/bin/bash\\n\\n# Storage Vulnerability Scanning Script\\n\\nLOG_FILE=\\\"/var/log/vulnerability-scan.log\\\"\\nSCAN_RESULTS=\\\"/opt/ai-q/storage/security/scan-results.json\\\"\\n\\nlog_message() {\\n    echo \\\"$(date '+%Y-%m-%d %H:%M:%S') - $1\\\" >> \\\"$LOG_FILE\\\"\\n}\\n\\n# Scan MinIO for vulnerabilities\\nscan_minio() {\\n    log_message \\\"Starting MinIO vulnerability scan...\\\"\\n    \\n    # Check SSL/TLS configuration\\n    openssl s_client -connect localhost:9000 -servername minio.ai-q.local < /dev/null 2>/dev/null | grep -E \\\"(TLS|SSL)\\\" > /tmp/minio-ssl-check.txt\\n    \\n    # Check for open ports\\n    nmap -p 9000,9001 localhost > /tmp/minio-port-scan.txt\\n    \\n    log_message \\\"MinIO vulnerability scan completed\\\"\\n}\\n\\n# Scan S3 for vulnerabilities\\nscan_s3() {\\n    log_message \\\"Starting S3 vulnerability scan...\\\"\\n    \\n    # Check bucket permissions\\n    aws s3api get-bucket-acl --bucket ai-q-documents-$(date +%Y%m%d) > /tmp/s3-permissions.txt 2>/dev/null\\n    \\n    # Check encryption status\\n    aws s3api get-bucket-encryption --bucket ai-q-documents-$(date +%Y%m%d) > /tmp/s3-encryption.txt 2>/dev/null\\n    \\n    log_message \\\"S3 vulnerability scan completed\\\"\\n}\\n\\n# Generate scan report\\ngenerate_report() {\\n    log_message \\\"Generating vulnerability scan report...\\\"\\n    \\n    cat > \\\"$SCAN_RESULTS\\\" << EOF\\n{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"scan_results\\\": {\\n    \\\"minio_ssl_check\\\": \\\"$(cat /tmp/minio-ssl-check.txt | wc -l)\\\",\\n    \\\"minio_port_scan\\\": \\\"$(cat /tmp/minio-port-scan.txt | wc -l)\\\",\\n    \\\"s3_permissions\\\": \\\"$(cat /tmp/s3-permissions.txt | wc -l)\\\",\\n    \\\"s3_encryption\\\": \\\"$(cat /tmp/s3-encryption.txt | wc -l)\\\"\\n  }\\n}\\nEOF\\n    \\n    log_message \\\"Vulnerability scan report generated\\\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \\\"Starting vulnerability scanning process\\\"\\n    scan_minio\\n    scan_s3\\n    generate_report\\n    log_message \\\"Vulnerability scanning process completed\\\"\\n}\\n\\nmain \\\"$@\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/storage/security/scan-vulnerabilities.sh"
        ],
        "verification": "Check vulnerability scanning script created",
        "expected_output": "Vulnerability scanning script created and executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/storage/security/scan-vulnerabilities.sh"
    ],
    "expected_outputs": {
      "vulnerability_script": "Vulnerability scanning script created and executable"
    }
  },
  "task_06_security_verification": {
    "task_id": "02-06-06",
    "title": "Security Hardening Verification",
    "description": "Verify storage security hardening implementation",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-06-06-01",
        "title": "Create security verification report",
        "description": "Create comprehensive security verification report",
        "config_file": "/opt/ai-q/storage/security/security-verification.json",
        "config_content": "{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"security_status\\\": {\\n    \\\"encryption_keys\\\": \\\"$(ls -la /opt/ai-q/storage/security/keys/ | wc -l)\\\",\\n    \\\"access_policies\\\": \\\"$(cat /opt/ai-q/storage/security/access-policies.json | jq '.access_control_policies | keys | length')\\\",\\n    \\\"audit_logs\\\": \\\"$(ls -la /var/log/*audit*.log | wc -l)\\\",\\n    \\\"security_policies\\\": \\\"$(cat /opt/ai-q/storage/security/security-policies.json | jq '.security_policies | keys | length')\\\",\\n    \\\"vulnerability_scan\\\": \\\"$(ls -la /opt/ai-q/storage/security/scan-vulnerabilities.sh | wc -l)\\\"\\n  }\\n}",
        "commands": [
          "sudo tee /opt/ai-q/storage/security/security-verification.json << 'EOF'\\n{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"security_status\\\": {\\n    \\\"encryption_keys\\\": \\\"$(ls -la /opt/ai-q/storage/security/keys/ | wc -l)\\\",\\n    \\\"access_policies\\\": \\\"$(cat /opt/ai-q/storage/security/access-policies.json | jq '.access_control_policies | keys | length')\\\",\\n    \\\"audit_logs\\\": \\\"$(ls -la /var/log/*audit*.log | wc -l)\\\",\\n    \\\"security_policies\\\": \\\"$(cat /opt/ai-q/storage/security/security-policies.json | jq '.security_policies | keys | length')\\\",\\n    \\\"vulnerability_scan\\\": \\\"$(ls -la /opt/ai-q/storage/security/scan-vulnerabilities.sh | wc -l)\\\"\\n  }\\n}\\nEOF"
        ],
        "verification": "Check security verification report created",
        "expected_output": "Security verification report created with complete status"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/security/security-verification.json",
      "ls -la /opt/ai-q/storage/security/"
    ],
    "expected_outputs": {
      "security_verification": "Security verification report created with complete status"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Storage Security Hardening Verification",
      "description": "Run comprehensive tests to verify storage security hardening",
      "test_commands": [
        "ls -la /opt/ai-q/storage/security/keys/",
        "cat /opt/ai-q/storage/security/access-policies.json",
        "cat /opt/ai-q/storage/security/audit-config.json",
        "ls -la /var/log/*audit*.log",
        "cat /opt/ai-q/storage/security/security-policies.json",
        "ls -la /opt/ai-q/storage/security/scan-vulnerabilities.sh",
        "cat /opt/ai-q/storage/security/security-verification.json"
      ],
      "expected_results": {
        "encryption_keys": "Encryption keys generated with proper permissions",
        "access_policies": "Access control policies created",
        "audit_config": "Audit logging configuration created",
        "audit_logs": "Audit log files created",
        "security_policies": "Security policies configured",
        "vulnerability_script": "Vulnerability scanning script created",
        "security_verification": "Security verification report generated successfully"
      }
    }
  },
  "next_steps": {
    "next_sub_recipe": "02-07-storage-backup-system",
    "prerequisites_completed": [
      "Storage encryption setup completed",
      "Access control implementation completed",
      "Audit logging setup completed",
      "Security policies implemented",
      "Vulnerability scanning setup completed",
      "Storage security hardening verification completed successfully"
    ],
    "readiness_check": "All verification commands pass successfully"
  },
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default step - needs implementation",
      "command": "echo 'Step needs implementation'",
      "expected_output": "Step completed",
      "error_handling": "Continue on error"
    }
  ],
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  }
}