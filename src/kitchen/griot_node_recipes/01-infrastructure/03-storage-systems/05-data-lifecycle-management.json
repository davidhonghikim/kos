{
  "metadata": {
    "sub_recipe_id": "02-05-data-lifecycle-management",
    "title": "Data Lifecycle Management - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-07-05T18:22:00Z",
    "purpose": "Exact step-by-step data lifecycle management implementation with zero ambiguity",
    "total_tasks": 5,
    "estimated_duration": "2-3 hours",
    "complexity": "Intermediate",
    "dependencies": [
      "02-01-minio-enterprise-cluster",
      "02-02-aws-s3-integration"
    ],
    "components": [
      "Lifecycle Policies",
      "Automated Archiving",
      "Data Retention",
      "Cost Optimization"
    ],
    "creation_timestamp": "2025-07-07T05:00:00Z"
  },
  "prerequisites": {
    "completed_tasks": [
      "02-01-05: Storage buckets created",
      "02-02-02: S3 buckets created",
      "02-02-03: Lifecycle policies configured"
    ],
    "system_requirements": {
      "cpu": "Minimum 4 cores for lifecycle operations",
      "ram": "Minimum 8GB for lifecycle operations",
      "storage": "Minimum 100GB for lifecycle data",
      "network": "High-speed network for data movement"
    }
  },
  "task_01_minio_lifecycle_policies": {
    "task_id": "02-05-01",
    "title": "MinIO Lifecycle Policies",
    "description": "Configure comprehensive lifecycle policies for MinIO storage",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-05-01-01",
        "title": "Create MinIO lifecycle configuration",
        "description": "Create lifecycle configuration for MinIO buckets",
        "config_file": "/opt/ai-q/storage/lifecycle/minio-lifecycle.json",
        "config_content": {
          "lifecycle_policies": {
            "documents": {
              "transition_days": 30,
              "expiration_days": 2555,
              "noncurrent_transition_days": 7,
              "noncurrent_expiration_days": 365
            },
            "media": {
              "transition_days": 90,
              "expiration_days": 3650,
              "noncurrent_transition_days": 30,
              "noncurrent_expiration_days": 730
            },
            "logs": {
              "transition_days": 7,
              "expiration_days": 365,
              "noncurrent_transition_days": 1,
              "noncurrent_expiration_days": 30
            },
            "backups": {
              "transition_days": 180,
              "expiration_days": 3650,
              "noncurrent_transition_days": 90,
              "noncurrent_expiration_days": 1825
            }
          }
        },
        "commands": [
          "sudo mkdir -p /opt/ai-q/storage/lifecycle",
          "sudo tee /opt/ai-q/storage/lifecycle/minio-lifecycle.json << 'EOF'\\n{\\n  \\\"lifecycle_policies\\\": {\\n    \\\"documents\\\": {\\n      \\\"transition_days\\\": 30,\\n      \\\"expiration_days\\\": 2555,\\n      \\\"noncurrent_transition_days\\\": 7,\\n      \\\"noncurrent_expiration_days\\\": 365\\n    },\\n    \\\"media\\\": {\\n      \\\"transition_days\\\": 90,\\n      \\\"expiration_days\\\": 3650,\\n      \\\"noncurrent_transition_days\\\": 30,\\n      \\\"noncurrent_expiration_days\\\": 730\\n    },\\n    \\\"logs\\\": {\\n      \\\"transition_days\\\": 7,\\n      \\\"expiration_days\\\": 365,\\n      \\\"noncurrent_transition_days\\\": 1,\\n      \\\"noncurrent_expiration_days\\\": 30\\n    },\\n    \\\"backups\\\": {\\n      \\\"transition_days\\\": 180,\\n      \\\"expiration_days\\\": 3650,\\n      \\\"noncurrent_transition_days\\\": 90,\\n      \\\"noncurrent_expiration_days\\\": 1825\\n    }\\n  }\\n}\\nEOF"
        ],
        "verification": "Check MinIO lifecycle configuration created",
        "expected_output": "MinIO lifecycle configuration created successfully"
      },
      {
        "step_id": "02-05-01-02",
        "title": "Apply MinIO lifecycle policies",
        "description": "Apply lifecycle policies to MinIO buckets",
        "commands": [
          "mc ilm add minio-cluster/ai-q-documents --expiry-days 2555",
          "mc ilm add minio-cluster/ai-q-media --expiry-days 3650",
          "mc ilm add minio-cluster/ai-q-logs --expiry-days 365",
          "mc ilm add minio-cluster/ai-q-backups --expiry-days 3650"
        ],
        "verification": "Check lifecycle policies applied",
        "expected_output": "Lifecycle policies applied to MinIO buckets"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/lifecycle/minio-lifecycle.json",
      "mc ilm ls minio-cluster/ai-q-documents"
    ],
    "expected_outputs": {
      "lifecycle_config": "MinIO lifecycle configuration created successfully",
      "policies_applied": "Lifecycle policies applied to MinIO buckets"
    }
  },
  "task_02_automated_archiving": {
    "task_id": "02-05-02",
    "title": "Automated Archiving System",
    "description": "Setup automated archiving system for data lifecycle management",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-05-02-01",
        "title": "Create archiving script",
        "description": "Create script for automated data archiving",
        "config_file": "/opt/ai-q/storage/lifecycle/archive-data.sh",
        "config_content": "#!/bin/bash\\n\\n# Automated Data Archiving Script\\n\\nLOG_FILE=\"/var/log/data-archiving.log\"\\nARCHIVE_THRESHOLD_DAYS=30\\n\\n# Function to log messages\\nlog_message() {\\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" >> \"$LOG_FILE\"\\n}\\n\\n# Archive old documents\\narchive_documents() {\\n    log_message \"Starting document archiving...\"\\n    find /data/minio/ai-q-documents -type f -mtime +$ARCHIVE_THRESHOLD_DAYS -exec mv {} /data/archive/documents/ \\;\\n    log_message \"Document archiving completed\"\\n}\\n\\n# Archive old logs\\narchive_logs() {\\n    log_message \"Starting log archiving...\"\\n    find /data/minio/ai-q-logs -type f -mtime +7 -exec mv {} /data/archive/logs/ \\;\\n    log_message \"Log archiving completed\"\\n}\\n\\n# Compress archived files\\ncompress_archives() {\\n    log_message \"Starting archive compression...\"\\n    find /data/archive -type f -name \"*.log\" -exec gzip {} \\;\\n    find /data/archive -type f -name \"*.txt\" -exec gzip {} \\;\\n    log_message \"Archive compression completed\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \"Starting automated archiving process\"\\n    archive_documents\\n    archive_logs\\n    compress_archives\\n    log_message \"Automated archiving process completed\"\\n}\\n\\nmain \"$@\"",
        "commands": [
          "sudo tee /opt/ai-q/storage/lifecycle/archive-data.sh << 'EOF'\\n#!/bin/bash\\n\\n# Automated Data Archiving Script\\n\\nLOG_FILE=\\\"/var/log/data-archiving.log\\\"\\nARCHIVE_THRESHOLD_DAYS=30\\n\\n# Function to log messages\\nlog_message() {\\n    echo \\\"$(date '+%Y-%m-%d %H:%M:%S') - $1\\\" >> \\\"$LOG_FILE\\\"\\n}\\n\\n# Archive old documents\\narchive_documents() {\\n    log_message \\\"Starting document archiving...\\\"\\n    find /data/minio/ai-q-documents -type f -mtime +$ARCHIVE_THRESHOLD_DAYS -exec mv {} /data/archive/documents/ \\;\\n    log_message \\\"Document archiving completed\\\"\\n}\\n\\n# Archive old logs\\narchive_logs() {\\n    log_message \\\"Starting log archiving...\\\"\\n    find /data/minio/ai-q-logs -type f -mtime +7 -exec mv {} /data/archive/logs/ \\;\\n    log_message \\\"Log archiving completed\\\"\\n}\\n\\n# Compress archived files\\ncompress_archives() {\\n    log_message \\\"Starting archive compression...\\\"\\n    find /data/archive -type f -name \\\"*.log\\\" -exec gzip {} \\;\\n    find /data/archive -type f -name \\\"*.txt\\\" -exec gzip {} \\;\\n    log_message \\\"Archive compression completed\\\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \\\"Starting automated archiving process\\\"\\n    archive_documents\\n    archive_logs\\n    compress_archives\\n    log_message \\\"Automated archiving process completed\\\"\\n}\\n\\nmain \\\"$@\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/storage/lifecycle/archive-data.sh",
          "sudo mkdir -p /data/archive/{documents,logs,media,backups}"
        ],
        "verification": "Check archiving script created",
        "expected_output": "Archiving script created and archive directories created"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/storage/lifecycle/archive-data.sh",
      "ls -la /data/archive/"
    ],
    "expected_outputs": {
      "archiving_script": "Archiving script created and archive directories created"
    }
  },
  "task_03_data_retention_policies": {
    "task_id": "02-05-03",
    "title": "Data Retention Policies",
    "description": "Implement comprehensive data retention policies",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-05-03-01",
        "title": "Create retention policy configuration",
        "description": "Create configuration for data retention policies",
        "config_file": "/opt/ai-q/storage/lifecycle/retention-policies.json",
        "config_content": {
          "retention_policies": {
            "documents": {
              "retention_days": 2555,
              "archive_after_days": 365,
              "delete_after_days": 2555
            },
            "media": {
              "retention_days": 3650,
              "archive_after_days": 730,
              "delete_after_days": 3650
            },
            "logs": {
              "retention_days": 365,
              "archive_after_days": 30,
              "delete_after_days": 365
            },
            "backups": {
              "retention_days": 3650,
              "archive_after_days": 1825,
              "delete_after_days": 3650
            },
            "temp_files": {
              "retention_days": 7,
              "archive_after_days": 1,
              "delete_after_days": 7
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/storage/lifecycle/retention-policies.json << 'EOF'\\n{\\n  \\\"retention_policies\\\": {\\n    \\\"documents\\\": {\\n      \\\"retention_days\\\": 2555,\\n      \\\"archive_after_days\\\": 365,\\n      \\\"delete_after_days\\\": 2555\\n    },\\n    \\\"media\\\": {\\n      \\\"retention_days\\\": 3650,\\n      \\\"archive_after_days\\\": 730,\\n      \\\"delete_after_days\\\": 3650\\n    },\\n    \\\"logs\\\": {\\n      \\\"retention_days\\\": 365,\\n      \\\"archive_after_days\\\": 30,\\n      \\\"delete_after_days\\\": 365\\n    },\\n    \\\"backups\\\": {\\n      \\\"retention_days\\\": 3650,\\n      \\\"archive_after_days\\\": 1825,\\n      \\\"delete_after_days\\\": 3650\\n    },\\n    \\\"temp_files\\\": {\\n      \\\"retention_days\\\": 7,\\n      \\\"archive_after_days\\\": 1,\\n      \\\"delete_after_days\\\": 7\\n    }\\n  }\\n}\\nEOF"
        ],
        "verification": "Check retention policy configuration created",
        "expected_output": "Retention policy configuration created successfully"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/lifecycle/retention-policies.json"
    ],
    "expected_outputs": {
      "retention_config": "Retention policy configuration created successfully"
    }
  },
  "task_04_cost_optimization": {
    "task_id": "02-05-04",
    "title": "Cost Optimization Strategies",
    "description": "Implement cost optimization strategies for storage",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-05-04-01",
        "title": "Create cost optimization script",
        "description": "Create script for storage cost optimization",
        "config_file": "/opt/ai-q/storage/lifecycle/optimize-costs.sh",
        "config_content": "#!/bin/bash\\n\\n# Storage Cost Optimization Script\\n\\nLOG_FILE=\"/var/log/cost-optimization.log\"\\n\\nlog_message() {\\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" >> \"$LOG_FILE\"\\n}\\n\\n# Optimize MinIO storage\\noptimize_minio() {\\n    log_message \"Starting MinIO cost optimization...\"\\n    \\n    # Enable compression for text files\\n    mc admin config set minio-cluster compression enable=on\\n    mc admin config set minio-cluster compression mime_types=\".txt,.log,.csv,.json,.xml,.md,.html,.css,.js\"\\n    \\n    # Set cache policies\\n    mc admin config set minio-cluster cache quota=80\\n    mc admin config set minio-cluster cache expiry=24h\\n    \\n    # Restart MinIO to apply changes\\n    mc admin service restart minio-cluster\\n    \\n    log_message \"MinIO cost optimization completed\"\\n}\\n\\n# Optimize S3 storage\\noptimize_s3() {\\n    log_message \"Starting S3 cost optimization...\"\\n    \\n    # Move old files to cheaper storage classes\\n    aws s3api put-bucket-lifecycle-configuration \\\\n        --bucket ai-q-documents-$(date +%Y%m%d) \\\\n        --lifecycle-configuration file:///opt/ai-q/storage/lifecycle/s3-cost-optimization.json\\n    \\n    log_message \"S3 cost optimization completed\"\\n}\\n\\n# Clean up temporary files\\ncleanup_temp_files() {\\n    log_message \"Starting temporary file cleanup...\"\\n    \\n    # Remove files older than 7 days from temp directories\\n    find /tmp -type f -mtime +7 -delete\\n    find /var/tmp -type f -mtime +7 -delete\\n    \\n    log_message \"Temporary file cleanup completed\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \"Starting cost optimization process\"\\n    optimize_minio\\n    optimize_s3\\n    cleanup_temp_files\\n    log_message \"Cost optimization process completed\"\\n}\\n\\nmain \"$@\"",
        "commands": [
          "sudo tee /opt/ai-q/storage/lifecycle/optimize-costs.sh << 'EOF'\\n#!/bin/bash\\n\\n# Storage Cost Optimization Script\\n\\nLOG_FILE=\\\"/var/log/cost-optimization.log\\\"\\n\\nlog_message() {\\n    echo \\\"$(date '+%Y-%m-%d %H:%M:%S') - $1\\\" >> \\\"$LOG_FILE\\\"\\n}\\n\\n# Optimize MinIO storage\\noptimize_minio() {\\n    log_message \\\"Starting MinIO cost optimization...\\\"\\n    \\n    # Enable compression for text files\\n    mc admin config set minio-cluster compression enable=on\\n    mc admin config set minio-cluster compression mime_types=\\\".txt,.log,.csv,.json,.xml,.md,.html,.css,.js\\\"\\n    \\n    # Set cache policies\\n    mc admin config set minio-cluster cache quota=80\\n    mc admin config set minio-cluster cache expiry=24h\\n    \\n    # Restart MinIO to apply changes\\n    mc admin service restart minio-cluster\\n    \\n    log_message \\\"MinIO cost optimization completed\\\"\\n}\\n\\n# Optimize S3 storage\\noptimize_s3() {\\n    log_message \\\"Starting S3 cost optimization...\\\"\\n    \\n    # Move old files to cheaper storage classes\\n    aws s3api put-bucket-lifecycle-configuration \\\\n        --bucket ai-q-documents-$(date +%Y%m%d) \\\\n        --lifecycle-configuration file:///opt/ai-q/storage/lifecycle/s3-cost-optimization.json\\n    \\n    log_message \\\"S3 cost optimization completed\\\"\\n}\\n\\n# Clean up temporary files\\ncleanup_temp_files() {\\n    log_message \\\"Starting temporary file cleanup...\\\"\\n    \\n    # Remove files older than 7 days from temp directories\\n    find /tmp -type f -mtime +7 -delete\\n    find /var/tmp -type f -mtime +7 -delete\\n    \\n    log_message \\\"Temporary file cleanup completed\\\"\\n}\\n\\n# Main execution\\nmain() {\\n    log_message \\\"Starting cost optimization process\\\"\\n    optimize_minio\\n    optimize_s3\\n    cleanup_temp_files\\n    log_message \\\"Cost optimization process completed\\\"\\n}\\n\\nmain \\\"$@\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/storage/lifecycle/optimize-costs.sh"
        ],
        "verification": "Check cost optimization script created",
        "expected_output": "Cost optimization script created and executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/storage/lifecycle/optimize-costs.sh"
    ],
    "expected_outputs": {
      "cost_optimization_script": "Cost optimization script created and executable"
    }
  },
  "task_05_lifecycle_verification": {
    "task_id": "02-05-05",
    "title": "Lifecycle Management Verification",
    "description": "Verify data lifecycle management implementation",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "02-05-05-01",
        "title": "Create verification report",
        "description": "Create comprehensive verification report for lifecycle management",
        "config_file": "/opt/ai-q/storage/lifecycle/verification-report.json",
        "config_content": "{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"lifecycle_status\\\": {\\n    \\\"minio_policies\\\": \\\"$(mc ilm ls minio-cluster/ai-q-documents | wc -l)\\\",\\n    \\\"s3_policies\\\": \\\"$(aws s3api get-bucket-lifecycle-configuration --bucket ai-q-documents-$(date +%Y%m%d) --query 'Rules | length' --output text 2>/dev/null || echo '0')\\\",\\n    \\\"archive_directories\\\": \\\"$(ls -la /data/archive/ | wc -l)\\\",\\n    \\\"retention_policies\\\": \\\"$(cat /opt/ai-q/storage/lifecycle/retention-policies.json | jq '.retention_policies | keys | length')\\\"\\n  },\\n  \\\"optimization_status\\\": {\\n    \\\"compression_enabled\\\": \\\"$(mc admin config get minio-cluster compression | grep -c 'enable=on' || echo '0')\\\",\\n    \\\"cache_configured\\\": \\\"$(mc admin config get minio-cluster cache | grep -c 'quota' || echo '0')\\\"\\n  }\\n}",
        "commands": [
          "sudo tee /opt/ai-q/storage/lifecycle/verification-report.json << 'EOF'\\n{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"lifecycle_status\\\": {\\n    \\\"minio_policies\\\": \\\"$(mc ilm ls minio-cluster/ai-q-documents | wc -l)\\\",\\n    \\\"s3_policies\\\": \\\"$(aws s3api get-bucket-lifecycle-configuration --bucket ai-q-documents-$(date +%Y%m%d) --query 'Rules | length' --output text 2>/dev/null || echo '0')\\\",\\n    \\\"archive_directories\\\": \\\"$(ls -la /data/archive/ | wc -l)\\\",\\n    \\\"retention_policies\\\": \\\"$(cat /opt/ai-q/storage/lifecycle/retention-policies.json | jq '.retention_policies | keys | length')\\\"\\n  },\\n  \\\"optimization_status\\\": {\\n    \\\"compression_enabled\\\": \\\"$(mc admin config get minio-cluster compression | grep -c 'enable=on' || echo '0')\\\",\\n    \\\"cache_configured\\\": \\\"$(mc admin config get minio-cluster cache | grep -c 'quota' || echo '0')\\\"\\n  }\\n}\\nEOF"
        ],
        "verification": "Check verification report created",
        "expected_output": "Verification report created with lifecycle management status"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/storage/lifecycle/verification-report.json",
      "ls -la /opt/ai-q/storage/lifecycle/"
    ],
    "expected_outputs": {
      "verification_report": "Verification report created with lifecycle management status"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Data Lifecycle Management Verification",
      "description": "Run comprehensive tests to verify data lifecycle management",
      "test_commands": [
        "cat /opt/ai-q/storage/lifecycle/minio-lifecycle.json",
        "mc ilm ls minio-cluster/ai-q-documents",
        "ls -la /opt/ai-q/storage/lifecycle/archive-data.sh",
        "ls -la /data/archive/",
        "cat /opt/ai-q/storage/lifecycle/retention-policies.json",
        "ls -la /opt/ai-q/storage/lifecycle/optimize-costs.sh",
        "cat /opt/ai-q/storage/lifecycle/verification-report.json"
      ],
      "expected_results": {
        "minio_lifecycle": "MinIO lifecycle configuration created",
        "minio_policies": "MinIO lifecycle policies applied",
        "archiving_script": "Archiving script created and executable",
        "archive_directories": "Archive directories created",
        "retention_policies": "Retention policies configured",
        "cost_optimization": "Cost optimization script created",
        "verification_complete": "Verification report generated successfully"
      }
    }
  },
  "next_steps": {
    "next_sub_recipe": "02-06-storage-security-hardening",
    "prerequisites_completed": [
      "MinIO lifecycle policies configured",
      "Automated archiving system setup",
      "Data retention policies implemented",
      "Cost optimization strategies configured",
      "Data lifecycle management verification completed successfully"
    ],
    "readiness_check": "All verification commands pass successfully"
  },
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default step - needs implementation",
      "command": "echo 'Step needs implementation'",
      "expected_output": "Step completed",
      "error_handling": "Continue on error"
    }
  ],
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  }
}