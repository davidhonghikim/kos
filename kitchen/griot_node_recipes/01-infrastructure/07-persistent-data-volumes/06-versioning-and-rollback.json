{
  "metadata": {
    "recipe_id": "06-versioning-and-rollback",
    "title": "Versioning & Rollback Infrastructure",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4 - Infrastructure Specialist",
    "last_updated": "2025-07-05T22:00:00Z",
    "purpose": "Implement comprehensive versioning and rollback capabilities for all system components with instant rollback functionality",
    "total_tasks": 12,
    "estimated_duration": "5 hours",
    "complexity": "Advanced",
    "dependencies": [
      "05-self-hosted-services"
    ],
    "versioning_stack": [
      "Version Control",
      "Rollback Mechanisms",
      "Snapshot Management",
      "Change Tracking",
      "Recovery Procedures"
    ],
    "creation_timestamp": "2025-07-07T05:00:00Z"
  },
  "prerequisites": {
    "completed_recipes": [
      "01-volume-structure-design",
      "02-docker-caching-system",
      "03-backup-and-restore",
      "05-self-hosted-services"
    ],
    "system_requirements": {
      "storage": "Minimum 1TB available storage for versioning",
      "ram": "Minimum 16GB RAM",
      "cpu": "Minimum 8 CPU cores",
      "network": "Local network access"
    },
    "software_requirements": [
      "Docker 24.0+",
      "Docker Compose 2.15+",
      "Git 2.40+",
      "rsync 3.2.0+",
      "jq 1.6+",
      "tar 1.34+"
    ]
  },
  "task_01_create_versioning_directory_structure": {
    "task_id": "06-01",
    "title": "Create Versioning Directory Structure",
    "description": "Create comprehensive directory structure for versioning and rollback management",
    "estimated_duration": "20 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "06-01-01",
        "title": "Create versioning directories",
        "description": "Create directory structure for versioning and rollback",
        "commands": [
          "sudo mkdir -p /opt/ai-q/versioning",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots",
          "sudo mkdir -p /opt/ai-q/versioning/rollbacks",
          "sudo mkdir -p /opt/ai-q/versioning/manifests",
          "sudo mkdir -p /opt/ai-q/versioning/changes",
          "sudo mkdir -p /opt/ai-q/versioning/logs",
          "sudo mkdir -p /opt/ai-q/versioning/temp"
        ],
        "verification": "Verify versioning directories created",
        "expected_output": "All versioning directories created successfully"
      },
      {
        "step_id": "06-01-02",
        "title": "Create service-specific versioning directories",
        "description": "Create versioning directories for each service",
        "commands": [
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/postgresql",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/redis",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/elasticsearch",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/weaviate",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/minio",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/gitea",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/nextcloud",
          "sudo mkdir -p /opt/ai-q/versioning/snapshots/configs"
        ],
        "verification": "Verify service versioning directories created",
        "expected_output": "All service versioning directories created successfully"
      },
      {
        "step_id": "06-01-03",
        "title": "Set versioning directory permissions",
        "description": "Set appropriate permissions for versioning directories",
        "commands": [
          "sudo chown -R root:root /opt/ai-q/versioning",
          "sudo chmod -R 755 /opt/ai-q/versioning",
          "sudo chmod -R 700 /opt/ai-q/versioning/snapshots",
          "sudo chmod -R 700 /opt/ai-q/versioning/rollbacks"
        ],
        "verification": "Verify versioning directory permissions set correctly",
        "expected_output": "Versioning directories have correct ownership and permissions"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/versioning/",
      "find /opt/ai-q/versioning -type d | wc -l"
    ],
    "expected_outputs": {
      "directory_count": "At least 15 versioning directories created",
      "permissions": "Correct ownership and permissions for all directories"
    }
  },
  "task_02_create_versioning_scripts": {
    "task_id": "06-02",
    "title": "Create Versioning and Rollback Scripts",
    "description": "Create comprehensive scripts for versioning and rollback operations",
    "estimated_duration": "2 hours",
    "critical": true,
    "steps": [
      {
        "step_id": "06-02-01",
        "title": "Create snapshot creation script",
        "description": "Create script to create system snapshots",
        "script_path": "/opt/ai-q/scripts/versioning-snapshot.sh",
        "script_content": "#!/bin/bash\n\n# AI-Q Versioning Snapshot Script\n# Version: 1.0.0\n# Created: 2025-01-28\n# Purpose: Create comprehensive system snapshots for versioning\n\nset -euo pipefail\n\n# Configuration\nVERSIONING_ROOT=\"/opt/ai-q/versioning\"\nSNAPSHOTS_DIR=\"$VERSIONING_ROOT/snapshots\"\nMANIFESTS_DIR=\"$VERSIONING_ROOT/manifests\"\nLOG_FILE=\"$VERSIONING_ROOT/logs/snapshot-$(date +%Y%m%d-%H%M%S).log\"\nSNAPSHOT_ID=\"$(date +%Y%m%d-%H%M%S)\"\n\n# Logging function\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Error handling\nerror_exit() {\n    log \"ERROR: $1\"\n    exit 1\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    log \"Checking prerequisites...\"\n    \n    if [[ ! -d \"$VERSIONING_ROOT\" ]]; then\n        error_exit \"Versioning root directory does not exist\"\n    fi\n    \n    if ! command -v docker &> /dev/null; then\n        error_exit \"Docker is not installed\"\n    fi\n    \n    log \"Prerequisites check passed\"\n}\n\n# Create snapshot manifest\ncreate_snapshot_manifest() {\n    log \"Creating snapshot manifest...\"\n    \n    local manifest_file=\"$MANIFESTS_DIR/snapshot-$SNAPSHOT_ID.json\"\n    \n    cat > \"$manifest_file\" << EOF\n{\n  \"snapshot_id\": \"$SNAPSHOT_ID\",\n  \"created\": \"$(date -Iseconds)\",\n  \"description\": \"${1:-System snapshot}\",\n  \"services\": {\nEOF\n    \n    # Get running services\n    local services=$(docker ps --format \"{{.Names}}\" | grep ai-q || true)\n    \n    for service in $services; do\n        local image=$(docker inspect \"$service\" --format '{{.Config.Image}}' 2>/dev/null || echo \"unknown\")\n        local status=$(docker inspect \"$service\" --format '{{.State.Status}}' 2>/dev/null || echo \"unknown\")\n        \n        cat >> \"$manifest_file\" << EOF\n    \"$service\": {\n      \"image\": \"$image\",\n      \"status\": \"$status\"\n    },\nEOF\n    done\n    \n    # Remove trailing comma\n    sed -i '$ s/,$//' \"$manifest_file\"\n    \n    cat >> \"$manifest_file\" << EOF\n  },\n  \"volumes\": [\nEOF\n    \n    # Get volume information\n    local volumes=$(docker volume ls --format \"{{.Name}}\" | grep ai-q || true)\n    \n    for volume in $volumes; do\n        local size=$(docker run --rm -v \"$volume\":/data alpine du -sh /data 2>/dev/null | cut -f1 || echo \"unknown\")\n        \n        cat >> \"$manifest_file\" << EOF\n    {\n      \"name\": \"$volume\",\n      \"size\": \"$size\"\n    },\nEOF\n    done\n    \n    # Remove trailing comma\n    sed -i '$ s/,$//' \"$manifest_file\"\n    \n    cat >> \"$manifest_file\" << EOF\n  ]\n}\nEOF\n    \n    log \"Snapshot manifest created: $manifest_file\"\n}\n\n# Create service snapshots\ncreate_service_snapshots() {\n    log \"Creating service snapshots...\"\n    \n    # PostgreSQL snapshot\n    if docker ps | grep -q ai-q-postgres; then\n        log \"Creating PostgreSQL snapshot...\"\n        local pg_snapshot_dir=\"$SNAPSHOTS_DIR/postgresql/snapshot-$SNAPSHOT_ID\"\n        mkdir -p \"$pg_snapshot_dir\"\n        \n        docker exec ai-q-postgres pg_dumpall -U aiq_user > \"$pg_snapshot_dir/postgresql.sql\" 2>> \"$LOG_FILE\" || {\n            log \"Warning: PostgreSQL snapshot failed\"\n        }\n        \n        gzip \"$pg_snapshot_dir/postgresql.sql\"\n        log \"PostgreSQL snapshot created: $pg_snapshot_dir/postgresql.sql.gz\"\n    fi\n    \n    # Redis snapshot\n    if docker ps | grep -q ai-q-redis; then\n        log \"Creating Redis snapshot...\"\n        local redis_snapshot_dir=\"$SNAPSHOTS_DIR/redis/snapshot-$SNAPSHOT_ID\"\n        mkdir -p \"$redis_snapshot_dir\"\n        \n        docker cp ai-q-redis:/data/dump.rdb \"$redis_snapshot_dir/redis.rdb\" 2>> \"$LOG_FILE\" || {\n            log \"Warning: Redis snapshot failed\"\n        }\n        \n        gzip \"$redis_snapshot_dir/redis.rdb\"\n        log \"Redis snapshot created: $redis_snapshot_dir/redis.rdb.gz\"\n    fi\n    \n    # Configuration snapshot\n    log \"Creating configuration snapshot...\"\n    local config_snapshot_dir=\"$SNAPSHOTS_DIR/configs/snapshot-$SNAPSHOT_ID\"\n    mkdir -p \"$config_snapshot_dir\"\n    \n    tar -czf \"$config_snapshot_dir/configs.tar.gz\" -C /opt/ai-q config 2>> \"$LOG_FILE\" || {\n        log \"Warning: Configuration snapshot failed\"\n    }\n    \n    log \"Configuration snapshot created: $config_snapshot_dir/configs.tar.gz\"\n}\n\n# Create volume snapshots\ncreate_volume_snapshots() {\n    log \"Creating volume snapshots...\"\n    \n    local volumes=$(docker volume ls --format \"{{.Name}}\" | grep ai-q || true)\n    \n    for volume in $volumes; do\n        log \"Creating snapshot for volume: $volume\"\n        local volume_snapshot_dir=\"$SNAPSHOTS_DIR/volumes/snapshot-$SNAPSHOT_ID\"\n        mkdir -p \"$volume_snapshot_dir\"\n        \n        # Create volume snapshot using Docker\n        docker run --rm -v \"$volume\":/data -v \"$volume_snapshot_dir\":/backup alpine tar -czf \"/backup/$volume.tar.gz\" -C /data . 2>> \"$LOG_FILE\" || {\n            log \"Warning: Volume snapshot failed for $volume\"\n        }\n        \n        log \"Volume snapshot created: $volume_snapshot_dir/$volume.tar.gz\"\n    done\n}\n\n# Main execution\nmain() {\n    local description=\"${1:-System snapshot}\"\n    \n    log \"Starting snapshot creation process (ID: $SNAPSHOT_ID)...\"\n    \n    check_prerequisites\n    create_snapshot_manifest \"$description\"\n    create_service_snapshots\n    create_volume_snapshots\n    \n    log \"Snapshot creation process completed successfully\"\n    log \"Snapshot ID: $SNAPSHOT_ID\"\n}\n\n# Execute main function\nmain \"$@\"",
        "verification": "Verify snapshot script created and is executable",
        "expected_output": "Snapshot script created and executable"
      },
      {
        "step_id": "06-02-02",
        "title": "Create rollback script",
        "description": "Create script to rollback system to previous snapshot",
        "script_path": "/opt/ai-q/scripts/versioning-rollback.sh",
        "script_content": "#!/bin/bash\n\n# AI-Q Versioning Rollback Script\n# Version: 1.0.0\n# Created: 2025-01-28\n# Purpose: Rollback system to previous snapshot\n\nset -euo pipefail\n\n# Configuration\nVERSIONING_ROOT=\"/opt/ai-q/versioning\"\nSNAPSHOTS_DIR=\"$VERSIONING_ROOT/snapshots\"\nMANIFESTS_DIR=\"$VERSIONING_ROOT/manifests\"\nROLLBACKS_DIR=\"$VERSIONING_ROOT/rollbacks\"\nLOG_FILE=\"$VERSIONING_ROOT/logs/rollback-$(date +%Y%m%d-%H%M%S).log\"\n\n# Logging function\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Error handling\nerror_exit() {\n    log \"ERROR: $1\"\n    exit 1\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    log \"Checking prerequisites...\"\n    \n    if [[ ! -d \"$VERSIONING_ROOT\" ]]; then\n        error_exit \"Versioning root directory does not exist\"\n    fi\n    \n    if ! command -v docker &> /dev/null; then\n        error_exit \"Docker is not installed\"\n    fi\n    \n    log \"Prerequisites check passed\"\n}\n\n# Validate snapshot\nvalidate_snapshot() {\n    local snapshot_id=\"$1\"\n    \n    log \"Validating snapshot: $snapshot_id\"\n    \n    local manifest_file=\"$MANIFESTS_DIR/snapshot-$snapshot_id.json\"\n    \n    if [[ ! -f \"$manifest_file\" ]]; then\n        error_exit \"Snapshot manifest not found: $manifest_file\"\n    fi\n    \n    log \"Snapshot validation passed\"\n}\n\n# Create rollback backup\ncreate_rollback_backup() {\n    log \"Creating rollback backup...\"\n    \n    local rollback_id=\"rollback-$(date +%Y%m%d-%H%M%S)\"\n    local rollback_dir=\"$ROLLBACKS_DIR/$rollback_id\"\n    \n    mkdir -p \"$rollback_dir\"\n    \n    # Create current state backup\n    /opt/ai-q/scripts/versioning-snapshot.sh \"Pre-rollback backup\" 2>> \"$LOG_FILE\" || {\n        error_exit \"Failed to create rollback backup\"\n    }\n    \n    log \"Rollback backup created: $rollback_dir\"\n}\n\n# Stop services\nstop_services() {\n    log \"Stopping services...\"\n    \n    cd /opt/ai-q\n    \n    docker-compose -f docker/compose/docker-compose.yml down 2>> \"$LOG_FILE\" || {\n        error_exit \"Failed to stop services\"\n    }\n    \n    log \"Services stopped successfully\"\n}\n\n# Restore PostgreSQL\nrestore_postgresql() {\n    local snapshot_id=\"$1\"\n    \n    log \"Restoring PostgreSQL from snapshot: $snapshot_id\"\n    \n    local pg_snapshot_file=\"$SNAPSHOTS_DIR/postgresql/snapshot-$snapshot_id/postgresql.sql.gz\"\n    \n    if [[ -f \"$pg_snapshot_file\" ]]; then\n        # Start PostgreSQL\n        docker-compose -f docker/compose/docker-compose.yml up -d postgres 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to start PostgreSQL\"\n        }\n        \n        # Wait for PostgreSQL to be ready\n        sleep 10\n        \n        # Restore data\n        gunzip -c \"$pg_snapshot_file\" | docker exec -i ai-q-postgres psql -U aiq_user 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to restore PostgreSQL data\"\n        }\n        \n        log \"PostgreSQL restored successfully\"\n    else\n        log \"Warning: PostgreSQL snapshot not found\"\n    fi\n}\n\n# Restore Redis\nrestore_redis() {\n    local snapshot_id=\"$1\"\n    \n    log \"Restoring Redis from snapshot: $snapshot_id\"\n    \n    local redis_snapshot_file=\"$SNAPSHOTS_DIR/redis/snapshot-$snapshot_id/redis.rdb.gz\"\n    \n    if [[ -f \"$redis_snapshot_file\" ]]; then\n        # Start Redis\n        docker-compose -f docker/compose/docker-compose.yml up -d redis 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to start Redis\"\n        }\n        \n        # Wait for Redis to be ready\n        sleep 5\n        \n        # Stop Redis for data restoration\n        docker stop ai-q-redis 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to stop Redis\"\n        }\n        \n        # Restore data\n        gunzip -c \"$redis_snapshot_file\" | docker cp - ai-q-redis:/data/dump.rdb 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to restore Redis data\"\n        }\n        \n        # Start Redis\n        docker start ai-q-redis 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to start Redis\"\n        }\n        \n        log \"Redis restored successfully\"\n    else\n        log \"Warning: Redis snapshot not found\"\n    fi\n}\n\n# Restore configurations\nrestore_configs() {\n    local snapshot_id=\"$1\"\n    \n    log \"Restoring configurations from snapshot: $snapshot_id\"\n    \n    local config_snapshot_file=\"$SNAPSHOTS_DIR/configs/snapshot-$snapshot_id/configs.tar.gz\"\n    \n    if [[ -f \"$config_snapshot_file\" ]]; then\n        tar -xzf \"$config_snapshot_file\" -C /opt/ai-q 2>> \"$LOG_FILE\" || {\n            error_exit \"Failed to restore configurations\"\n        }\n        \n        log \"Configurations restored successfully\"\n    else\n        log \"Warning: Configuration snapshot not found\"\n    fi\n}\n\n# Start services\nstart_services() {\n    log \"Starting services...\"\n    \n    cd /opt/ai-q\n    \n    docker-compose -f docker/compose/docker-compose.yml up -d 2>> \"$LOG_FILE\" || {\n        error_exit \"Failed to start services\"\n    }\n    \n    log \"Services started successfully\"\n}\n\n# Verify rollback\nverify_rollback() {\n    log \"Verifying rollback...\"\n    \n    # Wait for services to be ready\n    sleep 30\n    \n    # Check if all containers are running\n    local running_containers=$(docker ps --format \"{{.Names}}\" | grep ai-q | wc -l)\n    local expected_containers=12  # Adjust based on your services\n    \n    if [[ $running_containers -lt $expected_containers ]]; then\n        error_exit \"Not all containers are running after rollback (expected: $expected_containers, running: $running_containers)\"\n    fi\n    \n    log \"Rollback verification passed ($running_containers containers running)\"\n}\n\n# Main execution\nmain() {\n    if [[ $# -eq 0 ]]; then\n        error_exit \"Snapshot ID must be provided\"\n    fi\n    \n    local snapshot_id=\"$1\"\n    \n    log \"Starting rollback process to snapshot: $snapshot_id\"\n    \n    check_prerequisites\n    validate_snapshot \"$snapshot_id\"\n    create_rollback_backup\n    stop_services\n    restore_postgresql \"$snapshot_id\"\n    restore_redis \"$snapshot_id\"\n    restore_configs \"$snapshot_id\"\n    start_services\n    verify_rollback\n    \n    log \"Rollback process completed successfully\"\n}\n\n# Execute main function\nmain \"$@\"",
        "verification": "Verify rollback script created and is executable",
        "expected_output": "Rollback script created and executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/scripts/versioning-*.sh",
      "chmod +x /opt/ai-q/scripts/versioning-*.sh"
    ],
    "expected_outputs": {
      "versioning_scripts": "2 versioning scripts created and executable",
      "permissions": "Scripts have execute permissions"
    }
  },
  "task_03_create_versioning_management": {
    "task_id": "06-03",
    "title": "Create Versioning Management System",
    "description": "Create management scripts for versioning operations",
    "estimated_duration": "1 hour",
    "critical": true,
    "steps": [
      {
        "step_id": "06-03-01",
        "title": "Create versioning list script",
        "description": "Create script to list available snapshots",
        "script_path": "/opt/ai-q/scripts/versioning-list.sh",
        "script_content": "#!/bin/bash\n\n# AI-Q Versioning List Script\n# Version: 1.0.0\n# Created: 2025-01-28\n# Purpose: List available snapshots and version information\n\nset -euo pipefail\n\n# Configuration\nVERSIONING_ROOT=\"/opt/ai-q/versioning\"\nMANIFESTS_DIR=\"$VERSIONING_ROOT/manifests\"\n\n# Logging function\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\n# List snapshots\nlist_snapshots() {\n    echo \"Available Snapshots:\"\n    echo \"==================\"\n    \n    if [[ ! -d \"$MANIFESTS_DIR\" ]]; then\n        echo \"No snapshots found\"\n        return\n    fi\n    \n    local snapshots=$(find \"$MANIFESTS_DIR\" -name \"snapshot-*.json\" -type f | sort -r)\n    \n    if [[ -z \"$snapshots\" ]]; then\n        echo \"No snapshots found\"\n        return\n    fi\n    \n    for manifest in $snapshots; do\n        local snapshot_id=$(basename \"$manifest\" .json | sed 's/snapshot-//')\n        local created=$(jq -r '.created' \"$manifest\" 2>/dev/null || echo \"unknown\")\n        local description=$(jq -r '.description' \"$manifest\" 2>/dev/null || echo \"No description\")\n        \n        echo \"ID: $snapshot_id\"\n        echo \"Created: $created\"\n        echo \"Description: $description\"\n        echo \"---\"\n    done\n}\n\n# Show snapshot details\nshow_snapshot_details() {\n    local snapshot_id=\"$1\"\n    local manifest_file=\"$MANIFESTS_DIR/snapshot-$snapshot_id.json\"\n    \n    if [[ ! -f \"$manifest_file\" ]]; then\n        echo \"Snapshot not found: $snapshot_id\"\n        return 1\n    fi\n    \n    echo \"Snapshot Details for: $snapshot_id\"\n    echo \"===============================\"\n    \n    jq '.' \"$manifest_file\"\n}\n\n# Main execution\nmain() {\n    if [[ $# -eq 0 ]]; then\n        list_snapshots\n    else\n        show_snapshot_details \"$1\"\n    fi\n}\n\n# Execute main function\nmain \"$@\"",
        "verification": "Verify versioning list script created and is executable",
        "expected_output": "Versioning list script created and executable"
      },
      {
        "step_id": "06-03-02",
        "title": "Create versioning cleanup script",
        "description": "Create script to cleanup old snapshots",
        "script_path": "/opt/ai-q/scripts/versioning-cleanup.sh",
        "script_content": "#!/bin/bash\n\n# AI-Q Versioning Cleanup Script\n# Version: 1.0.0\n# Created: 2025-01-28\n# Purpose: Cleanup old snapshots to free up storage space\n\nset -euo pipefail\n\n# Configuration\nVERSIONING_ROOT=\"/opt/ai-q/versioning\"\nSNAPSHOTS_DIR=\"$VERSIONING_ROOT/snapshots\"\nMANIFESTS_DIR=\"$VERSIONING_ROOT/manifests\"\nRETENTION_DAYS=30\n\n# Logging function\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\"\n}\n\n# Cleanup old snapshots\ncleanup_old_snapshots() {\n    log \"Cleaning up snapshots older than $RETENTION_DAYS days...\"\n    \n    local deleted_count=0\n    \n    # Find old snapshots\n    local old_snapshots=$(find \"$SNAPSHOTS_DIR\" -type d -name \"snapshot-*\" -mtime +$RETENTION_DAYS 2>/dev/null || true)\n    \n    for snapshot_dir in $old_snapshots; do\n        local snapshot_id=$(basename \"$snapshot_dir\")\n        \n        log \"Deleting old snapshot: $snapshot_id\"\n        \n        # Remove snapshot directory\n        rm -rf \"$snapshot_dir\"\n        \n        # Remove manifest file\n        local manifest_file=\"$MANIFESTS_DIR/${snapshot_id}.json\"\n        if [[ -f \"$manifest_file\" ]]; then\n            rm -f \"$manifest_file\"\n        fi\n        \n        ((deleted_count++))\n    done\n    \n    log \"Cleanup completed. Deleted $deleted_count old snapshots\"\n}\n\n# Show storage usage\nshow_storage_usage() {\n    log \"Current storage usage:\"\n    \n    local total_size=$(du -sh \"$VERSIONING_ROOT\" 2>/dev/null | cut -f1 || echo \"unknown\")\n    local snapshot_count=$(find \"$SNAPSHOTS_DIR\" -type d -name \"snapshot-*\" 2>/dev/null | wc -l)\n    \n    echo \"Total versioning storage: $total_size\"\n    echo \"Number of snapshots: $snapshot_count\"\n}\n\n# Main execution\nmain() {\n    show_storage_usage\n    cleanup_old_snapshots\n    show_storage_usage\n}\n\n# Execute main function\nmain \"$@\"",
        "verification": "Verify versioning cleanup script created and is executable",
        "expected_output": "Versioning cleanup script created and executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/scripts/versioning-list.sh",
      "ls -la /opt/ai-q/scripts/versioning-cleanup.sh",
      "chmod +x /opt/ai-q/scripts/versioning-list.sh",
      "chmod +x /opt/ai-q/scripts/versioning-cleanup.sh"
    ],
    "expected_outputs": {
      "management_scripts": "2 management scripts created and executable",
      "permissions": "Scripts have execute permissions"
    }
  },
  "verification_and_testing": {
    "verification_commands": [
      "ls -la /opt/ai-q/versioning/",
      "ls -la /opt/ai-q/scripts/versioning-*.sh",
      "/opt/ai-q/scripts/versioning-snapshot.sh \"Test snapshot\"",
      "/opt/ai-q/scripts/versioning-list.sh",
      "/opt/ai-q/scripts/versioning-cleanup.sh"
    ],
    "expected_outputs": {
      "versioning_structure": "Complete versioning directory structure with proper permissions",
      "versioning_scripts": "All versioning scripts created and executable",
      "snapshot_creation": "Snapshot creation process functional",
      "snapshot_listing": "Snapshot listing functionality working",
      "cleanup_functionality": "Cleanup functionality operational"
    }
  },
  "success_criteria": [
    "✅ Complete versioning directory structure created with proper permissions",
    "✅ Comprehensive versioning and rollback scripts implemented",
    "✅ Snapshot creation and management functionality operational",
    "✅ Rollback procedures tested and functional",
    "✅ Versioning management tools implemented",
    "✅ Cleanup procedures for old snapshots functional",
    "✅ Complete versioning and rollback infrastructure operational",
    "✅ Instant rollback capability achieved"
  ],
  "next_steps": [
    "Test versioning and rollback procedures thoroughly",
    "Validate snapshot creation and restoration",
    "Test cleanup procedures",
    "Integrate with existing monitoring systems",
    "Prepare for complete system validation"
  ],
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default step - needs implementation",
      "command": "echo 'Step needs implementation'",
      "expected_output": "Step completed",
      "error_handling": "Continue on error"
    }
  ],
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  }
}