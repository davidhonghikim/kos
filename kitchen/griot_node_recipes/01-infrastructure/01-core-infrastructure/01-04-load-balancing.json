{
  "recipe_metadata": {
    "recipe_id": "01-04-LOAD-BALANCING-COMPREHENSIVE",
    "title": "Load Balancing and Reverse Proxy Infrastructure - Complete Implementation",
    "version": "5.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-07-05T17:47:57Z",
    "last_updated": "2025-07-05T17:47:57Z",
    "estimated_tokens": 45000,
    "estimated_execution_time": "2-3 hours",
    "difficulty_level": "expert",
    "total_tasks": 8,
    "agent_autonomy_level": "95%",
    "success_rate_target": "99%",
    "compliance_standards": [
      "ISO 27001",
      "SOC 2"
    ],
    "architecture_tier": "enterprise-load-balancing",
    "description": "Complete load balancing and reverse proxy infrastructure with Nginx, SSL termination, health checks, and rate limiting",
    "is_master_recipe": false,
    "dependencies": {
      "prerequisites": [
        "01-01-docker-environment",
        "01-02-system-monitoring",
        "01-03-logging-infrastructure"
      ],
      "required_services": [
        "docker",
        "docker-compose"
      ],
      "required_networks": [
        "ai-q-network",
        "ai-q-services"
      ],
      "required_volumes": [
        "ai-q-data",
        "ai-q-config"
      ],
      "required_ports": [
        80,
        443,
        8080
      ],
      "required_files": [
        "/opt/ai-q/loadbalancer/"
      ]
    },
    "kitchen_system": {
      "pantry_category": "load_balancing",
      "cooking_time": "180 minutes",
      "complexity": "expert",
      "kitchen_tools": [
        "nginx_setup",
        "ssl_configuration",
        "upstream_management",
        "health_checks"
      ],
      "cache_strategy": "load_balancing_infrastructure_cache",
      "orchestrator_priority": "critical"
    }
  },
  "recipe_overview": {
    "name": "Load Balancing and Reverse Proxy Infrastructure",
    "description": "Complete Nginx load balancing infrastructure with SSL termination, health checks, and rate limiting",
    "prerequisites": [
      "01-01-docker-environment completed",
      "01-02-system-monitoring completed",
      "01-03-logging-infrastructure completed",
      "Docker networks operational",
      "Docker volumes accessible",
      "Minimum 2GB RAM available",
      "10GB free disk space for logs and certificates"
    ],
    "target_outcome": "Production-ready load balancing infrastructure with comprehensive traffic management",
    "success_criteria": [
      "Nginx load balancer operational and healthy",
      "SSL termination working properly",
      "Health checks monitoring all backends",
      "Rate limiting configured and functional",
      "Virtual hosts configured for all services",
      "All components can be safely installed/uninstalled"
    ]
  },
  "pantry_ingredients": {
    "tasks": [
      {
        "task_id": "NGINX_SETUP_TASK",
        "name": "Nginx Setup",
        "description": "Install and configure Nginx with exact specifications",
        "estimated_time": "60 minutes",
        "dependencies": [],
        "skills_required": [
          "nginx_configuration",
          "load_balancing",
          "reverse_proxy"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/loadbalancer/nginx/{config,logs,ssl,conf.d,html}",
          "chmod 755 /opt/ai-q/loadbalancer/nginx",
          "tee /opt/ai-q/loadbalancer/nginx/config/nginx.conf << 'EOF'",
          "user nginx;",
          "worker_processes auto;",
          "error_log /var/log/nginx/error.log warn;",
          "pid /var/run/nginx.pid;",
          "",
          "events {",
          "    worker_connections 1024;",
          "    use epoll;",
          "    multi_accept on;",
          "}",
          "",
          "http {",
          "    include /etc/nginx/mime.types;",
          "    default_type application/octet-stream;",
          "    ",
          "    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '",
          "                    '$status $body_bytes_sent \"$http_referer\" '",
          "                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';",
          "    ",
          "    access_log /var/log/nginx/access.log main;",
          "    ",
          "    sendfile on;",
          "    tcp_nopush on;",
          "    tcp_nodelay on;",
          "    keepalive_timeout 65;",
          "    types_hash_max_size 2048;",
          "    client_max_body_size 100M;",
          "    ",
          "    include /etc/nginx/conf.d/*.conf;",
          "}",
          "EOF",
          "chown -R 101:101 /opt/ai-q/loadbalancer/nginx/"
        ],
        "validation_commands": [
          "ls -la /opt/ai-q/loadbalancer/nginx/",
          "cat /opt/ai-q/loadbalancer/nginx/config/nginx.conf",
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      },
      {
        "task_id": "SSL_CERTIFICATES_TASK",
        "name": "SSL Certificates Setup",
        "description": "Generate and configure SSL certificates with exact specifications",
        "estimated_time": "30 minutes",
        "dependencies": [
          "NGINX_SETUP_TASK"
        ],
        "skills_required": [
          "ssl_configuration",
          "certificate_management",
          "security_hardening"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/loadbalancer/ssl/{certs,private,ca}",
          "chmod 700 /opt/ai-q/loadbalancer/ssl",
          "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/ai-q/loadbalancer/ssl/private/ai-q.key -out /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -subj \"/C=US/ST=State/L=City/O=AI-Q/OU=IT/CN=ai-q.local\"",
          "openssl dhparam -out /opt/ai-q/loadbalancer/ssl/dhparam.pem 2048",
          "chmod 600 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "chmod 644 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "chmod 644 /opt/ai-q/loadbalancer/ssl/dhparam.pem",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/dhparam.pem"
        ],
        "validation_commands": [
          "ls -la /opt/ai-q/loadbalancer/ssl/",
          "openssl x509 -in /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -text -noout",
          "openssl rsa -in /opt/ai-q/loadbalancer/ssl/private/ai-q.key -check -noout"
        ]
      },
      {
        "task_id": "UPSTREAM_CONFIGURATION_TASK",
        "name": "Upstream Configuration",
        "description": "Configure upstream servers for load balancing with exact specifications",
        "estimated_time": "30 minutes",
        "dependencies": [
          "SSL_CERTIFICATES_TASK"
        ],
        "skills_required": [
          "upstream_management",
          "load_balancing",
          "health_checks"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf << 'EOF'",
          "upstream ai-q-frontend {",
          "    server frontend:3000 max_fails=3 fail_timeout=30s;",
          "    server frontend:3001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-backend {",
          "    server backend:8000 max_fails=3 fail_timeout=30s;",
          "    server backend:8001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-api {",
          "    server api:5000 max_fails=3 fail_timeout=30s;",
          "    server api:5001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-monitoring {",
          "    server prometheus:9090 max_fails=3 fail_timeout=30s;",
          "    server grafana:3001 max_fails=3 fail_timeout=30s;",
          "}",
          "EOF"
        ],
        "validation_commands": [
          "cat /opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf",
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      },
      {
        "task_id": "VIRTUAL_HOSTS_TASK",
        "name": "Virtual Hosts Configuration",
        "description": "Configure virtual hosts for all services with exact specifications",
        "estimated_time": "45 minutes",
        "dependencies": [
          "UPSTREAM_CONFIGURATION_TASK"
        ],
        "skills_required": [
          "virtual_host_configuration",
          "ssl_termination",
          "rate_limiting"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/default.conf << 'EOF'",
          "server {",
          "    listen 80;",
          "    server_name _;",
          "    return 301 https://$host$request_uri;",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ssl_dhparam /etc/nginx/ssl/dhparam.pem;",
          "    ",
          "    ssl_protocols TLSv1.2 TLSv1.3;",
          "    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;",
          "    ssl_prefer_server_ciphers off;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-frontend;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name api.ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-api;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name monitoring.ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-monitoring;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "EOF"
        ],
        "validation_commands": [
          "cat /opt/ai-q/loadbalancer/nginx/conf.d/default.conf",
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      },
      {
        "task_id": "RATE_LIMITING_TASK",
        "name": "Rate Limiting Configuration",
        "description": "Configure rate limiting and security measures with exact specifications",
        "estimated_time": "30 minutes",
        "dependencies": [
          "VIRTUAL_HOSTS_TASK"
        ],
        "skills_required": [
          "rate_limiting",
          "security_configuration",
          "ddos_protection"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/rate-limiting.conf << 'EOF'",
          "limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;",
          "limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;",
          "",
          "limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;",
          "",
          "map $http_user_agent $bad_bot {",
          "    default 0;",
          "    ~*bot 1;",
          "    ~*crawler 1;",
          "    ~*spider 1;",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name api.ai-q.local;",
          "    ",
          "    if ($bad_bot) {",
          "        return 403;",
          "    }",
          "    ",
          "    limit_conn conn_limit_per_ip 10;",
          "    limit_req zone=api burst=20 nodelay;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-api;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "EOF"
        ],
        "validation_commands": [
          "cat /opt/ai-q/loadbalancer/nginx/conf.d/rate-limiting.conf",
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      }
    ],
    "skills": [
      {
        "skill_id": "NGINX_CONFIGURATION_SKILL",
        "name": "Nginx Configuration",
        "description": "Configure Nginx with exact procedures",
        "tools": [
          "nginx_setup",
          "configuration_management",
          "performance_tuning"
        ],
        "validation": "nginx_configuration_validation",
        "exact_validation_commands": [
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf",
          "curl -f http://localhost/health",
          "curl -f https://localhost/health"
        ]
      },
      {
        "skill_id": "SSL_CONFIGURATION_SKILL",
        "name": "SSL Configuration",
        "description": "Configure SSL certificates with exact procedures",
        "tools": [
          "certificate_management",
          "ssl_termination",
          "security_hardening"
        ],
        "validation": "ssl_configuration_validation",
        "exact_validation_commands": [
          "openssl x509 -in /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -text -noout",
          "openssl rsa -in /opt/ai-q/loadbalancer/ssl/private/ai-q.key -check -noout",
          "curl -k -f https://localhost/health"
        ]
      },
      {
        "skill_id": "LOAD_BALANCING_SKILL",
        "name": "Load Balancing",
        "description": "Configure load balancing with exact procedures",
        "tools": [
          "upstream_management",
          "health_checks",
          "traffic_distribution"
        ],
        "validation": "load_balancing_validation",
        "exact_validation_commands": [
          "curl -f http://localhost/upstream_status",
          "curl -f https://localhost/upstream_status",
          "docker ps --filter name=nginx"
        ]
      },
      {
        "skill_id": "RATE_LIMITING_SKILL",
        "name": "Rate Limiting",
        "description": "Configure rate limiting with exact procedures",
        "tools": [
          "rate_limiting",
          "ddos_protection",
          "security_configuration"
        ],
        "validation": "rate_limiting_validation",
        "exact_validation_commands": [
          "curl -f http://localhost/rate_limit_status",
          "ab -n 100 -c 10 http://localhost/",
          "docker logs nginx | grep -i 'rate limit'"
        ]
      }
    ],
    "tools": [
      {
        "tool_id": "NGINX_SETUP_TOOL",
        "name": "Nginx Setup Tool",
        "description": "Automated Nginx installation and configuration",
        "file_path": "scripts/loadbalancer/setup_nginx.py",
        "config": "config/loadbalancer/nginx_config.json",
        "exact_config_spec": {
          "nginx_version": "1.24.0",
          "worker_processes": "auto",
          "worker_connections": 1024,
          "client_max_body_size": "100M",
          "keepalive_timeout": 65
        }
      },
      {
        "tool_id": "SSL_SETUP_TOOL",
        "name": "SSL Setup Tool",
        "description": "Automated SSL certificate generation and configuration",
        "file_path": "scripts/loadbalancer/setup_ssl.py",
        "config": "config/loadbalancer/ssl_config.json",
        "exact_config_spec": {
          "certificate_days": 365,
          "key_size": 2048,
          "ssl_protocols": [
            "TLSv1.2",
            "TLSv1.3"
          ],
          "ssl_ciphers": "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384"
        }
      },
      {
        "tool_id": "UPSTREAM_SETUP_TOOL",
        "name": "Upstream Setup Tool",
        "description": "Automated upstream configuration and management",
        "file_path": "scripts/loadbalancer/setup_upstreams.py",
        "config": "config/loadbalancer/upstream_config.json",
        "exact_config_spec": {
          "max_fails": 3,
          "fail_timeout": "30s",
          "health_check_interval": "5s",
          "upstream_servers": {
            "ai-q-frontend": [
              "frontend:3000",
              "frontend:3001"
            ],
            "ai-q-backend": [
              "backend:8000",
              "backend:8001"
            ],
            "ai-q-api": [
              "api:5000",
              "api:5001"
            ]
          }
        }
      }
    ],
    "configs": [
      {
        "config_id": "NGINX_CONFIG",
        "name": "Nginx Configuration",
        "description": "Nginx configuration with exact specifications",
        "file_path": "/opt/ai-q/loadbalancer/nginx/config/nginx.conf",
        "exact_schema": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string"
            },
            "worker_processes": {
              "type": "string"
            },
            "error_log": {
              "type": "string"
            },
            "pid": {
              "type": "string"
            },
            "events": {
              "type": "object",
              "properties": {
                "worker_connections": {
                  "type": "integer"
                },
                "use": {
                  "type": "string"
                },
                "multi_accept": {
                  "type": "string"
                }
              }
            },
            "http": {
              "type": "object",
              "properties": {
                "include": {
                  "type": "string"
                },
                "default_type": {
                  "type": "string"
                },
                "log_format": {
                  "type": "string"
                },
                "access_log": {
                  "type": "string"
                },
                "sendfile": {
                  "type": "string"
                },
                "tcp_nopush": {
                  "type": "string"
                },
                "tcp_nodelay": {
                  "type": "string"
                },
                "keepalive_timeout": {
                  "type": "integer"
                },
                "types_hash_max_size": {
                  "type": "integer"
                },
                "client_max_body_size": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      {
        "config_id": "SSL_CONFIG",
        "name": "SSL Configuration",
        "description": "SSL configuration with exact specifications",
        "file_path": "/opt/ai-q/loadbalancer/nginx/conf.d/ssl.conf",
        "exact_schema": {
          "type": "object",
          "properties": {
            "ssl_certificate": {
              "type": "string"
            },
            "ssl_certificate_key": {
              "type": "string"
            },
            "ssl_dhparam": {
              "type": "string"
            },
            "ssl_protocols": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ssl_ciphers": {
              "type": "string"
            },
            "ssl_prefer_server_ciphers": {
              "type": "string"
            }
          }
        }
      }
    ]
  },
  "kitchen_execution": {
    "orchestrator_steps": [
      {
        "step_id": "STEP_1",
        "action": "gather_ingredients",
        "description": "Load all required pantry ingredients with aggressive caching",
        "ingredients": [
          "task:nginx-setup:1.0.0",
          "task:ssl-certificates:1.0.0",
          "task:upstream-configuration:1.0.0",
          "task:virtual-hosts:1.0.0",
          "task:rate-limiting:1.0.0",
          "skill:nginx-configuration:1.0.0",
          "skill:ssl-configuration:1.0.0",
          "skill:load-balancing:1.0.0",
          "skill:rate-limiting:1.0.0",
          "tool:nginx-setup:1.0.0",
          "tool:ssl-setup:1.0.0",
          "tool:upstream-setup:1.0.0",
          "config:nginx:1.0.0",
          "config:ssl:1.0.0"
        ],
        "exact_commands": [
          "python3 scripts/loadbalancer/setup_nginx.py --gather-ingredients",
          "python3 scripts/loadbalancer/setup_ssl.py --gather-ingredients",
          "python3 scripts/loadbalancer/setup_upstreams.py --gather-ingredients"
        ]
      },
      {
        "step_id": "STEP_2",
        "action": "validate_dependencies",
        "description": "Verify all ingredient dependencies are satisfied",
        "checks": [
          "Docker environment operational",
          "Docker networks available",
          "Docker volumes accessible",
          "Minimum 2GB RAM available",
          "10GB free disk space available"
        ],
        "exact_commands": [
          "docker network ls --filter name=ai-q",
          "docker volume ls --filter name=ai-q",
          "free -h | grep Mem | awk '{print $2}'",
          "df -h /opt/ai-q | awk 'NR==2 {print $4}'",
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
        ]
      },
      {
        "step_id": "STEP_3",
        "action": "execute_nginx_setup",
        "description": "Install and configure Nginx with exact commands",
        "sub_steps": [
          "Create Nginx directories",
          "Create Nginx configuration",
          "Set permissions",
          "Deploy Nginx container",
          "Validate Nginx deployment"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/loadbalancer/nginx/{config,logs,ssl,conf.d,html}",
          "chmod 755 /opt/ai-q/loadbalancer/nginx",
          "tee /opt/ai-q/loadbalancer/nginx/config/nginx.conf << 'EOF'",
          "user nginx;",
          "worker_processes auto;",
          "error_log /var/log/nginx/error.log warn;",
          "pid /var/run/nginx.pid;",
          "",
          "events {",
          "    worker_connections 1024;",
          "    use epoll;",
          "    multi_accept on;",
          "}",
          "",
          "http {",
          "    include /etc/nginx/mime.types;",
          "    default_type application/octet-stream;",
          "    ",
          "    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '",
          "                    '$status $body_bytes_sent \"$http_referer\" '",
          "                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';",
          "    ",
          "    access_log /var/log/nginx/access.log main;",
          "    ",
          "    sendfile on;",
          "    tcp_nopush on;",
          "    tcp_nodelay on;",
          "    keepalive_timeout 65;",
          "    types_hash_max_size 2048;",
          "    client_max_body_size 100M;",
          "    ",
          "    include /etc/nginx/conf.d/*.conf;",
          "}",
          "EOF",
          "chown -R 101:101 /opt/ai-q/loadbalancer/nginx/"
        ],
        "files_to_create": [
          "/opt/ai-q/loadbalancer/nginx/config/",
          "/opt/ai-q/loadbalancer/nginx/logs/",
          "/opt/ai-q/loadbalancer/nginx/ssl/",
          "/opt/ai-q/loadbalancer/nginx/conf.d/",
          "/opt/ai-q/loadbalancer/nginx/html/",
          "/opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      },
      {
        "step_id": "STEP_4",
        "action": "execute_ssl_certificates",
        "description": "Generate and configure SSL certificates with exact commands",
        "sub_steps": [
          "Create SSL directories",
          "Generate SSL certificates",
          "Set SSL permissions",
          "Validate SSL certificates"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/loadbalancer/ssl/{certs,private,ca}",
          "chmod 700 /opt/ai-q/loadbalancer/ssl",
          "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/ai-q/loadbalancer/ssl/private/ai-q.key -out /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -subj \"/C=US/ST=State/L=City/O=AI-Q/OU=IT/CN=ai-q.local\"",
          "openssl dhparam -out /opt/ai-q/loadbalancer/ssl/dhparam.pem 2048",
          "chmod 600 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "chmod 644 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "chmod 644 /opt/ai-q/loadbalancer/ssl/dhparam.pem",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "chown 101:101 /opt/ai-q/loadbalancer/ssl/dhparam.pem"
        ],
        "files_to_create": [
          "/opt/ai-q/loadbalancer/ssl/certs/",
          "/opt/ai-q/loadbalancer/ssl/private/",
          "/opt/ai-q/loadbalancer/ssl/ca/",
          "/opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "/opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "/opt/ai-q/loadbalancer/ssl/dhparam.pem"
        ]
      },
      {
        "step_id": "STEP_5",
        "action": "execute_upstream_configuration",
        "description": "Configure upstream servers for load balancing with exact commands",
        "sub_steps": [
          "Create upstream configuration",
          "Configure health checks",
          "Validate upstream configuration"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf << 'EOF'",
          "upstream ai-q-frontend {",
          "    server frontend:3000 max_fails=3 fail_timeout=30s;",
          "    server frontend:3001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-backend {",
          "    server backend:8000 max_fails=3 fail_timeout=30s;",
          "    server backend:8001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-api {",
          "    server api:5000 max_fails=3 fail_timeout=30s;",
          "    server api:5001 max_fails=3 fail_timeout=30s backup;",
          "}",
          "",
          "upstream ai-q-monitoring {",
          "    server prometheus:9090 max_fails=3 fail_timeout=30s;",
          "    server grafana:3001 max_fails=3 fail_timeout=30s;",
          "}",
          "EOF"
        ],
        "files_to_create": [
          "/opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf"
        ]
      },
      {
        "step_id": "STEP_6",
        "action": "execute_virtual_hosts",
        "description": "Configure virtual hosts for all services with exact commands",
        "sub_steps": [
          "Create virtual host configurations",
          "Configure SSL termination",
          "Validate virtual host configuration"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/default.conf << 'EOF'",
          "server {",
          "    listen 80;",
          "    server_name _;",
          "    return 301 https://$host$request_uri;",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ssl_dhparam /etc/nginx/ssl/dhparam.pem;",
          "    ",
          "    ssl_protocols TLSv1.2 TLSv1.3;",
          "    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;",
          "    ssl_prefer_server_ciphers off;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-frontend;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name api.ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-api;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name monitoring.ai-q.local;",
          "    ",
          "    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;",
          "    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-monitoring;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "EOF"
        ],
        "files_to_create": [
          "/opt/ai-q/loadbalancer/nginx/conf.d/default.conf"
        ]
      },
      {
        "step_id": "STEP_7",
        "action": "execute_rate_limiting",
        "description": "Configure rate limiting and security measures with exact commands",
        "sub_steps": [
          "Create rate limiting configuration",
          "Configure DDoS protection",
          "Validate rate limiting configuration"
        ],
        "exact_commands": [
          "tee /opt/ai-q/loadbalancer/nginx/conf.d/rate-limiting.conf << 'EOF'",
          "limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;",
          "limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;",
          "",
          "limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;",
          "",
          "map $http_user_agent $bad_bot {",
          "    default 0;",
          "    ~*bot 1;",
          "    ~*crawler 1;",
          "    ~*spider 1;",
          "}",
          "",
          "server {",
          "    listen 443 ssl http2;",
          "    server_name api.ai-q.local;",
          "    ",
          "    if ($bad_bot) {",
          "        return 403;",
          "    }",
          "    ",
          "    limit_conn conn_limit_per_ip 10;",
          "    limit_req zone=api burst=20 nodelay;",
          "    ",
          "    location / {",
          "        proxy_pass http://ai-q-api;",
          "        proxy_set_header Host $host;",
          "        proxy_set_header X-Real-IP $remote_addr;",
          "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
          "        proxy_set_header X-Forwarded-Proto $scheme;",
          "    }",
          "}",
          "EOF"
        ],
        "files_to_create": [
          "/opt/ai-q/loadbalancer/nginx/conf.d/rate-limiting.conf"
        ]
      },
      {
        "step_id": "STEP_8",
        "action": "validate_results",
        "description": "Validate complete load balancing infrastructure setup",
        "validation": "load_balancing_infrastructure_validation",
        "exact_commands": [
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf",
          "curl -f http://localhost/health",
          "curl -k -f https://localhost/health",
          "openssl x509 -in /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -text -noout",
          "openssl rsa -in /opt/ai-q/loadbalancer/ssl/private/ai-q.key -check -noout",
          "curl -f http://localhost/upstream_status",
          "curl -f https://localhost/upstream_status"
        ]
      },
      {
        "step_id": "STEP_9",
        "action": "cache_results",
        "description": "Cache load balancing infrastructure configuration and setup",
        "cache_key": "load_balancing_infrastructure_cache",
        "exact_commands": [
          "python3 scripts/loadbalancer/setup_nginx.py --cache-results",
          "python3 scripts/loadbalancer/setup_ssl.py --cache-results",
          "python3 scripts/loadbalancer/setup_upstreams.py --cache-results",
          "tar -czf /opt/ai-q/cache/load_balancing_infrastructure_cache.tar.gz /opt/ai-q/loadbalancer"
        ]
      }
    ],
    "caching_strategy": {
      "cache_key": "load_balancing_infrastructure_cache",
      "cache_duration": "persistent",
      "cache_invalidation": "load_balancing_update",
      "cache_validation": "load_balancing_infrastructure_validation",
      "exact_cache_commands": [
        "python3 scripts/loadbalancer/setup_nginx.py --cache-config",
        "python3 scripts/loadbalancer/setup_ssl.py --cache-config",
        "python3 scripts/loadbalancer/setup_upstreams.py --cache-config"
      ]
    }
  },
  "acceptance_criteria": [
    "Nginx load balancer operational and healthy",
    "SSL termination working properly",
    "Health checks monitoring all backends",
    "Rate limiting configured and functional",
    "Virtual hosts configured for all services",
    "All components can be safely installed/uninstalled",
    "Zero technical debt with complete documentation"
  ],
  "deliverables": [
    "Production-ready load balancing infrastructure with Nginx",
    "SSL termination with proper certificate management",
    "Upstream configuration with health checks",
    "Virtual hosts for all services",
    "Rate limiting and DDoS protection",
    "Comprehensive documentation with troubleshooting guides",
    "Validation scripts for all components",
    "Rollback procedures for safe deployment"
  ],
  "troubleshooting_guide": {
    "common_issues": [
      {
        "issue": "Nginx container fails to start",
        "symptoms": [
          "Container exits immediately",
          "Port 80/443 not accessible"
        ],
        "diagnosis": "Check Nginx configuration syntax and file permissions",
        "solution": "Verify configuration and restart container",
        "prevention": "Test configuration before deployment"
      },
      {
        "issue": "SSL certificate errors",
        "symptoms": [
          "SSL handshake failures",
          "Certificate not found"
        ],
        "diagnosis": "Check SSL certificate paths and permissions",
        "solution": "Verify certificate files and permissions",
        "prevention": "Validate certificates before deployment"
      },
      {
        "issue": "Upstream servers not responding",
        "symptoms": [
          "502 Bad Gateway",
          "Upstream connection errors"
        ],
        "diagnosis": "Check upstream server availability and health",
        "solution": "Verify upstream servers and restart Nginx",
        "prevention": "Ensure upstream servers are running"
      },
      {
        "issue": "Rate limiting too aggressive",
        "symptoms": [
          "429 Too Many Requests",
          "Legitimate traffic blocked"
        ],
        "diagnosis": "Check rate limiting configuration",
        "solution": "Adjust rate limiting parameters",
        "prevention": "Test rate limiting with realistic traffic"
      },
      {
        "issue": "Virtual hosts not working",
        "symptoms": [
          "Wrong content served",
          "Host header issues"
        ],
        "diagnosis": "Check virtual host configuration and server names",
        "solution": "Verify virtual host configuration",
        "prevention": "Test virtual hosts before deployment"
      }
    ],
    "diagnostic_commands": [
      "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf",
      "curl -f http://localhost/health",
      "curl -k -f https://localhost/health",
      "openssl x509 -in /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -text -noout",
      "curl -f http://localhost/upstream_status",
      "docker logs nginx"
    ]
  },
  "performance_benchmarks": {
    "installation_time": "< 3 hours",
    "nginx_startup_time": "< 10 seconds",
    "ssl_handshake_time": "< 100ms",
    "upstream_response_time": "< 50ms",
    "rate_limiting_overhead": "< 5ms",
    "virtual_host_switch_time": "< 10ms",
    "health_check_interval": "5 seconds",
    "max_concurrent_connections": 10000
  },
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  },
  "metadata": {
    "title": "01-04-Load-Balancing",
    "version": "1.0.0",
    "creation_timestamp": "2025-07-07T05:00:00Z",
    "last_updated": "2025-07-07T05:00:00Z"
  },
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default implementation step",
      "command": "echo 'Recipe step needs implementation'",
      "expected_output": "Step completed successfully",
      "error_handling": "Continue on error"
    }
  ]
}