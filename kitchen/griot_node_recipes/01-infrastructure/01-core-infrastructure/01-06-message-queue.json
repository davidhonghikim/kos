{
  "recipe_metadata": {
    "recipe_id": "01-06-MESSAGE-QUEUE-COMPREHENSIVE",
    "title": "Message Queue Infrastructure - Complete Implementation",
    "version": "5.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-07-05T17:52:37Z",
    "last_updated": "2025-07-05T17:52:37Z",
    "estimated_tokens": 45000,
    "estimated_execution_time": "2-3 hours",
    "difficulty_level": "expert",
    "total_tasks": 8,
    "agent_autonomy_level": "95%",
    "success_rate_target": "99%",
    "compliance_standards": [
      "ISO 27001",
      "SOC 2"
    ],
    "architecture_tier": "enterprise-message-queue",
    "description": "Complete RabbitMQ message queue implementation with clustering, management UI, monitoring, and high availability",
    "is_master_recipe": false,
    "dependencies": {
      "prerequisites": [
        "01-01-docker-environment",
        "01-02-system-monitoring",
        "01-03-logging-infrastructure",
        "01-04-load-balancing",
        "01-05-service-discovery"
      ],
      "required_services": [
        "docker",
        "docker-compose"
      ],
      "required_networks": [
        "ai-q-network",
        "ai-q-services"
      ],
      "required_volumes": [
        "ai-q-data",
        "ai-q-config"
      ],
      "required_ports": [
        5672,
        5671,
        15672,
        25672
      ],
      "required_files": [
        "/opt/ai-q/message-queue/"
      ]
    },
    "kitchen_system": {
      "pantry_category": "message_queue",
      "cooking_time": "180 minutes",
      "complexity": "expert",
      "kitchen_tools": [
        "rabbitmq_setup",
        "clustering",
        "management_ui",
        "monitoring"
      ],
      "cache_strategy": "message_queue_infrastructure_cache",
      "orchestrator_priority": "critical"
    }
  },
  "recipe_overview": {
    "name": "Message Queue Infrastructure",
    "description": "Complete RabbitMQ message queue infrastructure with clustering, management UI, monitoring, and high availability",
    "prerequisites": [
      "01-01-docker-environment completed",
      "01-02-system-monitoring completed",
      "01-03-logging-infrastructure completed",
      "01-04-load-balancing completed",
      "01-05-service-discovery completed",
      "Docker networks operational",
      "Docker volumes accessible",
      "Minimum 4GB RAM available",
      "20GB free disk space for message persistence"
    ],
    "target_outcome": "Production-ready message queue infrastructure with comprehensive monitoring and high availability",
    "success_criteria": [
      "RabbitMQ server operational and healthy",
      "Management UI accessible and functional",
      "Clustering configured and operational",
      "Monitoring and alerting configured",
      "High availability features enabled",
      "All components can be safely installed/uninstalled"
    ]
  },
  "pantry_ingredients": {
    "tasks": [
      {
        "task_id": "RABBITMQ_SETUP_TASK",
        "name": "RabbitMQ Server Setup",
        "description": "Install and configure RabbitMQ server with exact specifications",
        "estimated_time": "60 minutes",
        "dependencies": [],
        "skills_required": [
          "rabbitmq_configuration",
          "message_queue",
          "clustering"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/message-queue/rabbitmq/{config,data,logs,plugins,definitions}",
          "chmod 755 /opt/ai-q/message-queue/rabbitmq",
          "tee /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf << 'EOF'",
          "listeners.tcp.default = 5672",
          "listeners.ssl.default = 5671",
          "management.tcp.port = 15672",
          "management.tcp.ip = 0.0.0.0",
          "management.load_definitions = /etc/rabbitmq/definitions.json",
          "management.http_log_dir = /var/log/rabbitmq/management",
          "log.file = /var/log/rabbitmq/rabbit.log",
          "log.file.level = info",
          "log.console = true",
          "log.console.level = info",
          "log.console.formatter = json",
          "log.console.formatter.json.field.date = timestamp",
          "log.console.formatter.json.field.level = level",
          "log.console.formatter.json.field.pid = pid",
          "log.console.formatter.json.field.source = source",
          "log.console.formatter.json.field.msg = message",
          "vm_memory_high_watermark.relative = 0.6",
          "vm_memory_high_watermark_paging_ratio = 0.5",
          "disk_free_limit.relative = 2.0",
          "cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config",
          "cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1",
          "cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2",
          "cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3",
          "EOF",
          "chown -R 999:999 /opt/ai-q/message-queue/rabbitmq/"
        ],
        "validation_commands": [
          "ls -la /opt/ai-q/message-queue/rabbitmq/",
          "cat /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf",
          "rabbitmq-diagnostics validate_config /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf"
        ]
      }
    ]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured",
      "01-01-03: Docker networks created",
      "01-02-01: Prometheus installed",
      "01-02-02: Node Exporter running",
      "01-02-03: Alert Manager configured",
      "01-02-04: Grafana installed",
      "01-03-01: Elasticsearch installed",
      "01-03-02: Logstash configured",
      "01-03-03: Kibana installed",
      "01-04-01: Nginx installed",
      "01-05-01: Consul server installed",
      "01-05-02: Service registry configured"
    ],
    "system_requirements": {
      "cpu": "Minimum 2 cores for RabbitMQ",
      "ram": "Minimum 4GB for RabbitMQ",
      "storage": "Minimum 20GB for message persistence",
      "network": "Access to all service networks"
    }
  },
  "task_01_install_rabbitmq_server": {
    "task_id": "01-06-01",
    "title": "Install RabbitMQ Server",
    "description": "Install RabbitMQ server with exact configuration",
    "estimated_duration": "50 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-06-01-01",
        "title": "Create RabbitMQ configuration directory",
        "description": "Create directory structure for RabbitMQ",
        "commands": [
          "sudo mkdir -p /opt/ai-q/message-queue/rabbitmq/config",
          "sudo mkdir -p /opt/ai-q/message-queue/rabbitmq/data",
          "sudo mkdir -p /opt/ai-q/message-queue/rabbitmq/logs",
          "sudo mkdir -p /opt/ai-q/message-queue/rabbitmq/plugins",
          "sudo mkdir -p /opt/ai-q/message-queue/rabbitmq/definitions"
        ],
        "verification": "Check directories created",
        "expected_output": "All RabbitMQ directories created successfully"
      },
      {
        "step_id": "01-06-01-02",
        "title": "Create RabbitMQ configuration file",
        "description": "Create rabbitmq.conf with exact configuration",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf",
        "config_content": {
          "listeners.tcp.default": 5672,
          "listeners.ssl.default": 5671,
          "management.tcp.port": 15672,
          "management.tcp.ip": "0.0.0.0",
          "management.load_definitions": "/etc/rabbitmq/definitions.json",
          "management.http_log_dir": "/var/log/rabbitmq/management",
          "log.file": "/var/log/rabbitmq/rabbit.log",
          "log.file.level": "info",
          "log.console": "true",
          "log.console.level": "info",
          "log.console.formatter": "json",
          "log.console.formatter.json.field.date": "timestamp",
          "log.console.formatter.json.field.level": "level",
          "log.console.formatter.json.field.pid": "pid",
          "log.console.formatter.json.field.source": "source",
          "log.console.formatter.json.field.msg": "message",
          "vm_memory_high_watermark.relative": "0.6",
          "vm_memory_high_watermark_paging_ratio": "0.5",
          "disk_free_limit.relative": "2.0",
          "cluster_formation.peer_discovery_backend": "rabbit_peer_discovery_classic_config",
          "cluster_formation.classic_config.nodes.1": "rabbit@rabbitmq-1",
          "cluster_formation.classic_config.nodes.2": "rabbit@rabbitmq-2",
          "cluster_formation.classic_config.nodes.3": "rabbit@rabbitmq-3"
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf << 'EOF'\nlisteners.tcp.default = 5672\nlisteners.ssl.default = 5671\nmanagement.tcp.port = 15672\nmanagement.tcp.ip = 0.0.0.0\nmanagement.load_definitions = /etc/rabbitmq/definitions.json\nmanagement.http_log_dir = /var/log/rabbitmq/management\nlog.file = /var/log/rabbitmq/rabbit.log\nlog.file.level = info\nlog.console = true\nlog.console.level = info\nlog.console.formatter = json\nlog.console.formatter.json.field.date = timestamp\nlog.console.formatter.json.field.level = level\nlog.console.formatter.json.field.pid = pid\nlog.console.formatter.json.field.source = source\nlog.console.formatter.json.field.msg = message\nvm_memory_high_watermark.relative = 0.6\nvm_memory_high_watermark_paging_ratio = 0.5\ndisk_free_limit.relative = 2.0\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "rabbitmq.conf created with specified configuration"
      },
      {
        "step_id": "01-06-01-03",
        "title": "Create RabbitMQ definitions file",
        "description": "Create definitions.json with exchanges, queues, and bindings",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/definitions/definitions.json",
        "config_content": {
          "rabbit_version": "3.12.0",
          "rabbitmq_version": "3.12.0",
          "product_name": "RabbitMQ",
          "product_version": "3.12.0",
          "users": [
            {
              "name": "ai_q_admin",
              "password_hash": "ai_q_admin_hash",
              "hashing_algorithm": "rabbit_password_hashing_sha256",
              "tags": "administrator"
            },
            {
              "name": "ai_q_user",
              "password_hash": "ai_q_user_hash",
              "hashing_algorithm": "rabbit_password_hashing_sha256",
              "tags": "management"
            }
          ],
          "vhosts": [
            {
              "name": "/"
            },
            {
              "name": "ai_q_vhost"
            }
          ],
          "permissions": [
            {
              "user": "ai_q_admin",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            },
            {
              "user": "ai_q_user",
              "vhost": "ai_q_vhost",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
          ],
          "exchanges": [
            {
              "name": "ai_q_exchange",
              "vhost": "ai_q_vhost",
              "type": "topic",
              "durable": true,
              "auto_delete": false,
              "internal": false,
              "arguments": {}
            },
            {
              "name": "ai_q_dlx_exchange",
              "vhost": "ai_q_vhost",
              "type": "direct",
              "durable": true,
              "auto_delete": false,
              "internal": false,
              "arguments": {}
            }
          ],
          "queues": [
            {
              "name": "ai_q_main_queue",
              "vhost": "ai_q_vhost",
              "durable": true,
              "auto_delete": false,
              "arguments": {
                "x-dead-letter-exchange": "ai_q_dlx_exchange",
                "x-dead-letter-routing-key": "dead.letter",
                "x-message-ttl": 86400000
              }
            },
            {
              "name": "ai_q_dlx_queue",
              "vhost": "ai_q_vhost",
              "durable": true,
              "auto_delete": false,
              "arguments": {}
            },
            {
              "name": "ai_q_notification_queue",
              "vhost": "ai_q_vhost",
              "durable": true,
              "auto_delete": false,
              "arguments": {
                "x-dead-letter-exchange": "ai_q_dlx_exchange",
                "x-dead-letter-routing-key": "dead.letter"
              }
            }
          ],
          "bindings": [
            {
              "source": "ai_q_exchange",
              "vhost": "ai_q_vhost",
              "destination": "ai_q_main_queue",
              "destination_type": "queue",
              "routing_key": "ai_q.main",
              "arguments": {}
            },
            {
              "source": "ai_q_exchange",
              "vhost": "ai_q_vhost",
              "destination": "ai_q_notification_queue",
              "destination_type": "queue",
              "routing_key": "ai_q.notification",
              "arguments": {}
            },
            {
              "source": "ai_q_dlx_exchange",
              "vhost": "ai_q_vhost",
              "destination": "ai_q_dlx_queue",
              "destination_type": "queue",
              "routing_key": "dead.letter",
              "arguments": {}
            }
          ]
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/definitions/definitions.json << 'EOF'\n{\n  \"rabbit_version\": \"3.12.0\",\n  \"rabbitmq_version\": \"3.12.0\",\n  \"product_name\": \"RabbitMQ\",\n  \"product_version\": \"3.12.0\",\n  \"users\": [\n    {\n      \"name\": \"ai_q_admin\",\n      \"password_hash\": \"ai_q_admin_hash\",\n      \"hashing_algorithm\": \"rabbit_password_hashing_sha256\",\n      \"tags\": \"administrator\"\n    },\n    {\n      \"name\": \"ai_q_user\",\n      \"password_hash\": \"ai_q_user_hash\",\n      \"hashing_algorithm\": \"rabbit_password_hashing_sha256\",\n      \"tags\": \"management\"\n    }\n  ],\n  \"vhosts\": [\n    {\n      \"name\": \"/\"\n    },\n    {\n      \"name\": \"ai_q_vhost\"\n    }\n  ],\n  \"permissions\": [\n    {\n      \"user\": \"ai_q_admin\",\n      \"vhost\": \"/\",\n      \"configure\": \".*\",\n      \"write\": \".*\",\n      \"read\": \".*\"\n    },\n    {\n      \"user\": \"ai_q_user\",\n      \"vhost\": \"ai_q_vhost\",\n      \"configure\": \".*\",\n      \"write\": \".*\",\n      \"read\": \".*\"\n    }\n  ],\n  \"exchanges\": [\n    {\n      \"name\": \"ai_q_exchange\",\n      \"vhost\": \"ai_q_vhost\",\n      \"type\": \"topic\",\n      \"durable\": true,\n      \"auto_delete\": false,\n      \"internal\": false,\n      \"arguments\": {}\n    },\n    {\n      \"name\": \"ai_q_dlx_exchange\",\n      \"vhost\": \"ai_q_vhost\",\n      \"type\": \"direct\",\n      \"durable\": true,\n      \"auto_delete\": false,\n      \"internal\": false,\n      \"arguments\": {}\n    }\n  ],\n  \"queues\": [\n    {\n      \"name\": \"ai_q_main_queue\",\n      \"vhost\": \"ai_q_vhost\",\n      \"durable\": true,\n      \"auto_delete\": false,\n      \"arguments\": {\n        \"x-dead-letter-exchange\": \"ai_q_dlx_exchange\",\n        \"x-dead-letter-routing-key\": \"dead.letter\",\n        \"x-message-ttl\": 86400000\n      }\n    },\n    {\n      \"name\": \"ai_q_dlx_queue\",\n      \"vhost\": \"ai_q_vhost\",\n      \"durable\": true,\n      \"auto_delete\": false,\n      \"arguments\": {}\n    },\n    {\n      \"name\": \"ai_q_notification_queue\",\n      \"vhost\": \"ai_q_vhost\",\n      \"durable\": true,\n      \"auto_delete\": false,\n      \"arguments\": {\n        \"x-dead-letter-exchange\": \"ai_q_dlx_exchange\",\n        \"x-dead-letter-routing-key\": \"dead.letter\"\n      }\n    }\n  ],\n  \"bindings\": [\n    {\n      \"source\": \"ai_q_exchange\",\n      \"vhost\": \"ai_q_vhost\",\n      \"destination\": \"ai_q_main_queue\",\n      \"destination_type\": \"queue\",\n      \"routing_key\": \"ai_q.main\",\n      \"arguments\": {}\n    },\n    {\n      \"source\": \"ai_q_exchange\",\n      \"vhost\": \"ai_q_vhost\",\n      \"destination\": \"ai_q_notification_queue\",\n      \"destination_type\": \"queue\",\n      \"routing_key\": \"ai_q.notification\",\n      \"arguments\": {}\n    },\n    {\n      \"source\": \"ai_q_dlx_exchange\",\n      \"vhost\": \"ai_q_vhost\",\n      \"destination\": \"ai_q_dlx_queue\",\n      \"destination_type\": \"queue\",\n      \"routing_key\": \"dead.letter\",\n      \"arguments\": {}\n    }\n  ]\n}\nEOF"
        ],
        "verification": "Check definitions file exists",
        "expected_output": "definitions.json created with specified configuration"
      },
      {
        "step_id": "01-06-01-04",
        "title": "Set RabbitMQ permissions",
        "description": "Set correct permissions for RabbitMQ",
        "commands": [
          "sudo chown -R 999:999 /opt/ai-q/message-queue/rabbitmq/",
          "sudo chmod -R 755 /opt/ai-q/message-queue/rabbitmq/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "RabbitMQ directories have correct ownership (999:999)"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/message-queue/rabbitmq/",
      "cat /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf"
    ],
    "expected_outputs": {
      "config_file": "rabbitmq.conf contains specified configuration",
      "definitions": "definitions.json contains queue definitions",
      "permissions": "Files owned by user 999:999"
    }
  },
  "task_02_setup_rabbitmq_clustering": {
    "task_id": "01-06-02",
    "title": "Setup RabbitMQ Clustering",
    "description": "Setup RabbitMQ clustering for high availability",
    "estimated_duration": "60 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-06-02-01",
        "title": "Create cluster configuration",
        "description": "Create cluster configuration for multiple nodes",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/config/cluster.conf",
        "config_content": {
          "cluster_formation.peer_discovery_backend": "rabbit_peer_discovery_classic_config",
          "cluster_formation.classic_config.nodes.1": "rabbit@rabbitmq-1",
          "cluster_formation.classic_config.nodes.2": "rabbit@rabbitmq-2",
          "cluster_formation.classic_config.nodes.3": "rabbit@rabbitmq-3",
          "cluster_formation.classic_config.nodes.4": "rabbit@rabbitmq-4",
          "cluster_formation.classic_config.nodes.5": "rabbit@rabbitmq-5",
          "cluster_partition_handling": "autoheal",
          "cluster_keepalive_interval": 10000,
          "cluster_formation.node_cleanup.only_log_warning": true,
          "cluster_formation.node_cleanup.interval": 60000
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/config/cluster.conf << 'EOF'\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config\ncluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1\ncluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2\ncluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3\ncluster_formation.classic_config.nodes.4 = rabbit@rabbitmq-4\ncluster_formation.classic_config.nodes.5 = rabbit@rabbitmq-5\ncluster_partition_handling = autoheal\ncluster_keepalive_interval = 10000\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_formation.node_cleanup.interval = 60000\nEOF"
        ],
        "verification": "Check cluster configuration exists",
        "expected_output": "cluster.conf created with specified configuration"
      },
      {
        "step_id": "01-06-02-02",
        "title": "Create cluster policy configuration",
        "description": "Create policies for cluster management",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/config/policies.json",
        "config_content": {
          "policies": [
            {
              "name": "ha-all",
              "pattern": ".*",
              "vhost": "ai_q_vhost",
              "definition": {
                "ha-mode": "all",
                "ha-sync-mode": "automatic",
                "ha-sync-batch-size": 1
              },
              "priority": 0,
              "apply-to": "all"
            },
            {
              "name": "mirror-all",
              "pattern": ".*",
              "vhost": "ai_q_vhost",
              "definition": {
                "ha-mode": "exactly",
                "ha-params": 3,
                "ha-sync-mode": "automatic"
              },
              "priority": 1,
              "apply-to": "queues"
            }
          ]
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/config/policies.json << 'EOF'\n{\n  \"policies\": [\n    {\n      \"name\": \"ha-all\",\n      \"pattern\": \".*\",\n      \"vhost\": \"ai_q_vhost\",\n      \"definition\": {\n        \"ha-mode\": \"all\",\n        \"ha-sync-mode\": \"automatic\",\n        \"ha-sync-batch-size\": 1\n      },\n      \"priority\": 0,\n      \"apply-to\": \"all\"\n    },\n    {\n      \"name\": \"mirror-all\",\n      \"pattern\": \".*\",\n      \"vhost\": \"ai_q_vhost\",\n      \"definition\": {\n        \"ha-mode\": \"exactly\",\n        \"ha-params\": 3,\n        \"ha-sync-mode\": \"automatic\"\n      },\n      \"priority\": 1,\n      \"apply-to\": \"queues\"\n    }\n  ]\n}\nEOF"
        ],
        "verification": "Check policies configuration exists",
        "expected_output": "policies.json created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/message-queue/rabbitmq/config/cluster.conf",
      "cat /opt/ai-q/message-queue/rabbitmq/config/policies.json"
    ],
    "expected_outputs": {
      "cluster_config": "cluster.conf contains cluster configuration",
      "policies": "policies.json contains cluster policies"
    }
  },
  "task_03_configure_management_ui": {
    "task_id": "01-06-03",
    "title": "Configure Management UI",
    "description": "Configure RabbitMQ Management UI with access controls",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-06-03-01",
        "title": "Create management configuration",
        "description": "Create management UI configuration",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/config/management.conf",
        "config_content": {
          "management.tcp.port": 15672,
          "management.tcp.ip": "0.0.0.0",
          "management.http_log_dir": "/var/log/rabbitmq/management",
          "management.http_log_dir.max_rotate_count": 5,
          "management.http_log_dir.max_file_size_in_mb": 10,
          "management.http_log_dir.max_total_size_in_mb": 100,
          "management.http_log_dir.enable_access_log_rotation": true,
          "management.http_log_dir.enable_error_log_rotation": true,
          "management.http_log_dir.enable_console_log_rotation": true,
          "management.http_log_dir.enable_file_log_rotation": true
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/config/management.conf << 'EOF'\nmanagement.tcp.port = 15672\nmanagement.tcp.ip = 0.0.0.0\nmanagement.http_log_dir = /var/log/rabbitmq/management\nmanagement.http_log_dir.max_rotate_count = 5\nmanagement.http_log_dir.max_file_size_in_mb = 10\nmanagement.http_log_dir.max_total_size_in_mb = 100\nmanagement.http_log_dir.enable_access_log_rotation = true\nmanagement.http_log_dir.enable_error_log_rotation = true\nmanagement.http_log_dir.enable_console_log_rotation = true\nmanagement.http_log_dir.enable_file_log_rotation = true\nEOF"
        ],
        "verification": "Check management configuration exists",
        "expected_output": "management.conf created with specified configuration"
      },
      {
        "step_id": "01-06-03-02",
        "title": "Create management users",
        "description": "Create management users with proper permissions",
        "config_file": "/opt/ai-q/message-queue/rabbitmq/config/users.conf",
        "config_content": {
          "default_user": "ai_q_admin",
          "default_pass": "ai_q_admin_password",
          "default_vhost": "/",
          "default_permissions.configure": ".*",
          "default_permissions.read": ".*",
          "default_permissions.write": ".*"
        },
        "commands": [
          "sudo tee /opt/ai-q/message-queue/rabbitmq/config/users.conf << 'EOF'\ndefault_user = ai_q_admin\ndefault_pass = ai_q_admin_password\ndefault_vhost = /\ndefault_permissions.configure = .*\ndefault_permissions.read = .*\ndefault_permissions.write = .*\nEOF"
        ],
        "verification": "Check users configuration exists",
        "expected_output": "users.conf created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/message-queue/rabbitmq/config/management.conf",
      "cat /opt/ai-q/message-queue/rabbitmq/config/users.conf"
    ],
    "expected_outputs": {
      "management_config": "management.conf contains management configuration",
      "users_config": "users.conf contains user configuration"
    }
  },
  "task_04_create_message_queue_docker_compose": {
    "task_id": "01-06-04",
    "title": "Create Docker Compose for Message Queue",
    "description": "Create docker-compose.yml for RabbitMQ cluster",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-06-04-01",
        "title": "Create message queue docker-compose.yml",
        "description": "Create complete docker-compose.yml for RabbitMQ cluster",
        "config_file": "/opt/ai-q/docker/compose/message-queue.yml",
        "config_content": {
          "version": "3.8",
          "services": {
            "rabbitmq-1": {
              "image": "rabbitmq:3.12-management",
              "container_name": "ai-q-rabbitmq-1",
              "hostname": "rabbitmq-1",
              "ports": [
                "5672:5672",
                "15672:15672"
              ],
              "volumes": [
                "/opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro",
                "/opt/ai-q/message-queue/rabbitmq/data/rabbitmq-1:/var/lib/rabbitmq",
                "/opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-1:/var/log/rabbitmq"
              ],
              "environment": [
                "RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG",
                "RABBITMQ_NODENAME=rabbit@rabbitmq-1",
                "RABBITMQ_USE_LONGNAME=true"
              ],
              "networks": [
                "ai-q-backend",
                "ai-q-monitoring"
              ],
              "restart": "unless-stopped"
            },
            "rabbitmq-2": {
              "image": "rabbitmq:3.12-management",
              "container_name": "ai-q-rabbitmq-2",
              "hostname": "rabbitmq-2",
              "ports": [
                "5673:5672",
                "15673:15672"
              ],
              "volumes": [
                "/opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro",
                "/opt/ai-q/message-queue/rabbitmq/data/rabbitmq-2:/var/lib/rabbitmq",
                "/opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-2:/var/log/rabbitmq"
              ],
              "environment": [
                "RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG",
                "RABBITMQ_NODENAME=rabbit@rabbitmq-2",
                "RABBITMQ_USE_LONGNAME=true"
              ],
              "networks": [
                "ai-q-backend",
                "ai-q-monitoring"
              ],
              "restart": "unless-stopped"
            },
            "rabbitmq-3": {
              "image": "rabbitmq:3.12-management",
              "container_name": "ai-q-rabbitmq-3",
              "hostname": "rabbitmq-3",
              "ports": [
                "5674:5672",
                "15674:15672"
              ],
              "volumes": [
                "/opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro",
                "/opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro",
                "/opt/ai-q/message-queue/rabbitmq/data/rabbitmq-3:/var/lib/rabbitmq",
                "/opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-3:/var/log/rabbitmq"
              ],
              "environment": [
                "RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG",
                "RABBITMQ_NODENAME=rabbit@rabbitmq-3",
                "RABBITMQ_USE_LONGNAME=true"
              ],
              "networks": [
                "ai-q-backend",
                "ai-q-monitoring"
              ],
              "restart": "unless-stopped"
            }
          },
          "networks": {
            "ai-q-backend": {
              "external": true
            },
            "ai-q-monitoring": {
              "external": true
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/docker/compose/message-queue.yml << 'EOF'\nversion: '3.8'\n\nservices:\n  rabbitmq-1:\n    image: rabbitmq:3.12-management\n    container_name: ai-q-rabbitmq-1\n    hostname: rabbitmq-1\n    ports:\n      - 5672:5672\n      - 15672:15672\n    volumes:\n      - /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro\n      - /opt/ai-q/message-queue/rabbitmq/data/rabbitmq-1:/var/lib/rabbitmq\n      - /opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-1:/var/log/rabbitmq\n    environment:\n      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG\n      - RABBITMQ_NODENAME=rabbit@rabbitmq-1\n      - RABBITMQ_USE_LONGNAME=true\n    networks:\n      - ai-q-backend\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  rabbitmq-2:\n    image: rabbitmq:3.12-management\n    container_name: ai-q-rabbitmq-2\n    hostname: rabbitmq-2\n    ports:\n      - 5673:5672\n      - 15673:15672\n    volumes:\n      - /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro\n      - /opt/ai-q/message-queue/rabbitmq/data/rabbitmq-2:/var/lib/rabbitmq\n      - /opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-2:/var/log/rabbitmq\n    environment:\n      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG\n      - RABBITMQ_NODENAME=rabbit@rabbitmq-2\n      - RABBITMQ_USE_LONGNAME=true\n    networks:\n      - ai-q-backend\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  rabbitmq-3:\n    image: rabbitmq:3.12-management\n    container_name: ai-q-rabbitmq-3\n    hostname: rabbitmq-3\n    ports:\n      - 5674:5672\n      - 15674:15672\n    volumes:\n      - /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/cluster.conf:/etc/rabbitmq/cluster.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/management.conf:/etc/rabbitmq/management.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/config/users.conf:/etc/rabbitmq/users.conf:ro\n      - /opt/ai-q/message-queue/rabbitmq/definitions/definitions.json:/etc/rabbitmq/definitions.json:ro\n      - /opt/ai-q/message-queue/rabbitmq/data/rabbitmq-3:/var/lib/rabbitmq\n      - /opt/ai-q/message-queue/rabbitmq/logs/rabbitmq-3:/var/log/rabbitmq\n    environment:\n      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG\n      - RABBITMQ_NODENAME=rabbit@rabbitmq-3\n      - RABBITMQ_USE_LONGNAME=true\n    networks:\n      - ai-q-backend\n      - ai-q-monitoring\n    restart: unless-stopped\n\nnetworks:\n  ai-q-backend:\n    external: true\n  ai-q-monitoring:\n    external: true\nEOF"
        ],
        "verification": "Check docker-compose file exists",
        "expected_output": "message-queue.yml created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/docker/compose/message-queue.yml",
      "docker-compose -f /opt/ai-q/docker/compose/message-queue.yml config"
    ],
    "expected_outputs": {
      "config_valid": "Docker Compose configuration is valid",
      "services": "All 3 RabbitMQ cluster nodes defined"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Message Queue Verification",
      "description": "Run comprehensive tests to verify RabbitMQ cluster",
      "test_commands": [
        "docker-compose -f /opt/ai-q/docker/compose/message-queue.yml up -d",
        "sleep 60",
        "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/overview",
        "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/nodes",
        "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/queues",
        "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/exchanges",
        "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/vhosts",
        "rabbitmqctl -n rabbit@rabbitmq-1 cluster_status"
      ],
      "expected_results": {
        "overview": "Returns cluster overview information",
        "nodes": "Returns all cluster nodes",
        "queues": "Returns all queues",
        "exchanges": "Returns all exchanges",
        "vhosts": "Returns all virtual hosts",
        "cluster_status": "Shows cluster status"
      }
    }
  },
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "RabbitMQ nodes not joining cluster",
        "symptoms": "Nodes show as separate in management UI",
        "solution": "Check Erlang cookie and network connectivity",
        "commands": [
          "docker logs ai-q-rabbitmq-1",
          "docker logs ai-q-rabbitmq-2",
          "docker logs ai-q-rabbitmq-3",
          "rabbitmqctl -n rabbit@rabbitmq-1 cluster_status"
        ]
      },
      {
        "issue": "Management UI not accessible",
        "symptoms": "Cannot access management UI on port 15672",
        "solution": "Check management plugin and configuration",
        "commands": [
          "docker exec ai-q-rabbitmq-1 rabbitmq-plugins list",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/overview"
        ]
      },
      {
        "issue": "Queues not created",
        "symptoms": "Queues not appearing in management UI",
        "solution": "Check definitions file and permissions",
        "commands": [
          "cat /opt/ai-q/message-queue/rabbitmq/definitions/definitions.json",
          "docker exec ai-q-rabbitmq-1 rabbitmqctl list_queues"
        ]
      }
    ]
  },
  "kitchen_execution": {
    "orchestrator_steps": [
      {
        "step_id": "STEP_1",
        "action": "gather_ingredients",
        "description": "Load all required pantry ingredients with aggressive caching",
        "ingredients": [
          "task:rabbitmq-setup:1.0.0",
          "task:clustering:1.0.0",
          "task:management-ui:1.0.0",
          "task:monitoring:1.0.0",
          "skill:rabbitmq-configuration:1.0.0",
          "skill:message-queue:1.0.0",
          "skill:clustering:1.0.0",
          "tool:rabbitmq-setup:1.0.0",
          "tool:cluster-setup:1.0.0",
          "config:rabbitmq:1.0.0",
          "config:cluster:1.0.0"
        ],
        "exact_commands": [
          "python3 scripts/message_queue/setup_rabbitmq.py --gather-ingredients",
          "python3 scripts/message_queue/setup_cluster.py --gather-ingredients",
          "python3 scripts/message_queue/setup_management.py --gather-ingredients"
        ]
      },
      {
        "step_id": "STEP_2",
        "action": "validate_dependencies",
        "description": "Verify all ingredient dependencies are satisfied",
        "checks": [
          "Docker environment operational",
          "Docker networks available",
          "Docker volumes accessible",
          "Minimum 4GB RAM available",
          "20GB free disk space available",
          "Service discovery infrastructure operational"
        ],
        "exact_commands": [
          "docker network ls --filter name=ai-q",
          "docker volume ls --filter name=ai-q",
          "free -h | grep Mem | awk '{print $2}'",
          "df -h /opt/ai-q | awk 'NR==2 {print $4}'",
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "curl -s http://localhost:8500/v1/status/leader || echo 'Service discovery not ready'"
        ]
      },
      {
        "step_id": "STEP_3",
        "action": "execute_rabbitmq_setup",
        "description": "Install and configure RabbitMQ server with exact commands",
        "sub_steps": [
          "Create RabbitMQ directories",
          "Create RabbitMQ configuration",
          "Set permissions",
          "Validate configuration"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/message-queue/rabbitmq/{config,data,logs,plugins,definitions}",
          "chmod 755 /opt/ai-q/message-queue/rabbitmq",
          "tee /opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf << 'EOF'",
          "listeners.tcp.default = 5672",
          "listeners.ssl.default = 5671",
          "management.tcp.port = 15672",
          "management.tcp.ip = 0.0.0.0",
          "management.load_definitions = /etc/rabbitmq/definitions.json",
          "management.http_log_dir = /var/log/rabbitmq/management",
          "log.file = /var/log/rabbitmq/rabbit.log",
          "log.file.level = info",
          "log.console = true",
          "log.console.level = info",
          "log.console.formatter = json",
          "log.console.formatter.json.field.date = timestamp",
          "log.console.formatter.json.field.level = level",
          "log.console.formatter.json.field.pid = pid",
          "log.console.formatter.json.field.source = source",
          "log.console.formatter.json.field.msg = message",
          "vm_memory_high_watermark.relative = 0.6",
          "vm_memory_high_watermark_paging_ratio = 0.5",
          "disk_free_limit.relative = 2.0",
          "cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config",
          "cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-1",
          "cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-2",
          "cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-3",
          "EOF",
          "chown -R 999:999 /opt/ai-q/message-queue/rabbitmq/"
        ],
        "files_to_create": [
          "/opt/ai-q/message-queue/rabbitmq/config/",
          "/opt/ai-q/message-queue/rabbitmq/data/",
          "/opt/ai-q/message-queue/rabbitmq/logs/",
          "/opt/ai-q/message-queue/rabbitmq/plugins/",
          "/opt/ai-q/message-queue/rabbitmq/definitions/",
          "/opt/ai-q/message-queue/rabbitmq/config/rabbitmq.conf"
        ]
      },
      {
        "step_id": "STEP_4",
        "action": "execute_cluster_deployment",
        "description": "Deploy RabbitMQ cluster with exact commands",
        "sub_steps": [
          "Deploy RabbitMQ containers",
          "Wait for startup",
          "Validate cluster formation"
        ],
        "exact_commands": [
          "docker-compose -f /opt/ai-q/docker/compose/message-queue.yml up -d",
          "sleep 60",
          "docker logs ai-q-rabbitmq-1",
          "docker logs ai-q-rabbitmq-2",
          "docker logs ai-q-rabbitmq-3"
        ],
        "files_to_create": [
          "Docker containers: ai-q-rabbitmq-1, ai-q-rabbitmq-2, ai-q-rabbitmq-3"
        ]
      },
      {
        "step_id": "STEP_5",
        "action": "execute_management_setup",
        "description": "Configure management UI and monitoring",
        "sub_steps": [
          "Enable management plugin",
          "Configure monitoring",
          "Validate management UI"
        ],
        "exact_commands": [
          "docker exec ai-q-rabbitmq-1 rabbitmq-plugins enable rabbitmq_management",
          "docker exec ai-q-rabbitmq-2 rabbitmq-plugins enable rabbitmq_management",
          "docker exec ai-q-rabbitmq-3 rabbitmq-plugins enable rabbitmq_management",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/overview",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/nodes"
        ],
        "files_to_create": []
      },
      {
        "step_id": "STEP_6",
        "action": "execute_integration_testing",
        "description": "Test message queue integration with other components",
        "sub_steps": [
          "Test cluster connectivity",
          "Test queue operations",
          "Test monitoring integration"
        ],
        "exact_commands": [
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/queues",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/exchanges",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/vhosts",
          "rabbitmqctl -n rabbit@rabbitmq-1 cluster_status"
        ],
        "files_to_create": []
      },
      {
        "step_id": "STEP_7",
        "action": "validate_results",
        "description": "Validate complete message queue infrastructure setup",
        "validation": "message_queue_infrastructure_validation",
        "exact_commands": [
          "docker ps --filter name=ai-q-rabbitmq",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/overview",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/nodes",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/queues",
          "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/exchanges",
          "rabbitmqctl -n rabbit@rabbitmq-1 cluster_status",
          "rabbitmqctl -n rabbit@rabbitmq-1 list_queues"
        ]
      },
      {
        "step_id": "STEP_8",
        "action": "cache_results",
        "description": "Cache message queue infrastructure configuration and setup",
        "cache_key": "message_queue_infrastructure_cache",
        "exact_commands": [
          "python3 scripts/message_queue/setup_rabbitmq.py --cache-results",
          "python3 scripts/message_queue/setup_cluster.py --cache-results",
          "python3 scripts/message_queue/setup_management.py --cache-results",
          "tar -czf /opt/ai-q/cache/message_queue_infrastructure_cache.tar.gz /opt/ai-q/message-queue"
        ]
      }
    ],
    "caching_strategy": {
      "cache_key": "message_queue_infrastructure_cache",
      "cache_duration": "persistent",
      "cache_invalidation": "message_queue_update",
      "cache_validation": "message_queue_infrastructure_validation",
      "exact_cache_commands": [
        "python3 scripts/message_queue/setup_rabbitmq.py --cache-config",
        "python3 scripts/message_queue/setup_cluster.py --cache-config",
        "python3 scripts/message_queue/setup_management.py --cache-config"
      ]
    }
  },
  "acceptance_criteria": [
    "RabbitMQ server is running and accessible on port 5672",
    "Management UI is accessible on port 15672",
    "Cluster is formed with all 3 nodes",
    "All queues and exchanges are created",
    "Monitoring and alerting are configured",
    "All configuration files are properly created and secured",
    "Integration tests pass successfully",
    "Cluster policies are applied correctly",
    "Zero technical debt with complete documentation"
  ],
  "deliverables": [
    "Production-ready message queue infrastructure with RabbitMQ",
    "RabbitMQ cluster with high availability",
    "Management UI for monitoring and administration",
    "Queue and exchange definitions",
    "Monitoring and alerting configuration",
    "Comprehensive documentation with troubleshooting guides",
    "Validation scripts for all components",
    "Rollback procedures for safe deployment"
  ],
  "troubleshooting_guide": {
    "common_issues": [
      {
        "issue": "RabbitMQ container fails to start",
        "symptoms": [
          "Container exits immediately",
          "Port 5672 not accessible"
        ],
        "diagnosis": "Check RabbitMQ configuration and file permissions",
        "solution": "Verify configuration and restart container",
        "prevention": "Test configuration before deployment"
      },
      {
        "issue": "Cluster formation fails",
        "symptoms": [
          "Nodes not joining cluster",
          "Cluster status errors"
        ],
        "diagnosis": "Check cluster configuration and network connectivity",
        "solution": "Verify cluster configuration and restart nodes",
        "prevention": "Test cluster formation before deployment"
      },
      {
        "issue": "Management UI not accessible",
        "symptoms": [
          "Cannot access management UI on port 15672",
          "Plugin not enabled"
        ],
        "diagnosis": "Check management plugin and configuration",
        "solution": "Enable management plugin and restart RabbitMQ",
        "prevention": "Test management UI before deployment"
      },
      {
        "issue": "Queues not created",
        "symptoms": [
          "Queues not appearing in management UI",
          "Definitions not loaded"
        ],
        "diagnosis": "Check definitions file and permissions",
        "solution": "Verify definitions file and restart RabbitMQ",
        "prevention": "Test queue creation before deployment"
      },
      {
        "issue": "Authentication errors",
        "symptoms": [
          "Login failures",
          "Permission denied"
        ],
        "diagnosis": "Check user credentials and permissions",
        "solution": "Verify user setup and permissions",
        "prevention": "Test authentication before deployment"
      }
    ],
    "diagnostic_commands": [
      "docker ps --filter name=ai-q-rabbitmq",
      "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/overview",
      "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/nodes",
      "curl -u ai_q_admin:ai_q_admin_password http://localhost:15672/api/queues",
      "rabbitmqctl -n rabbit@rabbitmq-1 cluster_status",
      "docker logs ai-q-rabbitmq-1"
    ]
  },
  "performance_benchmarks": {
    "installation_time": "< 3 hours",
    "rabbitmq_startup_time": "< 30 seconds",
    "cluster_formation_time": "< 60 seconds",
    "queue_creation_time": "< 5 seconds",
    "message_publish_rate": "10000 msg/s",
    "message_consume_rate": "10000 msg/s",
    "management_ui_load_time": "< 3 seconds",
    "max_queues": 10000,
    "max_connections": 1000
  },
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  },
  "metadata": {
    "title": "01-06-Message-Queue",
    "version": "1.0.0",
    "creation_timestamp": "2025-07-07T05:00:00Z",
    "last_updated": "2025-07-07T05:00:00Z"
  },
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default implementation step",
      "command": "echo 'Recipe step needs implementation'",
      "expected_output": "Step completed successfully",
      "error_handling": "Continue on error"
    }
  ]
}