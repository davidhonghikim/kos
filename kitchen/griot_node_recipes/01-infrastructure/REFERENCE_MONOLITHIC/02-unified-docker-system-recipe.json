{
  "recipe_metadata": {
    "recipe_id": "02-UNIFIED-DOCKER-SYSTEM-COMPREHENSIVE",
    "title": "Unified Docker Compose System - Complete Service Integration",
    "version": "5.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-07-06T16:37:00Z",
    "last_updated": "2025-07-06T16:37:00Z",
    "estimated_tokens": 80000,
    "estimated_execution_time": "2-3 hours",
    "difficulty_level": "expert",
    "total_tasks": 1,
    "agent_autonomy_level": "95%",
    "success_rate_target": "99%",
    "compliance_standards": ["SOC 2", "ISO 27001"],
    "architecture_tier": "enterprise-containerization",
    "description": "Master recipe orchestrating comprehensive unified Docker Compose system with exact specifications, atomic tasks, and zero technical debt",
    "is_master_recipe": true,
    "kitchen_system": {
      "pantry_category": "infrastructure",
      "cooking_time": "180 minutes",
      "complexity": "expert",
      "kitchen_tools": ["docker_orchestration", "service_integration", "unified_deployment", "health_monitoring"],
      "cache_strategy": "unified_docker_cache",
      "orchestrator_priority": "critical"
    }
  },
  "recipe_overview": {
    "name": "Unified Docker Compose System",
    "description": "Complete unified Docker Compose system that integrates all ai-Q services including AI/ML services, self-hosted services, infrastructure services, and monitoring components into a single, orchestrated deployment system",
    "prerequisites": [
      "Ubuntu 22.04 LTS or Windows 11 with WSL2",
      "Minimum 16GB RAM, 8 CPU cores",
      "100GB free disk space",
      "Docker Engine 24.0+ installed",
      "Docker Compose 2.20+ installed",
      "Git 2.35+ installed"
    ],
    "target_outcome": "Production-ready unified Docker system with zero technical debt",
    "success_criteria": [
      "All services start successfully with health checks",
      "Unified network configuration operational",
      "Service discovery and communication functional",
      "Volume management and data persistence working",
      "Health monitoring and validation operational",
      "All components can be safely installed/uninstalled"
    ]
  },
  "pantry_ingredients": {
    "tasks": [
      {
        "task_id": "UNIFIED_DOCKER_SETUP_TASK",
        "name": "Unified Docker System Setup",
        "description": "Create comprehensive unified Docker Compose system with exact configurations",
        "estimated_time": "120 minutes",
        "dependencies": [],
        "skills_required": ["docker_orchestration", "service_integration", "network_configuration"],
        "exact_commands": [
          "mkdir -p /opt/ai-q/{data,config,logs,backups}",
          "chmod 755 /opt/ai-q",
          "docker network create ai-q-network --subnet=172.20.0.0/16",
          "docker network create ai-q-monitoring --subnet=172.21.0.0/16",
          "docker network create ai-q-services --subnet=172.22.0.0/16"
        ]
      },
      {
        "task_id": "SERVICE_DEPLOYMENT_TASK",
        "name": "Service Deployment and Integration",
        "description": "Deploy all services with exact configurations and health checks",
        "estimated_time": "60 minutes",
        "dependencies": ["UNIFIED_DOCKER_SETUP_TASK"],
        "skills_required": ["service_deployment", "health_monitoring", "integration_testing"],
        "exact_commands": [
          "docker-compose -f /opt/ai-q/docker-compose.yml up -d",
          "sleep 30",
          "docker-compose -f /opt/ai-q/docker-compose.yml ps",
          "curl -f http://localhost:3000/api/health",
          "curl -f http://localhost:11434/api/tags"
        ]
      }
    ],
    "skills": [
      {
        "skill_id": "DOCKER_ORCHESTRATION_SKILL",
        "name": "Docker Orchestration",
        "description": "Orchestrate Docker containers and services",
        "tools": ["docker", "docker_compose", "docker_swarm"],
        "validation": "docker_orchestration_validation",
        "exact_validation_commands": [
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "docker network ls --filter name=ai-q",
          "docker-compose config --quiet"
        ]
      },
      {
        "skill_id": "SERVICE_INTEGRATION_SKILL",
        "name": "Service Integration",
        "description": "Integrate multiple services with unified configuration",
        "tools": ["docker_compose", "service_discovery", "load_balancing"],
        "validation": "service_integration_validation",
        "exact_validation_commands": [
          "docker-compose -f /opt/ai-q/docker-compose.yml ps --services",
          "curl -f http://localhost:3000/api/v1/health",
          "curl -f http://localhost:11434/api/health"
        ]
      },
      {
        "skill_id": "HEALTH_MONITORING_SKILL",
        "name": "Health Monitoring",
        "description": "Monitor service health and status",
        "tools": ["health_checks", "monitoring", "alerting"],
        "validation": "health_monitoring_validation",
        "exact_validation_commands": [
          "docker-compose -f /opt/ai-q/docker-compose.yml ps --filter 'status=running'",
          "curl -f http://localhost:9090/-/healthy",
          "curl -f http://localhost:3000/api/health"
        ]
      }
    ],
    "tools": [
      {
        "tool_id": "UNIFIED_DOCKER_TOOL",
        "name": "Unified Docker Engine",
        "description": "Unified Docker orchestration system",
        "file_path": "src/services/infrastructure/unified_docker.py",
        "config": "config/infrastructure/unified_docker_config.json",
        "exact_config_spec": {
          "docker_compose_version": "3.8",
          "network_subnet": "172.20.0.0/16",
          "monitoring_subnet": "172.21.0.0/16",
          "services_subnet": "172.22.0.0/16",
          "health_check_interval": "30s"
        }
      },
      {
        "tool_id": "SERVICE_ORCHESTRATOR_TOOL",
        "name": "Service Orchestrator",
        "description": "Service orchestration and management",
        "file_path": "src/services/infrastructure/service_orchestrator.py",
        "config": "config/infrastructure/service_config.json",
        "exact_config_spec": {
          "service_startup_timeout": "300s",
          "health_check_retries": 3,
          "service_discovery_enabled": true,
          "load_balancing_enabled": true
        }
      },
      {
        "tool_id": "HEALTH_MONITOR_TOOL",
        "name": "Health Monitor",
        "description": "Service health monitoring and validation",
        "file_path": "src/services/infrastructure/health_monitor.py",
        "config": "config/infrastructure/health_config.json",
        "exact_config_spec": {
          "health_check_interval": "30s",
          "health_check_timeout": "10s",
          "alert_threshold": 3,
          "auto_restart_enabled": true
        }
      }
    ],
    "configs": [
      {
        "config_id": "UNIFIED_DOCKER_CONFIG",
        "name": "Unified Docker Configuration",
        "description": "Configuration for unified Docker system",
        "file_path": "config/infrastructure/unified_docker_config.json",
        "schema": "unified_docker_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "docker_compose_version": {"type": "string", "pattern": "^3\\.[0-9]+$"},
            "network_subnet": {"type": "string", "format": "ipv4-cidr"},
            "monitoring_subnet": {"type": "string", "format": "ipv4-cidr"},
            "services_subnet": {"type": "string", "format": "ipv4-cidr"},
            "health_check_interval": {"type": "string", "pattern": "^[0-9]+s$"}
          },
          "required": ["docker_compose_version", "network_subnet", "monitoring_subnet", "services_subnet", "health_check_interval"]
        }
      },
      {
        "config_id": "SERVICE_CONFIG",
        "name": "Service Configuration",
        "description": "Configuration for service orchestration",
        "file_path": "config/infrastructure/service_config.json",
        "schema": "service_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "service_startup_timeout": {"type": "string", "pattern": "^[0-9]+s$"},
            "health_check_retries": {"type": "integer", "minimum": 1, "maximum": 10},
            "service_discovery_enabled": {"type": "boolean"},
            "load_balancing_enabled": {"type": "boolean"}
          },
          "required": ["service_startup_timeout", "health_check_retries", "service_discovery_enabled", "load_balancing_enabled"]
        }
      },
      {
        "config_id": "HEALTH_CONFIG",
        "name": "Health Configuration",
        "description": "Configuration for health monitoring",
        "file_path": "config/infrastructure/health_config.json",
        "schema": "health_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "health_check_interval": {"type": "string", "pattern": "^[0-9]+s$"},
            "health_check_timeout": {"type": "string", "pattern": "^[0-9]+s$"},
            "alert_threshold": {"type": "integer", "minimum": 1, "maximum": 10},
            "auto_restart_enabled": {"type": "boolean"}
          },
          "required": ["health_check_interval", "health_check_timeout", "alert_threshold", "auto_restart_enabled"]
        }
      }
    ]
  },
  "kitchen_execution": {
    "orchestrator_steps": [
      {
        "step": 1,
        "action": "gather_ingredients",
        "description": "Load all required pantry ingredients with aggressive caching",
        "ingredients": [
          "task:pull-docker-image:1.0.0",
          "task:create-docker-network:1.0.0",
          "task:validate-docker-compose:1.0.0",
          "task:start-docker-service:1.0.0",
          "skill:run-docker-compose:1.0.0",
          "skill:configure-services:1.0.0",
          "tool:docker:24.0.0",
          "tool:docker-compose:2.20.0",
          "config:docker-compose-unified:1.0.0"
        ]
      },
      {
        "step": 2,
        "action": "validate_dependencies",
        "description": "Verify all ingredient dependencies are satisfied",
        "checks": [
          "Docker and Docker Compose are available",
          "All required images can be pulled",
          "Network configurations are valid",
          "Storage volumes are accessible",
          "Environment variables are properly set"
        ]
      },
      {
        "step": 3,
        "action": "execute_unified_deployment",
        "description": "Execute unified deployment with all services",
        "sub_steps": [
          "Create unified Docker Compose file",
          "Setup environment configuration",
          "Create necessary directories",
          "Deploy all services",
          "Verify service health"
        ]
      },
      {
        "step": 4,
        "action": "cache_results",
        "description": "Cache successful deployment results for future use",
        "cache_items": [
          "Docker images and configurations",
          "Environment settings",
          "Service configurations",
          "Health check results",
          "Deployment scripts"
        ]
      }
    ],
    "caching_strategy": {
      "ingredient_caching": "aggressive",
      "result_caching": "aggressive",
      "cache_validation": "content_hash",
      "cache_ttl": 604800,
      "cache_location": "local"
    }
  },
  "tasks": [
    {
      "id": "02-unified-docker-system-001",
      "title": "Unified Docker Compose System Implementation",
      "description": "Implement a comprehensive unified Docker Compose system that integrates all ai-Q services including AI/ML services (Ollama, OpenWebUI), self-hosted services (Gitea, NextCloud, Admin Panel), infrastructure services (databases, storage), and monitoring components into a single, orchestrated deployment system using the kitchen analogy system.",
      "category": "infrastructure",
      "estimated_tokens": 75000,
      "estimated_duration": "2-3 hours",
      "difficulty_level": "expert",
      "kitchen_system": {
        "pantry_ingredients_used": [
          "task:pull-docker-image:1.0.0",
          "task:create-docker-network:1.0.0",
          "task:validate-docker-compose:1.0.0",
          "task:start-docker-service:1.0.0",
          "skill:run-docker-compose:1.0.0",
          "skill:configure-services:1.0.0",
          "tool:docker:24.0.0",
          "tool:docker-compose:2.20.0",
          "config:docker-compose-unified:1.0.0"
        ],
        "caching_benefits": [
          "Docker images cached for faster deployment",
          "Configuration templates cached for reuse",
          "Service configurations cached for consistency",
          "Health check results cached for monitoring"
        ]
      },
      "prerequisites": {
        "knowledge_required": ["Docker Compose", "Container orchestration", "Service networking", "Environment management", "Kitchen analogy system"],
        "tools_required": ["Docker Engine", "Docker Compose V2", "Bash scripting", "Pantry system"],
        "environment_setup": ["Docker environment ready", "Network configuration planned", "Storage volumes prepared", "Kitchen system operational"]
      },
      "inputs": {
        "files_to_read": [
          "docker/compose/ollama.yml",
          "docker/compose/openwebui.yml",
          "docker/compose/docker-compose-self-hosted.yml",
          "docker/compose/docker-compose.unified.yml",
          "config/dynamic/dynamic-config.json"
        ],
        "pantry_ingredients": [
          "task:pull-docker-image:1.0.0",
          "task:create-docker-network:1.0.0",
          "task:validate-docker-compose:1.0.0",
          "task:start-docker-service:1.0.0",
          "skill:run-docker-compose:1.0.0",
          "skill:configure-services:1.0.0",
          "tool:docker:24.0.0",
          "tool:docker-compose:2.20.0",
          "config:docker-compose-unified:1.0.0"
        ],
        "config_dependencies": ["Network configuration", "Port assignments", "Volume mappings"],
        "environment_variables": [
          "AIQ_EXTERNAL_ADDRESS",
          "OLLAMA_PORT",
          "OPENWEBUI_PORT",
          "GITEA_PORT",
          "NEXTCLOUD_PORT",
          "ADMIN_PANEL_PORT"
        ],
        "external_services": ["Docker registry", "Network infrastructure"]
      },
      "outputs": {
        "files_created": [
          "docker/compose/unified.yml - Complete unified Docker Compose file",
          "docker/compose/env.template - Environment configuration template",
          "scripts/unified-deploy.sh - Unified deployment script",
          "scripts/unified-health-check.sh - Health monitoring script",
          "docs/unified-deployment.json - Deployment documentation"
        ],
        "files_modified": [
          "config/dynamic/dynamic-config.json - Add unified deployment ports"
        ],
        "api_endpoints": [
          "GET /unified/health - Overall system health",
          "GET /unified/services - Service status",
          "POST /unified/deploy - Deploy all services",
          "POST /unified/restart - Restart all services"
        ],
        "configuration_updates": ["Service integration", "Network configuration", "Volume management"],
        "cached_results": [
          "Docker images and configurations",
          "Environment settings",
          "Service health status",
          "Deployment scripts"
        ]
      },
      "dependencies": {
        "required_tasks": ["01-core-infrastructure"],
        "optional_tasks": [],
        "blocked_tasks": ["03-storage-systems", "04-database-setup", "05-monitoring-observability"],
        "pantry_dependencies": [
          "task:pull-docker-image:1.0.0",
          "task:create-docker-network:1.0.0",
          "skill:run-docker-compose:1.0.0",
          "tool:docker:24.0.0",
          "tool:docker-compose:2.20.0"
        ]
      },
      "detailed_instructions": {
        "overview": "This task creates a unified Docker Compose system that integrates all ai-Q services into a single, orchestrated deployment using the kitchen analogy system. The system includes AI/ML services (Ollama, OpenWebUI), self-hosted services (Gitea, NextCloud, Admin Panel), infrastructure services (databases, storage), and monitoring components, all properly networked and configured for seamless operation with intelligent caching.",
        "kitchen_execution_flow": [
          {
            "step": 1,
            "action": "gather_ingredients",
            "description": "Load all required pantry ingredients with aggressive caching",
            "ingredients": [
              "task:pull-docker-image:1.0.0",
              "task:create-docker-network:1.0.0",
              "task:validate-docker-compose:1.0.0",
              "task:start-docker-service:1.0.0",
              "skill:run-docker-compose:1.0.0",
              "skill:configure-services:1.0.0",
              "tool:docker:24.0.0",
              "tool:docker-compose:2.20.0",
              "config:docker-compose-unified:1.0.0"
            ]
          },
          {
            "step": 2,
            "action": "validate_dependencies",
            "description": "Verify all ingredient dependencies are satisfied",
            "checks": [
              "Docker and Docker Compose are available",
              "All required images can be pulled",
              "Network configurations are valid",
              "Storage volumes are accessible"
            ]
          },
          {
            "step": 3,
            "action": "execute_deployment",
            "description": "Execute unified deployment with all services",
            "sub_steps": [
              "Create unified Docker Compose file",
              "Setup environment configuration",
              "Create necessary directories",
              "Deploy all services",
              "Verify service health"
            ]
          },
          {
            "step": 4,
            "action": "cache_results",
            "description": "Cache successful deployment results for future use",
            "cache_items": [
              "Docker images and configurations",
              "Environment settings",
              "Service configurations",
              "Health check results"
            ]
          }
        ],
        "step_by_step_guide": [
          {
            "step": 1,
            "title": "Create Unified Docker Compose File",
            "description": "Create a comprehensive unified Docker Compose file that integrates all services using pantry ingredients",
            "kitchen_commands": [
              "# Use pantry ingredient to create unified Docker Compose file",
              "task:create-docker-compose-file:1.0.0 --template=unified --services=all",
              "",
              "# Validate the configuration using pantry ingredient",
              "task:validate-docker-compose:1.0.0 --file=docker/compose/unified.yml",
              "",
              "# Create unified Docker Compose file",
              "cat > docker/compose/unified.yml << 'EOF'",
              "name: ai-q-unified",
              "",
              "services:",
              "  # ============================================================================",
              "  # AI/ML Services",
              "  # ============================================================================",
              "  ",
              "  # Ollama LLM Service",
              "  ollama:",
              "    image: ollama/ollama:latest",
              "    container_name: ai-q-ollama",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${OLLAMA_PORT:-11000}:11434\"",
              "    volumes:",
              "      - /opt/ai-q/data/ollama/models:/root/.ollama/models",
              "      - /opt/ai-q/data/ollama/config:/root/.ollama",
              "    environment:",
              "      - OLLAMA_HOST=0.0.0.0",
              "      - OLLAMA_ORIGINS=*",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:11434/api/tags\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    deploy:",
              "      resources:",
              "        reservations:",
              "          devices:",
              "            - driver: nvidia",
              "              count: all",
              "              capabilities: [gpu]",
              "",
              "  # OpenWebUI Service",
              "  openwebui:",
              "    image: ghcr.io/open-webui/open-webui:main",
              "    container_name: ai-q-openwebui",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${OPENWEBUI_PORT:-11001}:8080\"",
              "    volumes:",
              "      - /opt/ai-q/data/openwebui/data:/app/backend/data",
              "      - /opt/ai-q/data/openwebui/config:/app/backend/config",
              "    environment:",
              "      - OLLAMA_BASE_URL=http://ollama:11434",
              "      - WEBUI_SECRET_KEY=${OPENWEBUI_SECRET_KEY:-your-super-secret-openwebui-key-change-in-production}",
              "      - DEFAULT_MODELS=${OPENWEBUI_DEFAULT_MODELS:-gemma3:2b,codellama:7b}",
              "      - DEFAULT_USER_ROLE=admin",
              "      - ENABLE_SIGNUP=true",
              "      - ENABLE_LOGIN_FORM=true",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/v1/models\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    depends_on:",
              "      - ollama",
              "",
              "  # ============================================================================",
              "  # Self-Hosted Services",
              "  # ============================================================================",
              "  ",
              "  # Gitea Git Server",
              "  gitea:",
              "    image: gitea/gitea:1.21.0",
              "    container_name: ai-q-gitea",
              "    restart: unless-stopped",
              "    environment:",
              "      - USER_UID=1000",
              "      - USER_GID=1000",
              "    ports:",
              "      - \"${GITEA_PORT:-3002}:3000\"",
              "      - \"${GITEA_SSH_PORT:-222}:22\"",
              "    volumes:",
              "      - /opt/ai-q/data/gitea:/data",
              "      - /opt/ai-q/config/gitea/app.ini:/data/gitea/conf/app.ini",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # NextCloud File Storage",
              "  nextcloud:",
              "    image: nextcloud:25.0.0",
              "    container_name: ai-q-nextcloud",
              "    restart: unless-stopped",
              "    environment:",
              "      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER:-admin}",
              "      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-admin123}",
              "      - MYSQL_HOST=postgres",
              "      - MYSQL_DATABASE=nextcloud",
              "      - MYSQL_USER=nextcloud",
              "      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-nextcloud123}",
              "    ports:",
              "      - \"${NEXTCLOUD_PORT:-8080}:80\"",
              "    volumes:",
              "      - /opt/ai-q/data/nextcloud:/var/www/html",
              "      - /opt/ai-q/config/nextcloud:/var/www/html/config",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/status.php\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    depends_on:",
              "      - postgres",
              "",
              "  # ============================================================================",
              "  # Infrastructure Services",
              "  # ============================================================================",
              "  ",
              "  # PostgreSQL Database",
              "  postgres:",
              "    image: postgres:15.0",
              "    container_name: ai-q-postgres",
              "    restart: unless-stopped",
              "    environment:",
              "      - POSTGRES_DB=aiq_db",
              "      - POSTGRES_USER=aiq_user",
              "      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aiq_password}",
              "    ports:",
              "      - \"${POSTGRES_PORT:-5432}:5432\"",
              "    volumes:",
              "      - /opt/ai-q/data/postgresql:/var/lib/postgresql/data",
              "      - /opt/ai-q/config/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD-SHELL\", \"pg_isready -U aiq_user -d aiq_db\"],
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # Redis Cache",
              "  redis:",
              "    image: redis:7.2.0",
              "    container_name: ai-q-redis",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${REDIS_PORT:-6379}:6379\"",
              "    volumes:",
              "      - /opt/ai-q/data/redis:/data",
              "      - /opt/ai-q/config/redis/redis.conf:/usr/local/etc/redis/redis.conf",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"redis-cli\", \"ping\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # MinIO Object Storage",
              "  minio:",
              "    image: minio/minio:latest",
              "    container_name: ai-q-minio",
              "    restart: unless-stopped",
              "    environment:",
              "      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}",
              "      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}",
              "    ports:",
              "      - \"${MINIO_PORT:-9000}:9000\"",
              "      - \"${MINIO_CONSOLE_PORT:-9001}:9001\"",
              "    volumes:",
              "      - /opt/ai-q/data/minio:/data",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    command: server /data --console-address \":9001\"",
              "",
              "networks:",
              "  ai-q-network:",
              "    driver: bridge",
              "    ipam:",
              "      config:",
              "        - subnet: 172.20.0.0/16",
              "",
              "volumes:",
              "  postgres_data:",
              "  redis_data:",
              "  minio_data:",
              "  ollama_models:",
              "  openwebui_data:",
              "  gitea_data:",
              "  nextcloud_data:",
              "EOF"
            ],
            "expected_output": "Unified Docker Compose file created with all services integrated",
            "troubleshooting": "Verify configuration syntax and ensure all service dependencies are correct",
            "caching_benefit": "Configuration template cached for reuse"
          },
          {
            "step": 2,
            "title": "Create Environment Configuration Template",
            "description": "Create comprehensive environment configuration template using pantry ingredients",
            "kitchen_commands": [
              "# Use pantry ingredient to create environment template",
              "task:create-environment-template:1.0.0 --template=unified --services=all",
              "",
              "# Create environment configuration template",
              "cat > docker/compose/env.template << 'EOF'",
              "# AI-Q Unified Environment Configuration",
              "# Copy this file to .env and modify as needed",
              "",
              "# External Address Configuration",
              "AIQ_EXTERNAL_ADDRESS=192.168.1.180",
              "",
              "# AI/ML Services",
              "OLLAMA_PORT=11000",
              "OPENWEBUI_PORT=11001",
              "OPENWEBUI_SECRET_KEY=your-super-secret-openwebui-key-change-in-production",
              "OPENWEBUI_DEFAULT_MODELS=gemma3:2b,codellama:7b",
              "",
              "# Self-Hosted Services",
              "GITEA_PORT=3002",
              "GITEA_SSH_PORT=222",
              "NEXTCLOUD_PORT=8080",
              "NEXTCLOUD_ADMIN_USER=admin",
              "NEXTCLOUD_ADMIN_PASSWORD=admin123",
              "NEXTCLOUD_DB_PASSWORD=nextcloud123",
              "",
              "# Infrastructure Services",
              "POSTGRES_PORT=5432",
              "POSTGRES_PASSWORD=aiq_password",
              "REDIS_PORT=6379",
              "MINIO_PORT=9000",
              "MINIO_CONSOLE_PORT=9001",
              "MINIO_ROOT_USER=minioadmin",
              "MINIO_ROOT_PASSWORD=minioadmin123",
              "",
              "# Network Configuration",
              "AIQ_NETWORK_SUBNET=172.20.0.0/16",
              "AIQ_NETWORK_GATEWAY=172.20.0.1",
              "",
              "# Security Configuration",
              "ENABLE_SSL=false",
              "SSL_CERT_PATH=/opt/ai-q/ssl/cert.pem",
              "SSL_KEY_PATH=/opt/ai-q/ssl/key.pem",
              "",
              "# Performance Configuration",
              "DOCKER_MEMORY_LIMIT=4g",
              "DOCKER_CPU_LIMIT=2.0",
              "EOF"
            ],
            "expected_output": "Environment configuration template created with all necessary variables",
            "troubleshooting": "Verify all environment variables are properly defined",
            "caching_benefit": "Template cached for reuse across deployments"
          },
          {
            "step": 3,
            "title": "Create Unified Deployment Script",
            "description": "Create comprehensive deployment script using pantry ingredients",
            "kitchen_commands": [
              "# Use pantry ingredient to create deployment script",
              "task:create-deployment-script:1.0.0 --template=unified --services=all",
              "",
              "# Create unified deployment script",
              "cat > scripts/unified-deploy.sh << 'EOF'",
              "#!/bin/bash",
              "",
              "# AI-Q Unified Deployment Script",
              "# This script deploys all ai-Q services using the unified Docker Compose system",
              "",
              "set -e",
              "",
              "# Configuration",
              "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
              "PROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"",
              "COMPOSE_DIR=\"$PROJECT_ROOT/docker/compose\"",
              "ENV_FILE=\"$COMPOSE_DIR/.env\"",
              "ENV_TEMPLATE=\"$COMPOSE_DIR/env.template\"",
              "",
              "# Colors for output",
              "RED='\\033[0;31m'",
              "GREEN='\\033[0;32m'",
              "YELLOW='\\033[1;33m'",
              "BLUE='\\033[0;34m'",
              "NC='\\033[0m' # No Color",
              "",
              "# Logging functions",
              "print_status() { echo -e \"${BLUE}[INFO]${NC} $1\"; }",
              "print_success() { echo -e \"${GREEN}[SUCCESS]${NC} $1\"; }",
              "print_warning() { echo -e \"${YELLOW}[WARNING]${NC} $1\"; }",
              "print_error() { echo -e \"${RED}[ERROR]${NC} $1\"; }",
              "",
              "# Function to check system requirements",
              "check_requirements() {",
              "    print_status \"Checking system requirements...\"",
              "    ",
              "    # Check if running as root",
              "    if [ \"$EUID\" -eq 0 ]; then",
              "        print_warning \"Running as root. Consider running as a regular user.\"",
              "    fi",
              "    ",
              "    # Check Docker",
              "    if ! command_exists docker; then",
              "        print_error \"Docker is not installed. Please install Docker first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    # Check Docker Compose",
              "    if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then",
              "        print_error \"Docker Compose is not installed. Please install Docker Compose first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    # Check if Docker daemon is running",
              "    if ! docker info >/dev/null 2>&1; then",
              "        print_error \"Docker daemon is not running. Please start Docker first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    print_success \"System requirements check passed\"",
              "}",
              "",
              "# Function to setup environment file",
              "setup_environment() {",
              "    print_status \"Setting up environment configuration...\"",
              "    ",
              "    if [ ! -f \"$ENV_FILE\" ]; then",
              "        if [ -f \"$ENV_TEMPLATE\" ]; then",
              "            cp \"$ENV_TEMPLATE\" \"$ENV_FILE\"",
              "            print_success \"Environment file created from template\"",
              "            print_warning \"Please review and modify $ENV_FILE before deployment\"",
              "        else",
              "            print_error \"Environment template not found at $ENV_TEMPLATE\"",
              "            exit 1",
              "        fi",
              "    else",
              "        print_status \"Environment file already exists\"",
              "    fi",
              "}",
              "",
              "# Function to create necessary directories",
              "create_directories() {",
              "    print_status \"Creating necessary directories...\"",
              "    ",
              "    # Create data directories",
              "    sudo mkdir -p /opt/ai-q/data/{openwebui,ollama,gitea,nextcloud,postgresql,redis,minio}",
              "    ",
              "    # Create config directories",
              "    sudo mkdir -p /opt/ai-q/config/{gitea,nextcloud,admin-panel}",
              "    ",
              "    # Create log directories",
              "    sudo mkdir -p /opt/ai-q/logs",
              "    ",
              "    # Set proper permissions",
              "    sudo chown -R 1000:1000 /opt/ai-q/data",
              "    sudo chown -R 1000:1000 /opt/ai-q/config",
              "    sudo chown -R 1000:1000 /opt/ai-q/logs",
              "    ",
              "    print_success \"Directories created successfully\"",
              "}",
              "",
              "# Function to deploy services",
              "deploy_services() {",
              "    print_status \"Deploying ai-Q services...\"",
              "    ",
              "    cd \"$COMPOSE_DIR\"",
              "    ",
              "    # Pull latest images",
              "    print_status \"Pulling latest Docker images...\"",
              "    docker-compose -f unified.yml pull",
              "    ",
              "    # Start services",
              "    print_status \"Starting services...\"",
              "    docker-compose -f unified.yml up -d",
              "    ",
              "    print_success \"Services deployment initiated\"",
              "}",
              "",
              "# Function to show service status",
              "show_status() {",
              "    print_status \"Service Status:\"",
              "    cd \"$COMPOSE_DIR\"",
              "    docker-compose -f unified.yml ps",
              "    ",
              "    echo \"\"",
              "    print_status \"Service URLs:\"",
              "    echo \"  - OpenWebUI: http://localhost:11001\"",
              "    echo \"  - Gitea: http://localhost:3002\"",
              "    echo \"  - NextCloud: http://localhost:8080\"",
              "    echo \"  - Admin Panel: http://localhost:9000\"",
              "    echo \"  - MinIO Console: http://localhost:9001\"",
              "}",
              "",
              "# Main execution",
              "main() {",
              "    local command=\"${1:-deploy}\"",
              "    ",
              "    case \"$command\" in",
              "        \"deploy\")",
              "            check_requirements",
              "            setup_environment",
              "            create_directories",
              "            deploy_services",
              "            show_status",
              "            ;;",
              "        \"status\")",
              "            show_status",
              "            ;;",
              "        \"help\"|\"-h\"|\"--help\")",
              "            echo \"AI-Q Unified Deployment Script\"",
              "            echo \"\"",
              "            echo \"Usage: $0 [COMMAND]\"",
              "            echo \"\"",
              "            echo \"Commands:\"",
              "            echo \"  deploy      - Deploy all services (default)\"",
              "            echo \"  status      - Show service status\"",
              "            echo \"  help        - Show this help message\"",
              "            ;;",
              "        *)",
              "            print_error \"Unknown command: $command\"",
              "            exit 1",
              "            ;;",
              "    esac",
              "}",
              "",
              "# Run main function with all arguments",
              "main \"$@\"",
              "EOF",
              "chmod +x scripts/unified-deploy.sh"
            ],
            "expected_output": "Unified deployment script created with comprehensive functionality",
            "troubleshooting": "Verify script syntax and ensure all paths are correct",
            "caching_benefit": "Script template cached for reuse"
          },
          {
            "step": 4,
            "title": "Test Unified Deployment",
            "description": "Test the unified deployment system and verify all services using pantry ingredients",
            "kitchen_commands": [
              "# Use pantry ingredient to test deployment",
              "task:test-deployment:1.0.0 --compose-file=docker/compose/unified.yml",
              "",
              "# Test unified deployment",
              "cd docker/compose",
              "docker-compose -f unified.yml config",
              "",
              "# Verify configuration is valid",
              "if [ $? -eq 0 ]; then",
              "    echo \"Unified Docker Compose configuration is valid\"",
              "else",
              "    echo \"Configuration validation failed\"",
              "    exit 1",
              "fi",
              "",
              "# Create health check script",
              "cat > ../../scripts/unified-health-check.sh << 'EOF'",
              "#!/bin/bash",
              "echo \"Checking unified system health...\"",
              "echo \"Ollama: $(curl -s http://localhost:11000/api/tags || echo 'DOWN')\"",
              "echo \"OpenWebUI: $(curl -s http://localhost:11001/api/v1/models || echo 'DOWN')\"",
              "echo \"Gitea: $(curl -s http://localhost:3002 || echo 'DOWN')\"",
              "echo \"NextCloud: $(curl -s http://localhost:8080/status.php || echo 'DOWN')\"",
              "echo \"Admin Panel: $(curl -s http://localhost:9000/health || echo 'DOWN')\"",
              "echo \"PostgreSQL: $(docker exec ai-q-postgres pg_isready -U aiq_user || echo 'DOWN')\"",
              "echo \"Redis: $(docker exec ai-q-redis redis-cli ping || echo 'DOWN')\"",
              "echo \"MinIO: $(curl -s http://localhost:9000/minio/health/live || echo 'DOWN')\"",
              "EOF",
              "chmod +x ../../scripts/unified-health-check.sh"
            ],
            "expected_output": "Unified deployment system tested and health check script created",
            "troubleshooting": "Check for any configuration errors and verify all service endpoints",
            "caching_benefit": "Test results cached for future reference"
          }
        ]
      },
      "acceptance_criteria": {
        "functional_requirements": [
          "All services (Ollama, OpenWebUI, Gitea, NextCloud, Admin Panel, PostgreSQL, Redis, MinIO) are integrated into unified Docker Compose",
          "Services are properly networked and can communicate with each other",
          "Environment configuration is templated and easily customizable",
          "Deployment script automates the complete setup process",
          "Health checks are implemented for all services",
          "Data persistence is configured for all services",
          "Kitchen system integration is complete with pantry ingredients"
        ],
        "performance_requirements": [
          "All services start within 60 seconds",
          "Service health checks respond within 10 seconds",
          "Network communication between services is established within 30 seconds",
          "Deployment script completes within 5 minutes",
          "System resource usage is optimized for containerized deployment",
          "Cache hit rate > 80% for frequently used ingredients"
        ],
        "security_requirements": [
          "All services use secure default configurations",
          "Environment variables are properly templated for production use",
          "Network isolation is implemented between services",
          "Health check endpoints are secured",
          "Data volumes are properly configured with appropriate permissions"
        ],
        "integration_requirements": [
          "Unified system integrates with existing ai-Q infrastructure",
          "All services are discoverable and accessible",
          "Configuration is consistent across all components",
          "Deployment process is repeatable and reliable",
          "Health monitoring provides comprehensive system visibility",
          "Kitchen system provides atomic, reusable ingredients"
        ]
      }
    }
  ]
} 