{
  "recipe_metadata": {
    "recipe_id": "02-02-DOCKER-SERVICES-INTEGRATION",
    "title": "Docker Services Integration - Service Deployment and Health Monitoring",
    "version": "5.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-07-05T18:05:47Z",
    "last_updated": "2025-07-05T18:05:47Z",
    "estimated_tokens": 45000,
    "estimated_execution_time": "90 minutes",
    "difficulty_level": "expert",
    "total_tasks": 3,
    "agent_autonomy_level": "95%",
    "success_rate_target": "99%",
    "compliance_standards": [
      "SOC 2",
      "ISO 27001"
    ],
    "architecture_tier": "enterprise-containerization",
    "description": "Docker services integration and health monitoring with exact specifications, atomic tasks, and zero technical debt",
    "is_master_recipe": false,
    "part_of_series": "02-unified-docker-system",
    "series_order": 2,
    "dependencies": [
      "02-01-docker-core-recipe.json"
    ],
    "kitchen_system": {
      "pantry_category": "infrastructure",
      "cooking_time": "90 minutes",
      "complexity": "expert",
      "kitchen_tools": [
        "service_integration",
        "health_monitoring",
        "unified_deployment"
      ],
      "cache_strategy": "docker_services_cache",
      "orchestrator_priority": "critical"
    }
  },
  "recipe_overview": {
    "name": "Docker Services Integration",
    "description": "Service integration and health monitoring with unified deployment configuration and comprehensive health checks",
    "prerequisites": [
      "02-01-docker-core-recipe.json completed",
      "Docker networks and volumes operational",
      "Docker environment properly configured",
      "Network connectivity for service deployment"
    ],
    "target_outcome": "Production-ready service integration with zero technical debt",
    "success_criteria": [
      "Service integration framework operational",
      "Health monitoring system functional",
      "Unified deployment configuration ready",
      "Service discovery and communication working",
      "All components can be safely installed/uninstalled"
    ]
  },
  "pantry_ingredients": {
    "tasks": [
      {
        "task_id": "SERVICE_INTEGRATION_TASK",
        "name": "Service Integration Framework",
        "description": "Create unified service integration framework with exact configurations",
        "estimated_time": "30 minutes",
        "dependencies": [],
        "skills_required": [
          "service_integration",
          "unified_management",
          "configuration_orchestration"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/services/{ai,web,api,monitoring}",
          "mkdir -p /opt/ai-q/config/services/{ai,web,api,monitoring}",
          "chmod 755 /opt/ai-q/services",
          "cp /opt/ai-q/docker/compose/docker-compose.yml /opt/ai-q/docker/compose/docker-compose.yml.backup",
          "touch /opt/ai-q/docker/compose/docker-compose.yml"
        ],
        "validation_commands": [
          "ls -la /opt/ai-q/services/",
          "ls -la /opt/ai-q/config/services/",
          "test -f /opt/ai-q/docker/compose/docker-compose.yml"
        ]
      },
      {
        "task_id": "HEALTH_MONITORING_TASK",
        "name": "Health Monitoring System",
        "description": "Deploy comprehensive health monitoring with exact configurations",
        "estimated_time": "30 minutes",
        "dependencies": [
          "SERVICE_INTEGRATION_TASK"
        ],
        "skills_required": [
          "health_monitoring",
          "service_discovery",
          "alert_management"
        ],
        "exact_commands": [
          "docker run -d --name health-checker --network ai-q-monitoring -p 8080:8080 -v /opt/ai-q/config/services/monitoring:/app/config healthcheck/healthcheck:latest",
          "sleep 30",
          "curl -f http://localhost:8080/health",
          "docker run -d --name service-registry --network ai-q-services -p 8500:8500 consul:1.15",
          "sleep 30",
          "curl -f http://localhost:8500/v1/status/leader"
        ],
        "validation_commands": [
          "docker ps --filter name=health-checker",
          "docker ps --filter name=service-registry",
          "curl -f http://localhost:8080/health",
          "curl -f http://localhost:8500/v1/status/leader"
        ]
      },
      {
        "task_id": "UNIFIED_DEPLOYMENT_TASK",
        "name": "Unified Deployment Configuration",
        "description": "Create unified deployment configuration with exact specifications",
        "estimated_time": "30 minutes",
        "dependencies": [
          "HEALTH_MONITORING_TASK"
        ],
        "skills_required": [
          "deployment_configuration",
          "service_orchestration",
          "load_balancing"
        ],
        "exact_commands": [
          "docker run -d --name load-balancer --network ai-q-services -p 80:80 -p 443:443 -v /opt/ai-q/config/services/api:/etc/nginx/conf.d nginx:alpine",
          "sleep 10",
          "curl -f http://localhost:80",
          "docker run -d --name service-orchestrator --network ai-q-services -p 3001:3001 -v /opt/ai-q/config/services:/app/config orchestrator/service-orchestrator:latest",
          "sleep 30",
          "curl -f http://localhost:3001/health"
        ],
        "validation_commands": [
          "docker ps --filter name=load-balancer",
          "docker ps --filter name=service-orchestrator",
          "curl -f http://localhost:80",
          "curl -f http://localhost:3001/health"
        ]
      }
    ],
    "skills": [
      {
        "skill_id": "SERVICE_INTEGRATION_SKILL",
        "name": "Service Integration",
        "description": "Integrate multiple services with unified configuration",
        "tools": [
          "docker_compose",
          "service_discovery",
          "load_balancing"
        ],
        "validation": "service_integration_validation",
        "exact_validation_commands": [
          "docker-compose -f /opt/ai-q/docker/compose/docker-compose.yml ps --services",
          "curl -f http://localhost:3001/api/v1/health",
          "curl -f http://localhost:8500/v1/status/leader"
        ]
      },
      {
        "skill_id": "HEALTH_MONITORING_SKILL",
        "name": "Health Monitoring",
        "description": "Monitor service health and status with exact procedures",
        "tools": [
          "health_checks",
          "monitoring",
          "alerting"
        ],
        "validation": "health_monitoring_validation",
        "exact_validation_commands": [
          "docker-compose -f /opt/ai-q/docker/compose/docker-compose.yml ps --filter 'status=running'",
          "curl -f http://localhost:8080/health",
          "curl -f http://localhost:3001/health"
        ]
      },
      {
        "skill_id": "UNIFIED_DEPLOYMENT_SKILL",
        "name": "Unified Deployment",
        "description": "Deploy services with unified configuration and orchestration",
        "tools": [
          "deployment_orchestration",
          "configuration_management",
          "service_discovery"
        ],
        "validation": "unified_deployment_validation",
        "exact_validation_commands": [
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "curl -f http://localhost:80",
          "curl -f http://localhost:3001/api/v1/services"
        ]
      }
    ],
    "tools": [
      {
        "tool_id": "SERVICE_INTEGRATION_TOOL",
        "name": "Service Integration Engine",
        "description": "Service integration and orchestration system",
        "file_path": "src/services/infrastructure/service_integration.py",
        "config": "config/infrastructure/service_integration_config.json",
        "exact_config_spec": {
          "service_startup_timeout": "300s",
          "health_check_retries": 3,
          "service_discovery_enabled": true,
          "load_balancing_enabled": true,
          "auto_restart_enabled": true
        }
      },
      {
        "tool_id": "HEALTH_MONITOR_TOOL",
        "name": "Health Monitor",
        "description": "Service health monitoring and validation",
        "file_path": "src/services/infrastructure/health_monitor.py",
        "config": "config/infrastructure/health_config.json",
        "exact_config_spec": {
          "health_check_interval": "30s",
          "health_check_timeout": "10s",
          "alert_threshold": 3,
          "auto_restart_enabled": true,
          "notification_enabled": true
        }
      },
      {
        "tool_id": "UNIFIED_DEPLOYMENT_TOOL",
        "name": "Unified Deployment Manager",
        "description": "Unified service deployment and orchestration",
        "file_path": "src/services/infrastructure/unified_deployment.py",
        "config": "config/infrastructure/deployment_config.json",
        "exact_config_spec": {
          "deployment_strategy": "rolling",
          "rollback_enabled": true,
          "blue_green_deployment": false,
          "canary_deployment": false,
          "max_parallel_deployments": 2
        }
      }
    ],
    "configs": [
      {
        "config_id": "SERVICE_INTEGRATION_CONFIG",
        "name": "Service Integration Configuration",
        "description": "Configuration for service integration",
        "file_path": "config/infrastructure/service_integration_config.json",
        "schema": "service_integration_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "service_startup_timeout": {
              "type": "string",
              "pattern": "^[0-9]+s$"
            },
            "health_check_retries": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10
            },
            "service_discovery_enabled": {
              "type": "boolean"
            },
            "load_balancing_enabled": {
              "type": "boolean"
            },
            "auto_restart_enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "service_startup_timeout",
            "health_check_retries",
            "service_discovery_enabled",
            "load_balancing_enabled",
            "auto_restart_enabled"
          ]
        }
      },
      {
        "config_id": "HEALTH_CONFIG",
        "name": "Health Configuration",
        "description": "Configuration for health monitoring",
        "file_path": "config/infrastructure/health_config.json",
        "schema": "health_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "health_check_interval": {
              "type": "string",
              "pattern": "^[0-9]+s$"
            },
            "health_check_timeout": {
              "type": "string",
              "pattern": "^[0-9]+s$"
            },
            "alert_threshold": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10
            },
            "auto_restart_enabled": {
              "type": "boolean"
            },
            "notification_enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "health_check_interval",
            "health_check_timeout",
            "alert_threshold",
            "auto_restart_enabled",
            "notification_enabled"
          ]
        }
      },
      {
        "config_id": "DEPLOYMENT_CONFIG",
        "name": "Deployment Configuration",
        "description": "Configuration for unified deployment",
        "file_path": "config/infrastructure/deployment_config.json",
        "schema": "deployment_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "deployment_strategy": {
              "type": "string",
              "enum": [
                "rolling",
                "recreate",
                "blue-green",
                "canary"
              ]
            },
            "rollback_enabled": {
              "type": "boolean"
            },
            "blue_green_deployment": {
              "type": "boolean"
            },
            "canary_deployment": {
              "type": "boolean"
            },
            "max_parallel_deployments": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10
            }
          },
          "required": [
            "deployment_strategy",
            "rollback_enabled",
            "blue_green_deployment",
            "canary_deployment",
            "max_parallel_deployments"
          ]
        }
      }
    ]
  },
  "kitchen_execution": {
    "orchestrator_steps": [
      {
        "step_id": "STEP_1",
        "action": "gather_ingredients",
        "description": "Load all required pantry ingredients with aggressive caching",
        "ingredients": [
          "task:service-integration:1.0.0",
          "task:health-monitoring:1.0.0",
          "task:unified-deployment:1.0.0",
          "skill:service-integration:1.0.0",
          "skill:health-monitoring:1.0.0",
          "skill:unified-deployment:1.0.0",
          "tool:service-integration:1.0.0",
          "tool:health-monitor:1.0.0",
          "tool:unified-deployment:1.0.0",
          "config:service-integration:1.0.0",
          "config:health:1.0.0",
          "config:deployment:1.0.0"
        ],
        "exact_commands": [
          "python3 scripts/docker/service_integration.py --gather-ingredients",
          "python3 scripts/docker/health_monitor.py --gather-ingredients",
          "python3 scripts/docker/unified_deployment.py --gather-ingredients"
        ]
      },
      {
        "step_id": "STEP_2",
        "action": "validate_dependencies",
        "description": "Verify Docker core foundation is operational",
        "checks": [
          "Docker core foundation completed",
          "Docker networks operational",
          "Docker volumes accessible",
          "Directory structure exists",
          "No running containers (clean state)"
        ],
        "exact_commands": [
          "docker network ls --filter name=ai-q",
          "docker volume ls --filter name=ai-q",
          "ls -la /opt/ai-q/",
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
        ]
      },
      {
        "step_id": "STEP_3",
        "action": "execute_service_integration",
        "description": "Create unified service integration framework with exact configurations",
        "sub_steps": [
          "Create service directories",
          "Create configuration directories",
          "Set proper permissions",
          "Backup existing compose file",
          "Create new compose file"
        ],
        "exact_commands": [
          "mkdir -p /opt/ai-q/services/{ai,web,api,monitoring}",
          "mkdir -p /opt/ai-q/config/services/{ai,web,api,monitoring}",
          "chmod 755 /opt/ai-q/services",
          "cp /opt/ai-q/docker/compose/docker-compose.yml /opt/ai-q/docker/compose/docker-compose.yml.backup",
          "touch /opt/ai-q/docker/compose/docker-compose.yml"
        ],
        "files_to_create": [
          "/opt/ai-q/services/ai/",
          "/opt/ai-q/services/web/",
          "/opt/ai-q/services/api/",
          "/opt/ai-q/services/monitoring/",
          "/opt/ai-q/config/services/ai/",
          "/opt/ai-q/config/services/web/",
          "/opt/ai-q/config/services/api/",
          "/opt/ai-q/config/services/monitoring/",
          "/opt/ai-q/docker/compose/docker-compose.yml"
        ]
      },
      {
        "step_id": "STEP_4",
        "action": "execute_health_monitoring",
        "description": "Deploy comprehensive health monitoring with exact configurations",
        "sub_steps": [
          "Deploy health checker service",
          "Deploy service registry",
          "Validate health monitoring services"
        ],
        "exact_commands": [
          "docker run -d --name health-checker --network ai-q-monitoring -p 8080:8080 -v /opt/ai-q/config/services/monitoring:/app/config healthcheck/healthcheck:latest",
          "sleep 30",
          "curl -f http://localhost:8080/health",
          "docker run -d --name service-registry --network ai-q-services -p 8500:8500 consul:1.15",
          "sleep 30",
          "curl -f http://localhost:8500/v1/status/leader"
        ]
      },
      {
        "step_id": "STEP_5",
        "action": "execute_unified_deployment",
        "description": "Create unified deployment configuration with exact specifications",
        "sub_steps": [
          "Deploy load balancer",
          "Deploy service orchestrator",
          "Validate deployment services"
        ],
        "exact_commands": [
          "docker run -d --name load-balancer --network ai-q-services -p 80:80 -p 443:443 -v /opt/ai-q/config/services/api:/etc/nginx/conf.d nginx:alpine",
          "sleep 10",
          "curl -f http://localhost:80",
          "docker run -d --name service-orchestrator --network ai-q-services -p 3001:3001 -v /opt/ai-q/config/services:/app/config orchestrator/service-orchestrator:latest",
          "sleep 30",
          "curl -f http://localhost:3001/health"
        ]
      },
      {
        "step_id": "STEP_6",
        "action": "validate_results",
        "description": "Validate complete service integration setup",
        "validation": "docker_services_validation",
        "exact_commands": [
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "curl -f http://localhost:8080/health",
          "curl -f http://localhost:8500/v1/status/leader",
          "curl -f http://localhost:80",
          "curl -f http://localhost:3001/health",
          "docker network inspect ai-q-services --format '{{.Containers}}'"
        ]
      },
      {
        "step_id": "STEP_7",
        "action": "cache_results",
        "description": "Cache service integration configuration and setup",
        "cache_key": "docker_services_cache",
        "exact_commands": [
          "python3 scripts/docker/service_integration.py --cache-results",
          "tar -czf /opt/ai-q/cache/docker_services_cache.tar.gz /opt/ai-q/services /opt/ai-q/config/services"
        ]
      }
    ],
    "caching_strategy": {
      "cache_key": "docker_services_cache",
      "cache_duration": "persistent",
      "cache_invalidation": "service_update",
      "cache_validation": "docker_services_validation",
      "exact_cache_commands": [
        "python3 scripts/docker/service_integration.py --cache-config",
        "python3 scripts/docker/health_monitor.py --cache-config",
        "python3 scripts/docker/unified_deployment.py --cache-config"
      ]
    }
  },
  "performance_benchmarks": {
    "execution_time_target": "90 minutes maximum",
    "service_startup_time": "Less than 60 seconds per service",
    "health_check_response_time": "Less than 5 seconds",
    "load_balancer_response_time": "Less than 100ms",
    "service_discovery_time": "Less than 10 seconds",
    "memory_usage_per_service": "Less than 512MB per service"
  },
  "troubleshooting_guide": {
    "common_issues": [
      {
        "issue": "Service startup timeout",
        "symptoms": [
          "Container failed to start",
          "Health check timeout"
        ],
        "solution": "Check service logs: docker logs <service-name>",
        "prevention": "Ensure proper resource allocation and network connectivity"
      },
      {
        "issue": "Network connectivity problems",
        "symptoms": [
          "Connection refused",
          "Service unreachable"
        ],
        "solution": "Verify network configuration: docker network inspect ai-q-services",
        "prevention": "Ensure services are connected to correct networks"
      },
      {
        "issue": "Port conflicts",
        "symptoms": [
          "Bind: address already in use",
          "Port already allocated"
        ],
        "solution": "Check port usage: netstat -tulpn | grep :<port>",
        "prevention": "Use unique ports for each service"
      },
      {
        "issue": "Health check failures",
        "symptoms": [
          "Health check failed",
          "Service unhealthy"
        ],
        "solution": "Check service configuration and dependencies",
        "prevention": "Implement proper health check endpoints"
      },
      {
        "issue": "Service discovery issues",
        "symptoms": [
          "Service not found",
          "Registry connection failed"
        ],
        "solution": "Restart service registry: docker restart service-registry",
        "prevention": "Ensure service registry is stable and accessible"
      }
    ],
    "diagnostic_commands": [
      "docker ps -a",
      "docker logs <service-name>",
      "docker network inspect ai-q-services",
      "curl -f http://localhost:8080/health",
      "curl -f http://localhost:8500/v1/status/leader",
      "curl -f http://localhost:3001/health"
    ]
  },
  "acceptance_criteria": {
    "service_integration": [
      "Service integration framework operational with exact specifications",
      "All service directories and configurations created",
      "Docker Compose configuration ready for deployment",
      "Service integration system functional"
    ],
    "health_monitoring": [
      "Health monitoring system operational with comprehensive checks",
      "Service registry functional for service discovery",
      "Health checker responding to all endpoints",
      "Monitoring system ready for service deployment"
    ],
    "unified_deployment": [
      "Load balancer operational and responding to requests",
      "Service orchestrator functional and healthy",
      "Unified deployment configuration ready",
      "Deployment system operational"
    ],
    "overall_system": [
      "Docker services integration operational",
      "All components can be safely installed/uninstalled",
      "Zero technical debt introduced",
      "System ready for full service deployment"
    ]
  },
  "deliverables": [
    "Production-ready service integration framework with exact configurations",
    "Comprehensive health monitoring system with service registry",
    "Unified deployment configuration with load balancer and orchestrator",
    "Complete documentation with troubleshooting guides",
    "Validation scripts for all service components",
    "Rollback procedures for safe service deployment",
    "Service discovery and orchestration system"
  ],
  "inputs": {
    "default_input": {
      "type": "string",
      "required": false,
      "default": "default_value",
      "description": "Default input parameter"
    }
  },
  "outputs": {
    "default_output": {
      "type": "string",
      "description": "Default output parameter"
    }
  },
  "metadata": {
    "title": "02-02-Docker-Services",
    "version": "1.0.0",
    "creation_timestamp": "2025-07-07T05:00:00Z",
    "last_updated": "2025-07-07T05:00:00Z"
  },
  "steps": [
    {
      "step_id": "STEP-01",
      "description": "Default implementation step",
      "command": "echo 'Recipe step needs implementation'",
      "expected_output": "Step completed successfully",
      "error_handling": "Continue on error"
    }
  ]
}