{
  "version": "1.0",
  "last_updated": "2025-07-07T01:25:00Z",
  "created_by": "AI-Q Agent - Claude Sonnet 4 - Sonnet 4",
  "converted_from": "E:\\kos\\ai-Q\\prompts\\agents\\agent_workflow.yml",
  "conversion_timestamp": "2025-07-07T01:25:00Z",
  "converter": "RobustYAMLToJSONConverter v1.0",
  "purpose": "Comprehensive workflow prompts for AI-Q agents to ensure consistent execution and high-quality deliverables.\n",
  "agent_introduction": {
    "template": "I am [AGENT_NAME], [MODEL_VERSION], taking over the AI-Q Knowledge Library System \nproject. My mission is to [SPECIFIC_MISSION] ensuring zero technical debt and \nproduction-only testing.\n\nI acknowledge the work of the previous agent and will thoroughly review and validate \nall existing work before proceeding. I will document all my actions and include my \nagent identification in all files I create or modify.\n\nSession started: [TIMESTAMP]\n\nCurrent project status:\n- Location: [PROJECT_PATH]\n- Previous agent: [PREVIOUS_AGENT]\n- Last handoff: [LAST_HANDOFF_DATE]\n- Critical issues: [CRITICAL_ISSUES]\n"
  },
  "execution_sequence": {
    "phase_1_validation": {
      "prompt": "PHASE 1: VALIDATION AND REVIEW\n\nBefore proceeding with any new work, I must:\n\n1. Review and validate all existing work:\n   - Examine all files and configurations for errors\n   - Verify all references and cross-links\n   - Validate against established schemas\n   - Identify any missing or incomplete content\n\n2. Verify environment and dependencies:\n   - Confirm all required tools are installed\n   - Verify Python virtual environment capability\n   - Check Docker service status\n   - Validate Git repository state\n\n3. Document findings:\n   - Create validation report with findings\n   - Document any errors or inconsistencies found\n   - List all files that need correction\n\nCommands to execute:\n- python -m pytest tests/ -v\n- pip list | findstr /R \"minio redis sqlalchemy neo4j elasticsearch weaviate\"\n- python --version\n- node --version\n- docker --version\n- git --version\n"
    },
    "phase_2_implementation": {
      "prompt": "PHASE 2: IMPLEMENTATION\n\nBased on validation results, proceed with implementation:\n\n1. Set up development environment:\n   - Create production-parity development environment\n   - Install all dependencies\n   - Configure IDE and tools\n   - Validate security scanning tools\n\n2. Implement core system components:\n   - Follow established execution plans\n   - Implement required features\n   - Create comprehensive tests\n   - Document all changes\n\n3. Migrate existing content:\n   - Analyze all existing content\n   - Apply naming conventions\n   - Convert formats where appropriate\n   - Create cross-references and relationships\n\nSuccess criteria:\n- All components functional\n- All tests passing with production data\n- Performance benchmarks met\n- Security requirements satisfied\n"
    },
    "phase_3_testing": {
      "prompt": "PHASE 3: TESTING AND VALIDATION\n\nExecute comprehensive testing:\n\n1. Comprehensive testing with production data:\n   - Run all unit tests with production data\n   - Execute integration tests\n   - Perform performance testing\n   - Conduct security testing\n\n2. System integration and validation:\n   - Test all end-to-end workflows\n   - Validate all integrations\n   - Verify all monitoring and alerting\n   - Test disaster recovery procedures\n\nValidation requirements:\n- All tests passing\n- Performance benchmarks met\n- Security requirements satisfied\n- No critical vulnerabilities\n"
    }
  },
  "error_handling": {
    "detection_prompt": "ERROR DETECTION PROTOCOL\n\nWhen encountering any error or issue:\n\n1. Stop immediately and analyze:\n   - What exactly went wrong?\n   - What was the expected behavior?\n   - What are the root causes?\n   - What are the potential impacts?\n\n2. Document the error:\n   - Error message and stack trace\n   - Steps to reproduce\n   - Environment details\n   - Previous working state\n\n3. Assess severity:\n   - Critical: System unusable, data loss risk\n   - High: Major functionality broken\n   - Medium: Minor functionality affected\n   - Low: Cosmetic or non-critical issues\n",
    "recovery_prompt": "ERROR RECOVERY PROTOCOL\n\nFor each error severity level:\n\nCRITICAL:\n- Immediate rollback to last known good state\n- Notify stakeholders immediately\n- Begin root cause analysis\n- Document incident response\n\nHIGH:\n- Implement workaround if possible\n- Begin fix implementation\n- Update status documentation\n- Plan for permanent solution\n\nMEDIUM:\n- Continue with workaround\n- Schedule fix for next iteration\n- Document in issue tracker\n- Monitor for escalation\n\nLOW:\n- Document for future improvement\n- Continue with current work\n- Add to technical debt log\n- Plan for cleanup iteration\n"
  },
  "documentation": {
    "file_creation_prompt": "FILE CREATION PROTOCOL\n\nWhen creating any new file:\n\n1. Use proper header template:\n   ```yaml\n   # [Document Title]\n   ---\n   version: \"[VERSION]\"\n   last_updated: \"[TIMESTAMP]\"\n   created_by: \"[AGENT_NAME] - [MODEL_VERSION]\"\n   purpose: >\n     [Document purpose and description]\n   ```\n\n2. Include comprehensive content:\n   - Clear structure and organization\n   - Detailed explanations\n   - Examples where appropriate\n   - Cross-references to related files\n\n3. Follow naming conventions:\n   - Use descriptive, consistent names\n   - Follow established patterns\n   - Include version information\n   - Use appropriate file extensions\n",
    "handoff_documentation_prompt": "HANDOFF DOCUMENTATION PROTOCOL\n\nBefore completing any handoff:\n\n1. Create comprehensive status report:\n   - Current project state\n   - All completed work\n   - All pending work\n   - All known issues\n\n2. Document technical decisions:\n   - Architecture decisions\n   - Technology choices\n   - Configuration changes\n   - Performance optimizations\n\n3. Provide next steps:\n   - Immediate priorities\n   - Recommended approach\n   - Potential challenges\n   - Success criteria\n"
  },
  "quality_assurance": {
    "code_review_prompt": "CODE REVIEW PROTOCOL\n\nBefore committing any code:\n\n1. Self-review checklist:\n   - Does the code follow established patterns?\n   - Are all edge cases handled?\n   - Is error handling comprehensive?\n   - Are security best practices followed?\n   - Is performance acceptable?\n   - Is documentation complete?\n\n2. Testing requirements:\n   - All tests passing\n   - New tests added for new functionality\n   - Performance tests included\n   - Security tests included\n\n3. Documentation requirements:\n   - Code comments for complex logic\n   - API documentation updated\n   - User documentation updated\n   - Configuration documentation updated\n",
    "validation_prompt": "VALIDATION PROTOCOL\n\nBefore marking any work complete:\n\n1. Functional validation:\n   - All requirements met\n   - All tests passing\n   - All integrations working\n   - All workflows functional\n\n2. Quality validation:\n   - Code quality standards met\n   - Documentation complete\n   - Performance requirements met\n   - Security requirements met\n\n3. Operational validation:\n   - Deployment procedures tested\n   - Monitoring and alerting active\n   - Backup and recovery tested\n   - Maintenance procedures documented\n"
  },
  "conclusion": "These workflow prompts ensure consistent, high-quality execution across all AI-Q agents. Each agent must follow these protocols to maintain system integrity and deliver reliable results. "
}