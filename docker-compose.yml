version: '3.8'

services:
  # Nginx Reverse Proxy (Core)
  kos-nginx:
    image: ${KOS_NGINX_IMAGE}
    container_name: kos-nginx
    ports:
      - "${KOS_NGINX_PORT}:${KOS_NGINX_CONTAINER_PORT}"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites:/etc/nginx/sites-available
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - kos-backend
      - kos-frontend
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Core kOS Backend API
  kos-backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: kos-backend
    ports:
      - "${KOS_API_PORT}:${KOS_API_CONTAINER_PORT}"
    environment:
      - NODE_ENV=${KOS_ENVIRONMENT}
      - DEBUG=${KOS_DEBUG}
      - LOG_LEVEL=${KOS_LOG_LEVEL}
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    depends_on:
      - kos-postgres
      - kos-redis
      - kos-neo4j
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Core kOS Frontend
  kos-frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: kos-frontend
    ports:
      - "${KOS_FRONTEND_PORT}:${KOS_FRONTEND_CONTAINER_PORT}"
    environment:
      - NODE_ENV=${KOS_ENVIRONMENT}
      - REACT_APP_API_URL=http://${KOS_API_HOST}:${KOS_API_PORT}
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    depends_on:
      - kos-backend
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # PostgreSQL Database (Core)
  kos-postgres:
    image: ${KOS_POSTGRES_IMAGE}
    container_name: kos-postgres
    environment:
      POSTGRES_DB: ${KOS_POSTGRES_DB}
      POSTGRES_USER: ${KOS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KOS_POSTGRES_PASSWORD}
    ports:
      - "${KOS_POSTGRES_PORT}:${KOS_POSTGRES_CONTAINER_PORT}"
    volumes:
      - kos_postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Redis Cache (Core)
  kos-redis:
    image: ${KOS_REDIS_IMAGE}
    container_name: kos-redis
    ports:
      - "${KOS_REDIS_PORT}:${KOS_REDIS_CONTAINER_PORT}"
    volumes:
      - kos_redis_data:/data
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Neo4j Graph Database (Core)
  kos-neo4j:
    image: ${KOS_NEO4J_IMAGE}
    container_name: kos-neo4j
    environment:
      NEO4J_AUTH: ${KOS_NEO4J_USER}/${KOS_NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "${KOS_NEO4J_HTTP_PORT}:${KOS_NEO4J_HTTP_CONTAINER_PORT}"
      - "${KOS_NEO4J_PORT}:${KOS_NEO4J_CONTAINER_PORT}"
    volumes:
      - kos_neo4j_data:/data
      - kos_neo4j_logs:/logs
      - kos_neo4j_import:/var/lib/neo4j/import
      - kos_neo4j_plugins:/plugins
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Gitea Git Hosting (Development)
  kos-gitea:
    image: ${KOS_GITEA_IMAGE}
    container_name: kos-gitea
    ports:
      - "${KOS_GITEA_PORT}:${KOS_GITEA_CONTAINER_PORT}"
      - "${KOS_GITEA_SSH_PORT}:${KOS_GITEA_SSH_CONTAINER_PORT}"
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=${KOS_POSTGRES_HOST}:${KOS_POSTGRES_PORT}
      - GITEA__database__NAME=${KOS_GITEA_DB_NAME}
      - GITEA__database__USER=${KOS_GITEA_DB_USER}
      - GITEA__database__PASSWD=${KOS_GITEA_DB_PASSWORD}
      - GITEA__server__DOMAIN=${KOS_GITEA_DOMAIN}
      - GITEA__server__ROOT_URL=http://${KOS_GITEA_DOMAIN}:${KOS_GITEA_PORT}/
    volumes:
      - kos_gitea_data:/data
      - kos_gitea_config:/data/gitea/conf
    depends_on:
      - kos-postgres
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # OpenWebUI (LLM Interface)
  kos-openwebui:
    image: ${KOS_OPENWEBUI_IMAGE}
    container_name: kos-openwebui
    ports:
      - "${KOS_OPENWEBUI_PORT}:${KOS_OPENWEBUI_CONTAINER_PORT}"
    environment:
      - OLLAMA_BASE_URL=http://${KOS_OLLAMA_HOST}:${KOS_OLLAMA_PORT}
      - WEBUI_SECRET_KEY=${KOS_OPENWEBUI_SECRET_KEY}
      - DEFAULT_MODELS=${KOS_OPENWEBUI_DEFAULT_MODELS}
    volumes:
      - kos_openwebui_data:/app/backend/data
    depends_on:
      - kos-ollama
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # Ollama (Local LLMs)
  kos-ollama:
    image: ${KOS_OLLAMA_IMAGE}
    container_name: kos-ollama
    ports:
      - "${KOS_OLLAMA_PORT}:${KOS_OLLAMA_CONTAINER_PORT}"
    environment:
      - OLLAMA_HOST=${KOS_OLLAMA_HOST}
      - OLLAMA_ORIGINS=${KOS_OLLAMA_ORIGINS}
    volumes:
      - kos_ollama_data:/root/.ollama
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # HashiCorp Vault (Secrets Management)
  kos-vault:
    image: ${KOS_VAULT_IMAGE}
    container_name: kos-vault
    ports:
      - "${KOS_VAULT_PORT}:${KOS_VAULT_CONTAINER_PORT}"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${KOS_VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:${KOS_VAULT_CONTAINER_PORT}
      - VAULT_ADDR=http://0.0.0.0:${KOS_VAULT_CONTAINER_PORT}
    volumes:
      - kos_vault_data:/vault/file
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - security

  # Supabase Local (Database + Auth)
  kos-supabase:
    image: ${KOS_SUPABASE_IMAGE}
    container_name: kos-supabase
    ports:
      - "${KOS_SUPABASE_PORT}:${KOS_SUPABASE_CONTAINER_PORT}"
      - "${KOS_SUPABASE_STUDIO_PORT}:${KOS_SUPABASE_STUDIO_CONTAINER_PORT}"
    environment:
      - POSTGRES_PASSWORD=${KOS_SUPABASE_DB_PASSWORD}
      - JWT_SECRET=${KOS_SUPABASE_JWT_SECRET}
      - ANON_KEY=${KOS_SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${KOS_SUPABASE_SERVICE_ROLE_KEY}
    volumes:
      - kos_supabase_data:/var/lib/postgresql/data
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # Browseruse (Browser Automation)
  kos-browseruse:
    image: ${KOS_BROWSERUSE_IMAGE}
    container_name: kos-browseruse
    ports:
      - "${KOS_BROWSERUSE_PORT}:${KOS_BROWSERUSE_CONTAINER_PORT}"
    environment:
      - BROWSERUSE_API_KEY=${KOS_BROWSERUSE_API_KEY}
      - BROWSERUSE_WORKSPACE=${KOS_BROWSERUSE_WORKSPACE}
    volumes:
      - kos_browseruse_data:/app/data
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # Context7 (Context Management)
  kos-context7:
    image: ${KOS_CONTEXT7_IMAGE}
    container_name: kos-context7
    ports:
      - "${KOS_CONTEXT7_PORT}:${KOS_CONTEXT7_CONTAINER_PORT}"
    environment:
      - CONTEXT7_API_KEY=${KOS_CONTEXT7_API_KEY}
      - CONTEXT7_DATABASE_URL=${KOS_CONTEXT7_DATABASE_URL}
    volumes:
      - kos_context7_data:/app/data
    depends_on:
      - kos-postgres
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # Codium with Copilot Local
  kos-codium:
    image: ${KOS_CODIUM_IMAGE}
    container_name: kos-codium
    ports:
      - "${KOS_CODIUM_PORT}:${KOS_CODIUM_CONTAINER_PORT}"
    environment:
      - CODIUM_EXTENSIONS=${KOS_CODIUM_EXTENSIONS}
      - CODIUM_SETTINGS=${KOS_CODIUM_SETTINGS}
      - CODIUM_COPILOT_ENABLED=${KOS_CODIUM_COPILOT_ENABLED}
    volumes:
      - kos_codium_data:/home/coder/project
      - kos_codium_extensions:/home/coder/.local/share/code-server/extensions
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - development

  # Prompt Manager Service
  kos-prompt-manager:
    build:
      context: .
      dockerfile: docker/prompt-manager.Dockerfile
    container_name: kos-prompt-manager
    ports:
      - "${KOS_PROMPT_MANAGER_PORT}:${KOS_PROMPT_MANAGER_CONTAINER_PORT}"
    environment:
      - DATABASE_URL=${KOS_PROMPT_MANAGER_DB_URL}
      - REDIS_URL=${KOS_PROMPT_MANAGER_REDIS_URL}
      - API_KEY=${KOS_PROMPT_MANAGER_API_KEY}
    volumes:
      - ./prompts:/app/prompts
      - kos_prompt_manager_data:/app/data
    depends_on:
      - kos-postgres
      - kos-redis
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Artifact Manager Service
  kos-artifact-manager:
    build:
      context: .
      dockerfile: docker/artifact-manager.Dockerfile
    container_name: kos-artifact-manager
    ports:
      - "${KOS_ARTIFACT_MANAGER_PORT}:${KOS_ARTIFACT_MANAGER_CONTAINER_PORT}"
    environment:
      - DATABASE_URL=${KOS_ARTIFACT_MANAGER_DB_URL}
      - STORAGE_PATH=${KOS_ARTIFACT_MANAGER_STORAGE_PATH}
      - MAX_FILE_SIZE=${KOS_ARTIFACT_MANAGER_MAX_FILE_SIZE}
      - API_KEY=${KOS_ARTIFACT_MANAGER_API_KEY}
    volumes:
      - kos_artifact_manager_data:/app/storage
      - ./artifacts:/app/artifacts
    depends_on:
      - kos-postgres
      - kos-minio
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - core

  # Elasticsearch (Optional - Search)
  kos-elasticsearch:
    image: ${KOS_ELASTICSEARCH_IMAGE}
    container_name: kos-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${KOS_ELASTICSEARCH_PORT}:${KOS_ELASTICSEARCH_CONTAINER_PORT}"
    volumes:
      - kos_elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - search

  # Weaviate Vector Database (Optional - Vector)
  kos-weaviate:
    image: ${KOS_WEAVIATE_IMAGE}
    container_name: kos-weaviate
    ports:
      - "${KOS_WEAVIATE_PORT}:${KOS_WEAVIATE_CONTAINER_PORT}"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - kos_weaviate_data:/var/lib/weaviate
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - vector

  # MinIO Object Storage (Optional - Storage)
  kos-minio:
    image: ${KOS_MINIO_IMAGE}
    container_name: kos-minio
    ports:
      - "${KOS_MINIO_PORT}:${KOS_MINIO_CONTAINER_PORT}"
      - "${KOS_MINIO_CONSOLE_PORT}:${KOS_MINIO_CONSOLE_CONTAINER_PORT}"
    environment:
      MINIO_ROOT_USER: ${KOS_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${KOS_MINIO_ROOT_PASSWORD}
    volumes:
      - kos_minio_data:/data
    command: server /data --console-address ":${KOS_MINIO_CONSOLE_CONTAINER_PORT}"
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - storage

  # Prometheus Monitoring (Optional - Monitoring)
  kos-prometheus:
    image: ${KOS_PROMETHEUS_IMAGE}
    container_name: kos-prometheus
    ports:
      - "${KOS_PROMETHEUS_PORT}:${KOS_PROMETHEUS_CONTAINER_PORT}"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - kos_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional - Monitoring)
  kos-grafana:
    image: ${KOS_GRAFANA_IMAGE}
    container_name: kos-grafana
    ports:
      - "${KOS_GRAFANA_PORT}:${KOS_GRAFANA_CONTAINER_PORT}"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${KOS_GRAFANA_ADMIN_PASSWORD}
    volumes:
      - kos_grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - kos-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  kos_postgres_data:
  kos_redis_data:
  kos_neo4j_data:
  kos_neo4j_logs:
  kos_neo4j_import:
  kos_neo4j_plugins:
  kos_gitea_data:
  kos_gitea_config:
  kos_openwebui_data:
  kos_ollama_data:
  kos_vault_data:
  kos_supabase_data:
  kos_browseruse_data:
  kos_context7_data:
  kos_codium_data:
  kos_codium_extensions:
  kos_prompt_manager_data:
  kos_artifact_manager_data:
  kos_elasticsearch_data:
  kos_weaviate_data:
  kos_minio_data:
  kos_prometheus_data:
  kos_grafana_data:

networks:
  kos-network:
    driver: bridge 